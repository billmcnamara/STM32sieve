
STM32sieve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d00  08008568  08008568  00009568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009268  08009268  0000b218  2**0
                  CONTENTS
  4 .ARM          00000008  08009268  08009268  0000a268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009270  08009270  0000b218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009270  08009270  0000a270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009274  08009274  0000a274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08009278  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000218  08009490  0000b218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08009490  0000b430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac25  00000000  00000000  0000b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e59  00000000  00000000  00015e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00017cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017912  00000000  00000000  000186c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c621  00000000  00000000  0002ffda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008b664  00000000  00000000  0003c5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c7c5f  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000078f  00000000  00000000  000c7ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ed4  00000000  00000000  000c8434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cc308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800854c 	.word	0x0800854c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800854c 	.word	0x0800854c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <convertTime>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to convert milliseconds to a human-readable time format
void convertTime(int milliseconds) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    if (milliseconds < 0) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	da03      	bge.n	8000f9e <convertTime+0x16>
        printf("Invalid time value.\n");
 8000f96:	4829      	ldr	r0, [pc, #164]	@ (800103c <convertTime+0xb4>)
 8000f98:	f003 ff5e 	bl	8004e58 <puts>
        return;
 8000f9c:	e04a      	b.n	8001034 <convertTime+0xac>
    }

    // Convert milliseconds to seconds
    int seconds = milliseconds / 1000;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a27      	ldr	r2, [pc, #156]	@ (8001040 <convertTime+0xb8>)
 8000fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa6:	1192      	asrs	r2, r2, #6
 8000fa8:	17db      	asrs	r3, r3, #31
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	617b      	str	r3, [r7, #20]

    // Convert seconds to hours, minutes, and remaining seconds
    int hours = seconds / 3600;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	4a24      	ldr	r2, [pc, #144]	@ (8001044 <convertTime+0xbc>)
 8000fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb6:	441a      	add	r2, r3
 8000fb8:	12d2      	asrs	r2, r2, #11
 8000fba:	17db      	asrs	r3, r3, #31
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	613b      	str	r3, [r7, #16]
    int minutes = (seconds % 3600) / 60;
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <convertTime+0xbc>)
 8000fc4:	fb83 1302 	smull	r1, r3, r3, r2
 8000fc8:	4413      	add	r3, r2
 8000fca:	12d9      	asrs	r1, r3, #11
 8000fcc:	17d3      	asrs	r3, r2, #31
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8000fd4:	fb01 f303 	mul.w	r3, r1, r3
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	4a1b      	ldr	r2, [pc, #108]	@ (8001048 <convertTime+0xc0>)
 8000fdc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe0:	441a      	add	r2, r3
 8000fe2:	1152      	asrs	r2, r2, #5
 8000fe4:	17db      	asrs	r3, r3, #31
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	60fb      	str	r3, [r7, #12]
    seconds = seconds % 60;
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <convertTime+0xc0>)
 8000fee:	fb83 1302 	smull	r1, r3, r3, r2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	1159      	asrs	r1, r3, #5
 8000ff6:	17d3      	asrs	r3, r2, #31
 8000ff8:	1ac9      	subs	r1, r1, r3
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	1a5b      	subs	r3, r3, r1
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	617b      	str	r3, [r7, #20]

    // Print the result in a formatted manner
    if (hours > 0) {
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	dd06      	ble.n	800101a <convertTime+0x92>
        printf("%d hours, %d minutes, and %d seconds\n", hours, minutes, seconds);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	6939      	ldr	r1, [r7, #16]
 8001012:	480e      	ldr	r0, [pc, #56]	@ (800104c <convertTime+0xc4>)
 8001014:	f003 feb8 	bl	8004d88 <iprintf>
 8001018:	e00c      	b.n	8001034 <convertTime+0xac>
    } else if (minutes > 0) {
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	dd05      	ble.n	800102c <convertTime+0xa4>
        printf("%d minutes and %d seconds\n", minutes, seconds);
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	68f9      	ldr	r1, [r7, #12]
 8001024:	480a      	ldr	r0, [pc, #40]	@ (8001050 <convertTime+0xc8>)
 8001026:	f003 feaf 	bl	8004d88 <iprintf>
 800102a:	e003      	b.n	8001034 <convertTime+0xac>
    } else {
        printf("%d seconds\n", seconds);
 800102c:	6979      	ldr	r1, [r7, #20]
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <convertTime+0xcc>)
 8001030:	f003 feaa 	bl	8004d88 <iprintf>
    }
}
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	08008568 	.word	0x08008568
 8001040:	10624dd3 	.word	0x10624dd3
 8001044:	91a2b3c5 	.word	0x91a2b3c5
 8001048:	88888889 	.word	0x88888889
 800104c:	0800857c 	.word	0x0800857c
 8001050:	080085a4 	.word	0x080085a4
 8001054:	080085c0 	.word	0x080085c0

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f001 fa55 	bl	800250c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f821 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 f8e9 	bl	800123c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800106a:	f000 f8bd 	bl	80011e8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800106e:	f000 f885 	bl	800117c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  ST7735_Init();
 8001072:	f000 fecb 	bl	8001e0c <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 8001076:	2000      	movs	r0, #0
 8001078:	f001 f84c 	bl	8002114 <ST7735_FillScreen>




  int millis1 = HAL_GetTick();
 800107c:	f001 faac 	bl	80025d8 <HAL_GetTick>
 8001080:	4603      	mov	r3, r0
 8001082:	60fb      	str	r3, [r7, #12]
  π(9900000);
 8001084:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <main+0x4c>)
 8001086:	f000 fdb3 	bl	8001bf0 <π>
  int millis2 = HAL_GetTick();
 800108a:	f001 faa5 	bl	80025d8 <HAL_GetTick>
 800108e:	4603      	mov	r3, r0
 8001090:	60bb      	str	r3, [r7, #8]
  int timeInMillis=millis2 - millis1;
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	607b      	str	r3, [r7, #4]
  convertTime(timeInMillis);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff74 	bl	8000f88 <convertTime>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <main+0x48>
 80010a4:	00970fe0 	.word	0x00970fe0

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	@ 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	@ 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 ffe2 	bl	8005080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <SystemClock_Config+0xcc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	4a27      	ldr	r2, [pc, #156]	@ (8001174 <SystemClock_Config+0xcc>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	@ 0x40
 80010dc:	4b25      	ldr	r3, [pc, #148]	@ (8001174 <SystemClock_Config+0xcc>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b22      	ldr	r3, [pc, #136]	@ (8001178 <SystemClock_Config+0xd0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a21      	ldr	r2, [pc, #132]	@ (8001178 <SystemClock_Config+0xd0>)
 80010f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <SystemClock_Config+0xd0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110c:	2310      	movs	r3, #16
 800110e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	2302      	movs	r3, #2
 8001112:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001114:	2300      	movs	r3, #0
 8001116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001118:	2310      	movs	r3, #16
 800111a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800111c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001120:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001122:	2304      	movs	r3, #4
 8001124:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001126:	2304      	movs	r3, #4
 8001128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112a:	f107 0320 	add.w	r3, r7, #32
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fd06 	bl	8002b40 <HAL_RCC_OscConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800113a:	f000 f929 	bl	8001390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113e:	230f      	movs	r3, #15
 8001140:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001142:	2302      	movs	r3, #2
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800114a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2102      	movs	r1, #2
 800115a:	4618      	mov	r0, r3
 800115c:	f001 ff68 	bl	8003030 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001166:	f000 f913 	bl	8001390 <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3750      	adds	r7, #80	@ 0x50
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40007000 	.word	0x40007000

0800117c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_SPI1_Init+0x64>)
 8001182:	4a18      	ldr	r2, [pc, #96]	@ (80011e4 <MX_SPI1_Init+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_SPI1_Init+0x64>)
 8001188:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800118c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_SPI1_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_SPI1_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_SPI1_Init+0x64>)
 80011a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_SPI1_Init+0x64>)
 80011b0:	2218      	movs	r2, #24
 80011b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_SPI1_Init+0x64>)
 80011c8:	220a      	movs	r2, #10
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <MX_SPI1_Init+0x64>)
 80011ce:	f002 f94f 	bl	8003470 <HAL_SPI_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011d8:	f000 f8da 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000234 	.word	0x20000234
 80011e4:	40013000 	.word	0x40013000

080011e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <MX_USART2_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_USART2_UART_Init+0x4c>)
 8001220:	f002 fbce 	bl	80039c0 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f8b1 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000028c 	.word	0x2000028c
 8001238:	40004400 	.word	0x40004400

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b41      	ldr	r3, [pc, #260]	@ (800135c <MX_GPIO_Init+0x120>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a40      	ldr	r2, [pc, #256]	@ (800135c <MX_GPIO_Init+0x120>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b3e      	ldr	r3, [pc, #248]	@ (800135c <MX_GPIO_Init+0x120>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b3a      	ldr	r3, [pc, #232]	@ (800135c <MX_GPIO_Init+0x120>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a39      	ldr	r2, [pc, #228]	@ (800135c <MX_GPIO_Init+0x120>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b37      	ldr	r3, [pc, #220]	@ (800135c <MX_GPIO_Init+0x120>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b33      	ldr	r3, [pc, #204]	@ (800135c <MX_GPIO_Init+0x120>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a32      	ldr	r2, [pc, #200]	@ (800135c <MX_GPIO_Init+0x120>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b30      	ldr	r3, [pc, #192]	@ (800135c <MX_GPIO_Init+0x120>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <MX_GPIO_Init+0x120>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a2b      	ldr	r2, [pc, #172]	@ (800135c <MX_GPIO_Init+0x120>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b29      	ldr	r3, [pc, #164]	@ (800135c <MX_GPIO_Init+0x120>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2180      	movs	r1, #128	@ 0x80
 80012c6:	4826      	ldr	r0, [pc, #152]	@ (8001360 <MX_GPIO_Init+0x124>)
 80012c8:	f001 fc20 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012d2:	4824      	ldr	r0, [pc, #144]	@ (8001364 <MX_GPIO_Init+0x128>)
 80012d4:	f001 fc1a 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2140      	movs	r1, #64	@ 0x40
 80012dc:	4822      	ldr	r0, [pc, #136]	@ (8001368 <MX_GPIO_Init+0x12c>)
 80012de:	f001 fc15 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4819      	ldr	r0, [pc, #100]	@ (8001360 <MX_GPIO_Init+0x124>)
 80012fa:	f001 fa83 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_RES_Pin;
 80012fe:	2380      	movs	r3, #128	@ 0x80
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST7735_RES_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4812      	ldr	r0, [pc, #72]	@ (8001360 <MX_GPIO_Init+0x124>)
 8001316:	f001 fa75 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7735_DC_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin;
 800131a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST7735_DC_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480c      	ldr	r0, [pc, #48]	@ (8001364 <MX_GPIO_Init+0x128>)
 8001334:	f001 fa66 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 8001338:	2340      	movs	r3, #64	@ 0x40
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	@ (8001368 <MX_GPIO_Init+0x12c>)
 8001350:	f001 fa58 	bl	8002804 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	@ 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020800 	.word	0x40020800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400

0800136c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001374:	1d39      	adds	r1, r7, #4
 8001376:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800137a:	2201      	movs	r2, #1
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <__io_putchar+0x20>)
 800137e:	f002 fb6f 	bl	8003a60 <HAL_UART_Transmit>

  return ch;
 8001382:	687b      	ldr	r3, [r7, #4]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000028c 	.word	0x2000028c

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <Error_Handler+0x8>

0800139c <draw_axis>:

// Count of primes
static int uptoval = 0;
static int count = 0;

void draw_axis() {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
	// warning the fonts are rotated differently to the orientation of the screen and the position of the 0,0
	// therefore the x looks wrong..
    // the x
    for (int i = 0; i < ST7735_WIDTH; i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	e00a      	b.n	80013be <draw_axis+0x22>
        ST7735_DrawPixel(i, ST7735_HEIGHT - 1, ST7735_WHITE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b0:	217f      	movs	r1, #127	@ 0x7f
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fd44 	bl	8001e40 <ST7735_DrawPixel>
    for (int i = 0; i < ST7735_WIDTH; i++) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3301      	adds	r3, #1
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80013c2:	ddf1      	ble.n	80013a8 <draw_axis+0xc>
    }
    // the y
    for (int i = 0; i < ST7735_HEIGHT; i++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	e00a      	b.n	80013e0 <draw_axis+0x44>
        ST7735_DrawPixel(0, i, ST7735_WHITE);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013d2:	4619      	mov	r1, r3
 80013d4:	2000      	movs	r0, #0
 80013d6:	f000 fd33 	bl	8001e40 <ST7735_DrawPixel>
    for (int i = 0; i < ST7735_HEIGHT; i++) {
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e4:	ddf1      	ble.n	80013ca <draw_axis+0x2e>
    }
}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <draw_axis_text>:

void draw_axis_text() {
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b095      	sub	sp, #84	@ 0x54
 80013f4:	af04      	add	r7, sp, #16
	// warning the fonts are rotated differently to the orientation of the screen and the position of the 0,0
	// therefore the y looks wrong..
    int OFFSET_FROM_0 = 3;
 80013f6:	2303      	movs	r3, #3
 80013f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // info box
    char count_n_string[16];
    snprintf(count_n_string, sizeof(count_n_string), "n %d", uptoval);
 80013fa:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <draw_axis_text+0xdc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f107 0020 	add.w	r0, r7, #32
 8001402:	4a33      	ldr	r2, [pc, #204]	@ (80014d0 <draw_axis_text+0xe0>)
 8001404:	2110      	movs	r1, #16
 8001406:	f003 fd2f 	bl	8004e68 <sniprintf>
    int draw_at_point_for_n = 20;
 800140a:	2314      	movs	r3, #20
 800140c:	63bb      	str	r3, [r7, #56]	@ 0x38
    ST7735_WriteString(20, draw_at_point_for_n, count_n_string, Font_7x10, ST7735_RED, ST7735_BLACK);
 800140e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001410:	b299      	uxth	r1, r3
 8001412:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <draw_axis_text+0xe4>)
 8001414:	f107 0020 	add.w	r0, r7, #32
 8001418:	2200      	movs	r2, #0
 800141a:	9202      	str	r2, [sp, #8]
 800141c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001420:	9201      	str	r2, [sp, #4]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	9200      	str	r2, [sp, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4602      	mov	r2, r0
 800142a:	2014      	movs	r0, #20
 800142c:	f000 fdb3 	bl	8001f96 <ST7735_WriteString>

    // x/y axis
    char log_x_string[16];
    snprintf(log_x_string, sizeof(log_x_string), "x 10^(%d)", int_log_x);
 8001430:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <draw_axis_text+0xe8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f107 0010 	add.w	r0, r7, #16
 8001438:	4a28      	ldr	r2, [pc, #160]	@ (80014dc <draw_axis_text+0xec>)
 800143a:	2110      	movs	r1, #16
 800143c:	f003 fd14 	bl	8004e68 <sniprintf>
    int draw_at_point_for_x = ST7735_HEIGHT - FONT_WIDTH - (strlen(log_x_string) * FONT_WIDTH);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4618      	mov	r0, r3
 8001446:	f7fe ff1b 	bl	8000280 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	3301      	adds	r3, #1
 800144e:	4a24      	ldr	r2, [pc, #144]	@ (80014e0 <draw_axis_text+0xf0>)
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800145a:	637b      	str	r3, [r7, #52]	@ 0x34
    ST7735_WriteString(draw_at_point_for_x,ST7735_HEIGHT - OFFSET_FROM_0 - FONT_HEIGHT,log_x_string, Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 800145c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800145e:	b298      	uxth	r0, r3
 8001460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <draw_axis_text+0xf4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4413      	add	r3, r2
 800146c:	b29b      	uxth	r3, r3
 800146e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001472:	b299      	uxth	r1, r3
 8001474:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <draw_axis_text+0xe4>)
 8001476:	f107 0410 	add.w	r4, r7, #16
 800147a:	2200      	movs	r2, #0
 800147c:	9202      	str	r2, [sp, #8]
 800147e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001482:	9201      	str	r2, [sp, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4622      	mov	r2, r4
 800148c:	f000 fd83 	bl	8001f96 <ST7735_WriteString>

    char log_y_string[16];
    snprintf(log_y_string, sizeof(log_y_string), "y 10^(%d)", int_log_y);
 8001490:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <draw_axis_text+0xf8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4638      	mov	r0, r7
 8001496:	4a15      	ldr	r2, [pc, #84]	@ (80014ec <draw_axis_text+0xfc>)
 8001498:	2110      	movs	r1, #16
 800149a:	f003 fce5 	bl	8004e68 <sniprintf>
    int draw_at_point_for_y = OFFSET_FROM_0 ;
 800149e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014a0:	633b      	str	r3, [r7, #48]	@ 0x30
    ST7735_WriteString(OFFSET_FROM_0, draw_at_point_for_y, log_y_string, Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 80014a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014a4:	b298      	uxth	r0, r3
 80014a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a8:	b299      	uxth	r1, r3
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <draw_axis_text+0xe4>)
 80014ac:	463c      	mov	r4, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	9202      	str	r2, [sp, #8]
 80014b2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80014b6:	9201      	str	r2, [sp, #4]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	9200      	str	r2, [sp, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4622      	mov	r2, r4
 80014c0:	f000 fd69 	bl	8001f96 <ST7735_WriteString>

    // printf("log: x:10^(%d) , y: 10^(%d)\n\r", int_log_x, int_log_y);
}
 80014c4:	bf00      	nop
 80014c6:	3744      	adds	r7, #68	@ 0x44
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	200002d4 	.word	0x200002d4
 80014d0:	080085cc 	.word	0x080085cc
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000020 	.word	0x20000020
 80014dc:	080085d4 	.word	0x080085d4
 80014e0:	20000008 	.word	0x20000008
 80014e4:	2000000c 	.word	0x2000000c
 80014e8:	20000028 	.word	0x20000028
 80014ec:	080085e0 	.word	0x080085e0

080014f0 <find_lower_log10_limit>:

int find_lower_log10_limit(int current_v) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    if (current_v == 0) return 1;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <find_lower_log10_limit+0x12>
 80014fe:	2301      	movs	r3, #1
 8001500:	e025      	b.n	800154e <find_lower_log10_limit+0x5e>
    int llog10_v = (int)log10(current_v);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff f816 	bl	8000534 <__aeabi_i2d>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	ec43 2b10 	vmov	d0, r2, r3
 8001510:	f005 fd36 	bl	8006f80 <log10>
 8001514:	ec53 2b10 	vmov	r2, r3, d0
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fb24 	bl	8000b68 <__aeabi_d2iz>
 8001520:	4603      	mov	r3, r0
 8001522:	60fb      	str	r3, [r7, #12]
    int lowerv_log10 = llog10_v - 1 ;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3b01      	subs	r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
    return (int)pow(10, lowerv_log10);
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f7ff f802 	bl	8000534 <__aeabi_i2d>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	ec43 2b11 	vmov	d1, r2, r3
 8001538:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8001558 <find_lower_log10_limit+0x68>
 800153c:	f005 fd5e 	bl	8006ffc <pow>
 8001540:	ec53 2b10 	vmov	r2, r3, d0
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fb0e 	bl	8000b68 <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	00000000 	.word	0x00000000
 800155c:	40240000 	.word	0x40240000

08001560 <find_upper_log10_limit>:

int find_upper_log10_limit(int current_w) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    if (current_w == 0) return 1;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <find_upper_log10_limit+0x12>
 800156e:	2301      	movs	r3, #1
 8001570:	e025      	b.n	80015be <find_upper_log10_limit+0x5e>
    int ulog10_w = (int)log10(current_w);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7fe ffde 	bl	8000534 <__aeabi_i2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	ec43 2b10 	vmov	d0, r2, r3
 8001580:	f005 fcfe 	bl	8006f80 <log10>
 8001584:	ec53 2b10 	vmov	r2, r3, d0
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff faec 	bl	8000b68 <__aeabi_d2iz>
 8001590:	4603      	mov	r3, r0
 8001592:	60fb      	str	r3, [r7, #12]
    int upperw_log10 = ulog10_w + 1;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	3301      	adds	r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
    return (int)pow(10, upperw_log10);
 800159a:	68b8      	ldr	r0, [r7, #8]
 800159c:	f7fe ffca 	bl	8000534 <__aeabi_i2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	ec43 2b11 	vmov	d1, r2, r3
 80015a8:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 80015c8 <find_upper_log10_limit+0x68>
 80015ac:	f005 fd26 	bl	8006ffc <pow>
 80015b0:	ec53 2b10 	vmov	r2, r3, d0
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fad6 	bl	8000b68 <__aeabi_d2iz>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	00000000 	.word	0x00000000
 80015cc:	40240000 	.word	0x40240000

080015d0 <map_to_color>:

uint16_t map_to_color(float value) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < 0) value = 0;
 80015da:	edd7 7a01 	vldr	s15, [r7, #4]
 80015de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d502      	bpl.n	80015ee <map_to_color+0x1e>
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
    if (value > 1) value = 1;
 80015ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fe:	dd02      	ble.n	8001606 <map_to_color+0x36>
 8001600:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001604:	607b      	str	r3, [r7, #4]
    uint16_t green = (uint16_t)((1.0 - value) * 0x07E0);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7fe ffa6 	bl	8000558 <__aeabi_f2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	f04f 0000 	mov.w	r0, #0
 8001614:	4913      	ldr	r1, [pc, #76]	@ (8001664 <map_to_color+0x94>)
 8001616:	f7fe fe3f 	bl	8000298 <__aeabi_dsub>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <map_to_color+0x98>)
 8001628:	f7fe ffee 	bl	8000608 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fac0 	bl	8000bb8 <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	81fb      	strh	r3, [r7, #14]
    uint16_t white = (uint16_t)(value * 0xFFFF);
 800163c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001640:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800166c <map_to_color+0x9c>
 8001644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800164c:	ee17 3a90 	vmov	r3, s15
 8001650:	81bb      	strh	r3, [r7, #12]
    uint16_t color = green | white;
 8001652:	89fa      	ldrh	r2, [r7, #14]
 8001654:	89bb      	ldrh	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	817b      	strh	r3, [r7, #10]
    return color;
 800165a:	897b      	ldrh	r3, [r7, #10]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	3ff00000 	.word	0x3ff00000
 8001668:	409f8000 	.word	0x409f8000
 800166c:	477fff00 	.word	0x477fff00

08001670 <draw_scaled_pixel>:

void draw_scaled_pixel(int x, int y) {
 8001670:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001674:	b0a4      	sub	sp, #144	@ 0x90
 8001676:	af04      	add	r7, sp, #16
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
    // Determine the logarithm base 10 of x and y
    double log_x = (x > 0) ? log10(x) : 1.0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	dd0d      	ble.n	800169e <draw_scaled_pixel+0x2e>
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7fe ff56 	bl	8000534 <__aeabi_i2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b10 	vmov	d0, r2, r3
 8001690:	f005 fc76 	bl	8006f80 <log10>
 8001694:	eeb0 7a40 	vmov.f32	s14, s0
 8001698:	eef0 7a60 	vmov.f32	s15, s1
 800169c:	e001      	b.n	80016a2 <draw_scaled_pixel+0x32>
 800169e:	ed9f 7bac 	vldr	d7, [pc, #688]	@ 8001950 <draw_scaled_pixel+0x2e0>
 80016a2:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68
    double log_y = (y > 0) ? log10(y) : 1.0;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	dd0d      	ble.n	80016c8 <draw_scaled_pixel+0x58>
 80016ac:	6838      	ldr	r0, [r7, #0]
 80016ae:	f7fe ff41 	bl	8000534 <__aeabi_i2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	ec43 2b10 	vmov	d0, r2, r3
 80016ba:	f005 fc61 	bl	8006f80 <log10>
 80016be:	eeb0 7a40 	vmov.f32	s14, s0
 80016c2:	eef0 7a60 	vmov.f32	s15, s1
 80016c6:	e001      	b.n	80016cc <draw_scaled_pixel+0x5c>
 80016c8:	ed9f 7ba1 	vldr	d7, [pc, #644]	@ 8001950 <draw_scaled_pixel+0x2e0>
 80016cc:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60

    // Determine the maximum x and y values using the current values
    int x_min = find_lower_log10_limit(x);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff0d 	bl	80014f0 <find_lower_log10_limit>
 80016d6:	67f8      	str	r0, [r7, #124]	@ 0x7c
    int x_max = find_upper_log10_limit(x);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff41 	bl	8001560 <find_upper_log10_limit>
 80016de:	67b8      	str	r0, [r7, #120]	@ 0x78
    int y_min = find_lower_log10_limit(y);
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f7ff ff05 	bl	80014f0 <find_lower_log10_limit>
 80016e6:	6778      	str	r0, [r7, #116]	@ 0x74
    int y_max = find_upper_log10_limit(y);
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f7ff ff39 	bl	8001560 <find_upper_log10_limit>
 80016ee:	65f8      	str	r0, [r7, #92]	@ 0x5c
	// Calculate the range of the x and y data
    int x_range = x_max ;// - x_min;
 80016f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    int y_range = y_max ;// - x_min;
 80016f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016f6:	657b      	str	r3, [r7, #84]	@ 0x54
    // Update int_log_x and int_log_y for display purposes
    int_log_x = (int)floor(log_x);
 80016f8:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 80016fc:	f005 fe60 	bl	80073c0 <floor>
 8001700:	ec53 2b10 	vmov	r2, r3, d0
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff fa2e 	bl	8000b68 <__aeabi_d2iz>
 800170c:	4603      	mov	r3, r0
 800170e:	4a94      	ldr	r2, [pc, #592]	@ (8001960 <draw_scaled_pixel+0x2f0>)
 8001710:	6013      	str	r3, [r2, #0]
    int_log_y = (int)floor(log_y);
 8001712:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001716:	f005 fe53 	bl	80073c0 <floor>
 800171a:	ec53 2b10 	vmov	r2, r3, d0
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff fa21 	bl	8000b68 <__aeabi_d2iz>
 8001726:	4603      	mov	r3, r0
 8001728:	4a8e      	ldr	r2, [pc, #568]	@ (8001964 <draw_scaled_pixel+0x2f4>)
 800172a:	6013      	str	r3, [r2, #0]

    // Check if the integer parts of the log values have changed, indicating a factor of 10 change
    bool reset_scale = false;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

    // Check for a factor of 10 change
    if ( fabs(int_log_x - int_last_log_x ) >= 1) {
 8001732:	4b8b      	ldr	r3, [pc, #556]	@ (8001960 <draw_scaled_pixel+0x2f0>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b8c      	ldr	r3, [pc, #560]	@ (8001968 <draw_scaled_pixel+0x2f8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fef9 	bl	8000534 <__aeabi_i2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4690      	mov	r8, r2
 8001748:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b86      	ldr	r3, [pc, #536]	@ (800196c <draw_scaled_pixel+0x2fc>)
 8001752:	4640      	mov	r0, r8
 8001754:	4649      	mov	r1, r9
 8001756:	f7ff f9dd 	bl	8000b14 <__aeabi_dcmpge>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01b      	beq.n	8001798 <draw_scaled_pixel+0x128>
        reset_scale = true;
 8001760:	2301      	movs	r3, #1
 8001762:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        printf("scale x %d, previously %d\n\r", int_log_x, int_last_log_x);
 8001766:	4b7e      	ldr	r3, [pc, #504]	@ (8001960 <draw_scaled_pixel+0x2f0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a7f      	ldr	r2, [pc, #508]	@ (8001968 <draw_scaled_pixel+0x2f8>)
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	487f      	ldr	r0, [pc, #508]	@ (8001970 <draw_scaled_pixel+0x300>)
 8001772:	f003 fb09 	bl	8004d88 <iprintf>
        x_min = find_lower_log10_limit(x);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff feba 	bl	80014f0 <find_lower_log10_limit>
 800177c:	67f8      	str	r0, [r7, #124]	@ 0x7c
        x_max = find_upper_log10_limit(x);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff feee 	bl	8001560 <find_upper_log10_limit>
 8001784:	67b8      	str	r0, [r7, #120]	@ 0x78
        last_log_x = log_x;
 8001786:	497b      	ldr	r1, [pc, #492]	@ (8001974 <draw_scaled_pixel+0x304>)
 8001788:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800178c:	e9c1 2300 	strd	r2, r3, [r1]
        int_last_log_x = int_log_x;
 8001790:	4b73      	ldr	r3, [pc, #460]	@ (8001960 <draw_scaled_pixel+0x2f0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a74      	ldr	r2, [pc, #464]	@ (8001968 <draw_scaled_pixel+0x2f8>)
 8001796:	6013      	str	r3, [r2, #0]
    }

    if ( fabs(int_log_y - int_last_log_y ) >= 1) {
 8001798:	4b72      	ldr	r3, [pc, #456]	@ (8001964 <draw_scaled_pixel+0x2f4>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b76      	ldr	r3, [pc, #472]	@ (8001978 <draw_scaled_pixel+0x308>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fec6 	bl	8000534 <__aeabi_i2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4614      	mov	r4, r2
 80017ae:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b6d      	ldr	r3, [pc, #436]	@ (800196c <draw_scaled_pixel+0x2fc>)
 80017b8:	4620      	mov	r0, r4
 80017ba:	4629      	mov	r1, r5
 80017bc:	f7ff f9aa 	bl	8000b14 <__aeabi_dcmpge>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d01b      	beq.n	80017fe <draw_scaled_pixel+0x18e>
        reset_scale = true;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        printf("scale y %d, previously %d \n\r", int_log_y, int_last_log_y);
 80017cc:	4b65      	ldr	r3, [pc, #404]	@ (8001964 <draw_scaled_pixel+0x2f4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a69      	ldr	r2, [pc, #420]	@ (8001978 <draw_scaled_pixel+0x308>)
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4869      	ldr	r0, [pc, #420]	@ (800197c <draw_scaled_pixel+0x30c>)
 80017d8:	f003 fad6 	bl	8004d88 <iprintf>
        y_min = find_lower_log10_limit(y);
 80017dc:	6838      	ldr	r0, [r7, #0]
 80017de:	f7ff fe87 	bl	80014f0 <find_lower_log10_limit>
 80017e2:	6778      	str	r0, [r7, #116]	@ 0x74
        y_max = find_upper_log10_limit(y);
 80017e4:	6838      	ldr	r0, [r7, #0]
 80017e6:	f7ff febb 	bl	8001560 <find_upper_log10_limit>
 80017ea:	65f8      	str	r0, [r7, #92]	@ 0x5c
        last_log_y = log_y;
 80017ec:	4964      	ldr	r1, [pc, #400]	@ (8001980 <draw_scaled_pixel+0x310>)
 80017ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80017f2:	e9c1 2300 	strd	r2, r3, [r1]
        int_last_log_y = int_log_y;
 80017f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001964 <draw_scaled_pixel+0x2f4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001978 <draw_scaled_pixel+0x308>)
 80017fc:	6013      	str	r3, [r2, #0]
    }

    if (reset_scale) {
 80017fe:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <draw_scaled_pixel+0x1a4>
        ST7735_FillScreen(ST7735_BLACK);
 8001806:	2000      	movs	r0, #0
 8001808:	f000 fc84 	bl	8002114 <ST7735_FillScreen>
        draw_axis();
 800180c:	f7ff fdc6 	bl	800139c <draw_axis>
        draw_axis_text();
 8001810:	f7ff fdee 	bl	80013f0 <draw_axis_text>
    }

    // Calculate the display coordinates
	// warning the fonts are rotated differently to the orientation of the screen and the position of the 0,0
    // therefore the y looks wrong..
    int display_x = (((x - x_min) * (ST7735_WIDTH -1 )) / x_range);
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001818:	1ad2      	subs	r2, r2, r3
 800181a:	4613      	mov	r3, r2
 800181c:	01db      	lsls	r3, r3, #7
 800181e:	1a9a      	subs	r2, r3, r2
 8001820:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001822:	fb92 f3f3 	sdiv	r3, r2, r3
 8001826:	653b      	str	r3, [r7, #80]	@ 0x50
    int display_y = ST7735_HEIGHT - (((y - y_min) * (ST7735_HEIGHT -1 )) / y_range);
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800182c:	1ad2      	subs	r2, r2, r3
 800182e:	4613      	mov	r3, r2
 8001830:	01db      	lsls	r3, r3, #7
 8001832:	1a9a      	subs	r2, r3, r2
 8001834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001836:	fb92 f3f3 	sdiv	r3, r2, r3
 800183a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800183e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Determine color based on logarithm of x
    double max_log_x = (x_max > 0) ? log10(x_max) : 0.0;
 8001840:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001842:	2b00      	cmp	r3, #0
 8001844:	dd0d      	ble.n	8001862 <draw_scaled_pixel+0x1f2>
 8001846:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001848:	f7fe fe74 	bl	8000534 <__aeabi_i2d>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	ec43 2b10 	vmov	d0, r2, r3
 8001854:	f005 fb94 	bl	8006f80 <log10>
 8001858:	eeb0 7a40 	vmov.f32	s14, s0
 800185c:	eef0 7a60 	vmov.f32	s15, s1
 8001860:	e001      	b.n	8001866 <draw_scaled_pixel+0x1f6>
 8001862:	ed9f 7b3d 	vldr	d7, [pc, #244]	@ 8001958 <draw_scaled_pixel+0x2e8>
 8001866:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    double normalized_log_x = (x_max > 0) ? log_x / max_log_x : 0.0;
 800186a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800186c:	2b00      	cmp	r3, #0
 800186e:	dd08      	ble.n	8001882 <draw_scaled_pixel+0x212>
 8001870:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001874:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001878:	f7fe fff0 	bl	800085c <__aeabi_ddiv>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	e003      	b.n	800188a <draw_scaled_pixel+0x21a>
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    uint16_t color = map_to_color((float)normalized_log_x);
 800188e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001892:	f7ff f9b1 	bl	8000bf8 <__aeabi_d2f>
 8001896:	4603      	mov	r3, r0
 8001898:	ee00 3a10 	vmov	s0, r3
 800189c:	f7ff fe98 	bl	80015d0 <map_to_color>
 80018a0:	4603      	mov	r3, r0
 80018a2:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // debug
    printf("x,y: (%d, %d) | log: (%d, %d) | display: (%d,%d)\n\r", x, y, int_log_x, int_log_y, display_x, display_y);
 80018a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001960 <draw_scaled_pixel+0x2f0>)
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001964 <draw_scaled_pixel+0x2f4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018ae:	9202      	str	r2, [sp, #8]
 80018b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80018b2:	9201      	str	r2, [sp, #4]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	460b      	mov	r3, r1
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4831      	ldr	r0, [pc, #196]	@ (8001984 <draw_scaled_pixel+0x314>)
 80018be:	f003 fa63 	bl	8004d88 <iprintf>

    // info box
    ST7735_DrawPixel(display_x, display_y, color);
 80018c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018c8:	b291      	uxth	r1, r2
 80018ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fab7 	bl	8001e40 <ST7735_DrawPixel>
    char count_x_string[16];
    snprintf(count_x_string, sizeof(count_x_string), "x %d", x);
 80018d2:	f107 001c 	add.w	r0, r7, #28
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001988 <draw_scaled_pixel+0x318>)
 80018da:	2110      	movs	r1, #16
 80018dc:	f003 fac4 	bl	8004e68 <sniprintf>
    int draw_at_point_for_x = 30;
 80018e0:	231e      	movs	r3, #30
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
    ST7735_WriteString(20, draw_at_point_for_x, count_x_string, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e6:	b299      	uxth	r1, r3
 80018e8:	4b28      	ldr	r3, [pc, #160]	@ (800198c <draw_scaled_pixel+0x31c>)
 80018ea:	f107 001c 	add.w	r0, r7, #28
 80018ee:	2200      	movs	r2, #0
 80018f0:	9202      	str	r2, [sp, #8]
 80018f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f6:	9201      	str	r2, [sp, #4]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	9200      	str	r2, [sp, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4602      	mov	r2, r0
 8001900:	2014      	movs	r0, #20
 8001902:	f000 fb48 	bl	8001f96 <ST7735_WriteString>

    char count_y_string[16];
    snprintf(count_y_string, sizeof(count_y_string), "y %d", y);
 8001906:	f107 000c 	add.w	r0, r7, #12
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	4a20      	ldr	r2, [pc, #128]	@ (8001990 <draw_scaled_pixel+0x320>)
 800190e:	2110      	movs	r1, #16
 8001910:	f003 faaa 	bl	8004e68 <sniprintf>
    int draw_at_point_for_y = draw_at_point_for_x + FONT_HEIGHT + 1;
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <draw_scaled_pixel+0x324>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800191a:	4413      	add	r3, r2
 800191c:	3301      	adds	r3, #1
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ST7735_WriteString(20, draw_at_point_for_y, count_y_string, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001922:	b299      	uxth	r1, r3
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <draw_scaled_pixel+0x31c>)
 8001926:	f107 000c 	add.w	r0, r7, #12
 800192a:	2200      	movs	r2, #0
 800192c:	9202      	str	r2, [sp, #8]
 800192e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001932:	9201      	str	r2, [sp, #4]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	9200      	str	r2, [sp, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4602      	mov	r2, r0
 800193c:	2014      	movs	r0, #20
 800193e:	f000 fb2a 	bl	8001f96 <ST7735_WriteString>

}
 8001942:	bf00      	nop
 8001944:	3780      	adds	r7, #128	@ 0x80
 8001946:	46bd      	mov	sp, r7
 8001948:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800194c:	f3af 8000 	nop.w
 8001950:	00000000 	.word	0x00000000
 8001954:	3ff00000 	.word	0x3ff00000
	...
 8001960:	20000020 	.word	0x20000020
 8001964:	20000028 	.word	0x20000028
 8001968:	20000024 	.word	0x20000024
 800196c:	3ff00000 	.word	0x3ff00000
 8001970:	080085ec 	.word	0x080085ec
 8001974:	20000010 	.word	0x20000010
 8001978:	2000002c 	.word	0x2000002c
 800197c:	08008608 	.word	0x08008608
 8001980:	20000018 	.word	0x20000018
 8001984:	08008628 	.word	0x08008628
 8001988:	0800865c 	.word	0x0800865c
 800198c:	20000000 	.word	0x20000000
 8001990:	08008664 	.word	0x08008664
 8001994:	2000000c 	.word	0x2000000c

08001998 <simpleSieve>:
			printf("%d \n\r", i);
		}
	}
}

void simpleSieve(int limit, bool prime[]) {
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
    for (int p = 2; p * p <= limit; p++) {
 80019a2:	2302      	movs	r3, #2
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e01a      	b.n	80019de <simpleSieve+0x46>
        if (prime[p]) {
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d011      	beq.n	80019d8 <simpleSieve+0x40>
            for (int i = p * p; i <= limit; i += p)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	fb03 f303 	mul.w	r3, r3, r3
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	e008      	b.n	80019d0 <simpleSieve+0x38>
                prime[i] = false;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
            for (int i = p * p; i <= limit; i += p)
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4413      	add	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	ddf2      	ble.n	80019be <simpleSieve+0x26>
    for (int p = 2; p * p <= limit; p++) {
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3301      	adds	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	fb03 f303 	mul.w	r3, r3, r3
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dade      	bge.n	80019a8 <simpleSieve+0x10>
        }
    }
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <segmentedSieve>:

// Segmented Sieve Algorithm
void segmentedSieve(int n) {
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b090      	sub	sp, #64	@ 0x40
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    int segmentSize = 100000; // Segment size
 8001a00:	4b78      	ldr	r3, [pc, #480]	@ (8001be4 <segmentedSieve+0x1ec>)
 8001a02:	61fb      	str	r3, [r7, #28]
    int sqrtN = (int)sqrt(n);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7fe fd95 	bl	8000534 <__aeabi_i2d>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	ec43 2b10 	vmov	d0, r2, r3
 8001a12:	f005 fb63 	bl	80070dc <sqrt>
 8001a16:	ec53 2b10 	vmov	r2, r3, d0
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f8a3 	bl	8000b68 <__aeabi_d2iz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	61bb      	str	r3, [r7, #24]

    // Array to store primes up to sqrtN
    bool* prime = malloc((sqrtN + 1) * sizeof(bool));
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 fbd4 	bl	80041d8 <malloc>
 8001a30:	4603      	mov	r3, r0
 8001a32:	617b      	str	r3, [r7, #20]
    for (int i = 0; i <= sqrtN; i++) prime[i] = true;
 8001a34:	2300      	movs	r3, #0
 8001a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a38:	e007      	b.n	8001a4a <segmentedSieve+0x52>
 8001a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4413      	add	r3, r2
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a46:	3301      	adds	r3, #1
 8001a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	ddf3      	ble.n	8001a3a <segmentedSieve+0x42>
    simpleSieve(sqrtN, prime);
 8001a52:	6979      	ldr	r1, [r7, #20]
 8001a54:	69b8      	ldr	r0, [r7, #24]
 8001a56:	f7ff ff9f 	bl	8001998 <simpleSieve>

    // Array to mark non-primes in the current segment
    bool* isPrime = malloc(segmentSize * sizeof(bool));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 fbbb 	bl	80041d8 <malloc>
 8001a62:	4603      	mov	r3, r0
 8001a64:	613b      	str	r3, [r7, #16]

    // Process each segment
    for (int low = 1; low <= n; low += segmentSize) {
 8001a66:	2301      	movs	r3, #1
 8001a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a6a:	e0a5      	b.n	8001bb8 <segmentedSieve+0x1c0>
        int high = low + segmentSize;
 8001a6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4413      	add	r3, r2
 8001a72:	637b      	str	r3, [r7, #52]	@ 0x34
        if (high > n + 1) high = n + 1;  // Adjust high for the last segment
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3301      	adds	r3, #1
 8001a78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dd02      	ble.n	8001a84 <segmentedSieve+0x8c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3301      	adds	r3, #1
 8001a82:	637b      	str	r3, [r7, #52]	@ 0x34

        // Initialize the segment as all primes
        for (int i = 0; i < segmentSize && low + i <= n; i++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a88:	e007      	b.n	8001a9a <segmentedSieve+0xa2>
            isPrime[i] = true;
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < segmentSize && low + i <= n; i++) {
 8001a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a96:	3301      	adds	r3, #1
 8001a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	da05      	bge.n	8001aae <segmentedSieve+0xb6>
 8001aa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa6:	4413      	add	r3, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	daed      	bge.n	8001a8a <segmentedSieve+0x92>
        }

        // Mark non-primes in the current segment
        for (int i = 2; i <= sqrtN; i++) {
 8001aae:	2302      	movs	r3, #2
 8001ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ab2:	e04a      	b.n	8001b4a <segmentedSieve+0x152>
            if (prime[i]) {
 8001ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4413      	add	r3, r2
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d041      	beq.n	8001b44 <segmentedSieve+0x14c>
                // Find the minimum number in the current segment that is a multiple of i
                int loLim = fmax(i * i, (low + i - 1) / i * i);
 8001ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac2:	fb03 f303 	mul.w	r3, r3, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fd34 	bl	8000534 <__aeabi_i2d>
 8001acc:	4604      	mov	r4, r0
 8001ace:	460d      	mov	r5, r1
 8001ad0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	4413      	add	r3, r2
 8001ad6:	1e5a      	subs	r2, r3, #1
 8001ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ada:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd25 	bl	8000534 <__aeabi_i2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	ec43 2b11 	vmov	d1, r2, r3
 8001af2:	ec45 4b10 	vmov	d0, r4, r5
 8001af6:	f005 fb33 	bl	8007160 <fmax>
 8001afa:	ec53 2b10 	vmov	r2, r3, d0
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7ff f831 	bl	8000b68 <__aeabi_d2iz>
 8001b06:	4603      	mov	r3, r0
 8001b08:	60fb      	str	r3, [r7, #12]
                if (loLim >= high) continue;
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	da17      	bge.n	8001b42 <segmentedSieve+0x14a>
                for (int j = loLim; j < high; j += i) {
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b16:	e00f      	b.n	8001b38 <segmentedSieve+0x140>
                    if (j >= low) {
 8001b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	db07      	blt.n	8001b30 <segmentedSieve+0x138>
                        isPrime[j - low] = false;
 8001b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
                for (int j = loLim; j < high; j += i) {
 8001b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b34:	4413      	add	r3, r2
 8001b36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbeb      	blt.n	8001b18 <segmentedSieve+0x120>
 8001b40:	e000      	b.n	8001b44 <segmentedSieve+0x14c>
                if (loLim >= high) continue;
 8001b42:	bf00      	nop
        for (int i = 2; i <= sqrtN; i++) {
 8001b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b46:	3301      	adds	r3, #1
 8001b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	ddb0      	ble.n	8001ab4 <segmentedSieve+0xbc>
                }
            }
        }

        // Count primes in the current segment
        int segmentCount = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int i = 0; i < segmentSize && low + i <= n; i++) {
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
 8001b5a:	e015      	b.n	8001b88 <segmentedSieve+0x190>
            if (isPrime[i] && (low + i) > 1) {  // Avoid counting 1 which is not a prime
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4413      	add	r3, r2
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00c      	beq.n	8001b82 <segmentedSieve+0x18a>
 8001b68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	dd07      	ble.n	8001b82 <segmentedSieve+0x18a>
                segmentCount++;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	3301      	adds	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
                count++;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <segmentedSieve+0x1f0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001be8 <segmentedSieve+0x1f0>)
 8001b80:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < segmentSize && low + i <= n; i++) {
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	3301      	adds	r3, #1
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	6a3a      	ldr	r2, [r7, #32]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	da05      	bge.n	8001b9c <segmentedSieve+0x1a4>
 8001b90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	4413      	add	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dadf      	bge.n	8001b5c <segmentedSieve+0x164>
            }
        }

        // Print the segment range and total primes so far
        //printf("%d,%d\n\r", high - 1, count);
        draw_axis_text();
 8001b9c:	f7ff fc28 	bl	80013f0 <draw_axis_text>
        draw_scaled_pixel(high - 1, count);
 8001ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	4a10      	ldr	r2, [pc, #64]	@ (8001be8 <segmentedSieve+0x1f0>)
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fd60 	bl	8001670 <draw_scaled_pixel>
    for (int low = 1; low <= n; low += segmentSize) {
 8001bb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f77f af55 	ble.w	8001a6c <segmentedSieve+0x74>
    }

    free(prime);
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f002 fb10 	bl	80041e8 <free>
    free(isPrime);
 8001bc8:	6938      	ldr	r0, [r7, #16]
 8001bca:	f002 fb0d 	bl	80041e8 <free>
    printf("Total number of primes less than %d: %d\n\r", n, count);
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <segmentedSieve+0x1f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4805      	ldr	r0, [pc, #20]	@ (8001bec <segmentedSieve+0x1f4>)
 8001bd8:	f003 f8d6 	bl	8004d88 <iprintf>
}
 8001bdc:	bf00      	nop
 8001bde:	3740      	adds	r7, #64	@ 0x40
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bdb0      	pop	{r4, r5, r7, pc}
 8001be4:	000186a0 	.word	0x000186a0
 8001be8:	200002d8 	.word	0x200002d8
 8001bec:	0800868c 	.word	0x0800868c

08001bf0 <π>:

void π(int n) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	uptoval = n;
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c34 <π+0x44>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
    printf("\n\rup to %d\n\r", uptoval);
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <π+0x44>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4619      	mov	r1, r3
 8001c04:	480c      	ldr	r0, [pc, #48]	@ (8001c38 <π+0x48>)
 8001c06:	f003 f8bf 	bl	8004d88 <iprintf>

    // reset TFT
    ST7735_Init();
 8001c0a:	f000 f8ff 	bl	8001e0c <ST7735_Init>
    ST7735_FillScreen(ST7735_BLACK);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 fa80 	bl	8002114 <ST7735_FillScreen>
    draw_axis();
 8001c14:	f7ff fbc2 	bl	800139c <draw_axis>
    HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c1c:	f000 fce8 	bl	80025f0 <HAL_Delay>

    // call the prime calculator
    segmentedSieve(uptoval);
 8001c20:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <π+0x44>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fee7 	bl	80019f8 <segmentedSieve>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200002d4 	.word	0x200002d4
 8001c38:	080086b8 	.word	0x080086b8

08001c3c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2140      	movs	r1, #64	@ 0x40
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <ST7735_Select+0x14>)
 8001c46:	f000 ff61 	bl	8002b0c <HAL_GPIO_WritePin>
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40020400 	.word	0x40020400

08001c54 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2140      	movs	r1, #64	@ 0x40
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <ST7735_Unselect+0x14>)
 8001c5e:	f000 ff55 	bl	8002b0c <HAL_GPIO_WritePin>
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40020400 	.word	0x40020400

08001c6c <ST7735_Reset>:

static void ST7735_Reset() {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2180      	movs	r1, #128	@ 0x80
 8001c74:	4806      	ldr	r0, [pc, #24]	@ (8001c90 <ST7735_Reset+0x24>)
 8001c76:	f000 ff49 	bl	8002b0c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001c7a:	2005      	movs	r0, #5
 8001c7c:	f000 fcb8 	bl	80025f0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	2180      	movs	r1, #128	@ 0x80
 8001c84:	4802      	ldr	r0, [pc, #8]	@ (8001c90 <ST7735_Reset+0x24>)
 8001c86:	f000 ff41 	bl	8002b0c <HAL_GPIO_WritePin>
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40020800 	.word	0x40020800

08001c94 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ca4:	4806      	ldr	r0, [pc, #24]	@ (8001cc0 <ST7735_WriteCommand+0x2c>)
 8001ca6:	f000 ff31 	bl	8002b0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001caa:	1df9      	adds	r1, r7, #7
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4804      	ldr	r0, [pc, #16]	@ (8001cc4 <ST7735_WriteCommand+0x30>)
 8001cb4:	f001 fc65 	bl	8003582 <HAL_SPI_Transmit>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	20000234 	.word	0x20000234

08001cc8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cd8:	4807      	ldr	r0, [pc, #28]	@ (8001cf8 <ST7735_WriteData+0x30>)
 8001cda:	f000 ff17 	bl	8002b0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4804      	ldr	r0, [pc, #16]	@ (8001cfc <ST7735_WriteData+0x34>)
 8001cea:	f001 fc4a 	bl	8003582 <HAL_SPI_Transmit>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	20000234 	.word	0x20000234

08001d00 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001d12:	e034      	b.n	8001d7e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ffb7 	bl	8001c94 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001d30:	7abb      	ldrb	r3, [r7, #10]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d38:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001d3a:	7abb      	ldrb	r3, [r7, #10]
 8001d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d40:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001d42:	7abb      	ldrb	r3, [r7, #10]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffbb 	bl	8001cc8 <ST7735_WriteData>
            addr += numArgs;
 8001d52:	7abb      	ldrb	r3, [r7, #10]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001d5a:	89bb      	ldrh	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001d6a:	89bb      	ldrh	r3, [r7, #12]
 8001d6c:	2bff      	cmp	r3, #255	@ 0xff
 8001d6e:	d102      	bne.n	8001d76 <ST7735_ExecuteCommandList+0x76>
 8001d70:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d74:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001d76:	89bb      	ldrh	r3, [r7, #12]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fc39 	bl	80025f0 <HAL_Delay>
    while(numCommands--) {
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	73fa      	strb	r2, [r7, #15]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1c5      	bne.n	8001d14 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001d92:	b590      	push	{r4, r7, lr}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4604      	mov	r4, r0
 8001d9a:	4608      	mov	r0, r1
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4623      	mov	r3, r4
 8001da2:	71fb      	strb	r3, [r7, #7]
 8001da4:	4603      	mov	r3, r0
 8001da6:	71bb      	strb	r3, [r7, #6]
 8001da8:	460b      	mov	r3, r1
 8001daa:	717b      	strb	r3, [r7, #5]
 8001dac:	4613      	mov	r3, r2
 8001dae:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001db0:	202a      	movs	r0, #42	@ 0x2a
 8001db2:	f7ff ff6f 	bl	8001c94 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001db6:	2300      	movs	r3, #0
 8001db8:	733b      	strb	r3, [r7, #12]
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	737b      	strb	r3, [r7, #13]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73bb      	strb	r3, [r7, #14]
 8001dc6:	797b      	ldrb	r3, [r7, #5]
 8001dc8:	3302      	adds	r3, #2
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff77 	bl	8001cc8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001dda:	202b      	movs	r0, #43	@ 0x2b
 8001ddc:	f7ff ff5a 	bl	8001c94 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001de0:	79bb      	ldrb	r3, [r7, #6]
 8001de2:	3303      	adds	r3, #3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001de8:	793b      	ldrb	r3, [r7, #4]
 8001dea:	3303      	adds	r3, #3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	2104      	movs	r1, #4
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff66 	bl	8001cc8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001dfc:	202c      	movs	r0, #44	@ 0x2c
 8001dfe:	f7ff ff49 	bl	8001c94 <ST7735_WriteCommand>
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd90      	pop	{r4, r7, pc}
	...

08001e0c <ST7735_Init>:

void ST7735_Init() {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001e10:	f7ff ff14 	bl	8001c3c <ST7735_Select>
    ST7735_Reset();
 8001e14:	f7ff ff2a 	bl	8001c6c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001e18:	4806      	ldr	r0, [pc, #24]	@ (8001e34 <ST7735_Init+0x28>)
 8001e1a:	f7ff ff71 	bl	8001d00 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <ST7735_Init+0x2c>)
 8001e20:	f7ff ff6e 	bl	8001d00 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001e24:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <ST7735_Init+0x30>)
 8001e26:	f7ff ff6b 	bl	8001d00 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001e2a:	f7ff ff13 	bl	8001c54 <ST7735_Unselect>
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	08008e34 	.word	0x08008e34
 8001e38:	08008e70 	.word	0x08008e70
 8001e3c:	08008e80 	.word	0x08008e80

08001e40 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	80bb      	strh	r3, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e56:	d823      	bhi.n	8001ea0 <ST7735_DrawPixel+0x60>
 8001e58:	88bb      	ldrh	r3, [r7, #4]
 8001e5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e5c:	d820      	bhi.n	8001ea0 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8001e5e:	f7ff feed 	bl	8001c3c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	b2d8      	uxtb	r0, r3
 8001e66:	88bb      	ldrh	r3, [r7, #4]
 8001e68:	b2d9      	uxtb	r1, r3
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	88bb      	ldrh	r3, [r7, #4]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f7ff ff8a 	bl	8001d92 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	733b      	strb	r3, [r7, #12]
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	2102      	movs	r1, #2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff17 	bl	8001cc8 <ST7735_WriteData>

    ST7735_Unselect();
 8001e9a:	f7ff fedb 	bl	8001c54 <ST7735_Unselect>
 8001e9e:	e000      	b.n	8001ea2 <ST7735_DrawPixel+0x62>
        return;
 8001ea0:	bf00      	nop
}
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	b590      	push	{r4, r7, lr}
 8001eac:	b089      	sub	sp, #36	@ 0x24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	80bb      	strh	r3, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	b2d8      	uxtb	r0, r3
 8001ec2:	88bb      	ldrh	r3, [r7, #4]
 8001ec4:	b2d9      	uxtb	r1, r3
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001ece:	4413      	add	r3, r2
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b2dc      	uxtb	r4, r3
 8001ed6:	88bb      	ldrh	r3, [r7, #4]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4622      	mov	r2, r4
 8001ee8:	f7ff ff53 	bl	8001d92 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	e043      	b.n	8001f7a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001ef2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	3b20      	subs	r3, #32
 8001ef8:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4619      	mov	r1, r3
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	440b      	add	r3, r1
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	e029      	b.n	8001f68 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00e      	beq.n	8001f42 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001f24:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	743b      	strb	r3, [r7, #16]
 8001f2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	2102      	movs	r1, #2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fec4 	bl	8001cc8 <ST7735_WriteData>
 8001f40:	e00f      	b.n	8001f62 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001f42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	733b      	strb	r3, [r7, #12]
 8001f4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff feb3 	bl	8001cc8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d3cf      	bcc.n	8001f14 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3301      	adds	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f7e:	461a      	mov	r2, r3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d3b5      	bcc.n	8001ef2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	3724      	adds	r7, #36	@ 0x24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f92:	b002      	add	sp, #8
 8001f94:	4770      	bx	lr

08001f96 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001f96:	b082      	sub	sp, #8
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af04      	add	r7, sp, #16
 8001f9e:	603a      	str	r2, [r7, #0]
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80fb      	strh	r3, [r7, #6]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001faa:	f7ff fe47 	bl	8001c3c <ST7735_Select>

    while(*str) {
 8001fae:	e02d      	b.n	800200c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	7d3a      	ldrb	r2, [r7, #20]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fb8:	dd13      	ble.n	8001fe2 <ST7735_WriteString+0x4c>
            x = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001fbe:	7d7b      	ldrb	r3, [r7, #21]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	88bb      	ldrh	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001fc8:	88bb      	ldrh	r3, [r7, #4]
 8001fca:	7d7a      	ldrb	r2, [r7, #21]
 8001fcc:	4413      	add	r3, r2
 8001fce:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fd0:	dc21      	bgt.n	8002016 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d103      	bne.n	8001fe2 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	603b      	str	r3, [r7, #0]
                continue;
 8001fe0:	e014      	b.n	800200c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	88b9      	ldrh	r1, [r7, #4]
 8001fe8:	88f8      	ldrh	r0, [r7, #6]
 8001fea:	8c3b      	ldrh	r3, [r7, #32]
 8001fec:	9302      	str	r3, [sp, #8]
 8001fee:	8bbb      	ldrh	r3, [r7, #28]
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f7ff ff56 	bl	8001ea8 <ST7735_WriteChar>
        x += font.width;
 8001ffc:	7d3b      	ldrb	r3, [r7, #20]
 8001ffe:	461a      	mov	r2, r3
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	4413      	add	r3, r2
 8002004:	80fb      	strh	r3, [r7, #6]
        str++;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1cd      	bne.n	8001fb0 <ST7735_WriteString+0x1a>
 8002014:	e000      	b.n	8002018 <ST7735_WriteString+0x82>
                break;
 8002016:	bf00      	nop
    }

    ST7735_Unselect();
 8002018:	f7ff fe1c 	bl	8001c54 <ST7735_Unselect>
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002026:	b002      	add	sp, #8
 8002028:	4770      	bx	lr
	...

0800202c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	4604      	mov	r4, r0
 8002034:	4608      	mov	r0, r1
 8002036:	4611      	mov	r1, r2
 8002038:	461a      	mov	r2, r3
 800203a:	4623      	mov	r3, r4
 800203c:	80fb      	strh	r3, [r7, #6]
 800203e:	4603      	mov	r3, r0
 8002040:	80bb      	strh	r3, [r7, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	807b      	strh	r3, [r7, #2]
 8002046:	4613      	mov	r3, r2
 8002048:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	2b7f      	cmp	r3, #127	@ 0x7f
 800204e:	d858      	bhi.n	8002102 <ST7735_FillRectangle+0xd6>
 8002050:	88bb      	ldrh	r3, [r7, #4]
 8002052:	2b7f      	cmp	r3, #127	@ 0x7f
 8002054:	d855      	bhi.n	8002102 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002056:	88fa      	ldrh	r2, [r7, #6]
 8002058:	887b      	ldrh	r3, [r7, #2]
 800205a:	4413      	add	r3, r2
 800205c:	2b80      	cmp	r3, #128	@ 0x80
 800205e:	dd03      	ble.n	8002068 <ST7735_FillRectangle+0x3c>
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002066:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002068:	88ba      	ldrh	r2, [r7, #4]
 800206a:	883b      	ldrh	r3, [r7, #0]
 800206c:	4413      	add	r3, r2
 800206e:	2b80      	cmp	r3, #128	@ 0x80
 8002070:	dd03      	ble.n	800207a <ST7735_FillRectangle+0x4e>
 8002072:	88bb      	ldrh	r3, [r7, #4]
 8002074:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002078:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800207a:	f7ff fddf 	bl	8001c3c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	b2d8      	uxtb	r0, r3
 8002082:	88bb      	ldrh	r3, [r7, #4]
 8002084:	b2d9      	uxtb	r1, r3
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	4413      	add	r3, r2
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b2dc      	uxtb	r4, r3
 8002096:	88bb      	ldrh	r3, [r7, #4]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	883b      	ldrh	r3, [r7, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4413      	add	r3, r2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4622      	mov	r2, r4
 80020a8:	f7ff fe73 	bl	8001d92 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80020ac:	8c3b      	ldrh	r3, [r7, #32]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	733b      	strb	r3, [r7, #12]
 80020b6:	8c3b      	ldrh	r3, [r7, #32]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80020bc:	2201      	movs	r2, #1
 80020be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020c2:	4812      	ldr	r0, [pc, #72]	@ (800210c <ST7735_FillRectangle+0xe0>)
 80020c4:	f000 fd22 	bl	8002b0c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80020c8:	883b      	ldrh	r3, [r7, #0]
 80020ca:	80bb      	strh	r3, [r7, #4]
 80020cc:	e013      	b.n	80020f6 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80020ce:	887b      	ldrh	r3, [r7, #2]
 80020d0:	80fb      	strh	r3, [r7, #6]
 80020d2:	e00a      	b.n	80020ea <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80020d4:	f107 010c 	add.w	r1, r7, #12
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
 80020dc:	2202      	movs	r2, #2
 80020de:	480c      	ldr	r0, [pc, #48]	@ (8002110 <ST7735_FillRectangle+0xe4>)
 80020e0:	f001 fa4f 	bl	8003582 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	80fb      	strh	r3, [r7, #6]
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f1      	bne.n	80020d4 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80020f0:	88bb      	ldrh	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	80bb      	strh	r3, [r7, #4]
 80020f6:	88bb      	ldrh	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e8      	bne.n	80020ce <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 80020fc:	f7ff fdaa 	bl	8001c54 <ST7735_Unselect>
 8002100:	e000      	b.n	8002104 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002102:	bf00      	nop
}
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bd90      	pop	{r4, r7, pc}
 800210a:	bf00      	nop
 800210c:	40020000 	.word	0x40020000
 8002110:	20000234 	.word	0x20000234

08002114 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af02      	add	r7, sp, #8
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	2280      	movs	r2, #128	@ 0x80
 8002126:	2100      	movs	r1, #0
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff ff7f 	bl	800202c <ST7735_FillRectangle>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <HAL_MspInit+0x4c>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	4a0f      	ldr	r2, [pc, #60]	@ (8002184 <HAL_MspInit+0x4c>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800214c:	6453      	str	r3, [r2, #68]	@ 0x44
 800214e:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <HAL_MspInit+0x4c>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <HAL_MspInit+0x4c>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4a08      	ldr	r2, [pc, #32]	@ (8002184 <HAL_MspInit+0x4c>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	@ 0x40
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_MspInit+0x4c>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002176:	2007      	movs	r0, #7
 8002178:	f000 fb10 	bl	800279c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800

08002188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	@ 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a19      	ldr	r2, [pc, #100]	@ (800220c <HAL_SPI_MspInit+0x84>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d12b      	bne.n	8002202 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <HAL_SPI_MspInit+0x88>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	4a17      	ldr	r2, [pc, #92]	@ (8002210 <HAL_SPI_MspInit+0x88>)
 80021b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <HAL_SPI_MspInit+0x88>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_SPI_MspInit+0x88>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <HAL_SPI_MspInit+0x88>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <HAL_SPI_MspInit+0x88>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST7735_SPI_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80021e2:	23e0      	movs	r3, #224	@ 0xe0
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021f2:	2305      	movs	r3, #5
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4805      	ldr	r0, [pc, #20]	@ (8002214 <HAL_SPI_MspInit+0x8c>)
 80021fe:	f000 fb01 	bl	8002804 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	@ 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40013000 	.word	0x40013000
 8002210:	40023800 	.word	0x40023800
 8002214:	40020000 	.word	0x40020000

08002218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	@ 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a19      	ldr	r2, [pc, #100]	@ (800229c <HAL_UART_MspInit+0x84>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d12b      	bne.n	8002292 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <HAL_UART_MspInit+0x88>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <HAL_UART_MspInit+0x88>)
 8002244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002248:	6413      	str	r3, [r2, #64]	@ 0x40
 800224a:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_UART_MspInit+0x88>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_UART_MspInit+0x88>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a10      	ldr	r2, [pc, #64]	@ (80022a0 <HAL_UART_MspInit+0x88>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <HAL_UART_MspInit+0x88>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002272:	230c      	movs	r3, #12
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002282:	2307      	movs	r3, #7
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <HAL_UART_MspInit+0x8c>)
 800228e:	f000 fab9 	bl	8002804 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002292:	bf00      	nop
 8002294:	3728      	adds	r7, #40	@ 0x28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40004400 	.word	0x40004400
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020000 	.word	0x40020000

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <NMI_Handler+0x4>

080022b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <MemManage_Handler+0x4>

080022c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <BusFault_Handler+0x4>

080022c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <UsageFault_Handler+0x4>

080022d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fe:	f000 f957 	bl	80025b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}

08002306 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  return 1;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <_kill>:

int _kill(int pid, int sig)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002320:	f002 ff10 	bl	8005144 <__errno>
 8002324:	4603      	mov	r3, r0
 8002326:	2216      	movs	r2, #22
 8002328:	601a      	str	r2, [r3, #0]
  return -1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_exit>:

void _exit (int status)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800233e:	f04f 31ff 	mov.w	r1, #4294967295
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ffe7 	bl	8002316 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <_exit+0x12>

0800234c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e00a      	b.n	8002374 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800235e:	f3af 8000 	nop.w
 8002362:	4601      	mov	r1, r0
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	60ba      	str	r2, [r7, #8]
 800236a:	b2ca      	uxtb	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	dbf0      	blt.n	800235e <_read+0x12>
  }

  return len;
 800237c:	687b      	ldr	r3, [r7, #4]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e009      	b.n	80023ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	60ba      	str	r2, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe ffe3 	bl	800136c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf1      	blt.n	8002398 <_write+0x12>
  }
  return len;
 80023b4:	687b      	ldr	r3, [r7, #4]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_close>:

int _close(int file)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023e6:	605a      	str	r2, [r3, #4]
  return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <_isatty>:

int _isatty(int file)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002430:	4a14      	ldr	r2, [pc, #80]	@ (8002484 <_sbrk+0x5c>)
 8002432:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <_sbrk+0x60>)
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002458:	f002 fe74 	bl	8005144 <__errno>
 800245c:	4603      	mov	r3, r0
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002468:	4b08      	ldr	r3, [pc, #32]	@ (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246e:	4b07      	ldr	r3, [pc, #28]	@ (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	@ (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20020000 	.word	0x20020000
 8002488:	00000400 	.word	0x00000400
 800248c:	200002dc 	.word	0x200002dc
 8002490:	20000430 	.word	0x20000430

08002494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <SystemInit+0x20>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249e:	4a05      	ldr	r2, [pc, #20]	@ (80024b4 <SystemInit+0x20>)
 80024a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024bc:	f7ff ffea 	bl	8002494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c0:	480c      	ldr	r0, [pc, #48]	@ (80024f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024c2:	490d      	ldr	r1, [pc, #52]	@ (80024f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024c4:	4a0d      	ldr	r2, [pc, #52]	@ (80024fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002504 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024e6:	f002 fe33 	bl	8005150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ea:	f7fe fdb5 	bl	8001058 <main>
  bx  lr    
 80024ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80024fc:	08009278 	.word	0x08009278
  ldr r2, =_sbss
 8002500:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002504:	20000430 	.word	0x20000430

08002508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC_IRQHandler>
	...

0800250c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002510:	4b0e      	ldr	r3, [pc, #56]	@ (800254c <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <HAL_Init+0x40>)
 8002516:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800251a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <HAL_Init+0x40>)
 8002522:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002526:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002528:	4b08      	ldr	r3, [pc, #32]	@ (800254c <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a07      	ldr	r2, [pc, #28]	@ (800254c <HAL_Init+0x40>)
 800252e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002532:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002534:	2003      	movs	r0, #3
 8002536:	f000 f931 	bl	800279c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800253a:	2000      	movs	r0, #0
 800253c:	f000 f808 	bl	8002550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002540:	f7ff fdfa 	bl	8002138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023c00 	.word	0x40023c00

08002550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002558:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <HAL_InitTick+0x54>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <HAL_InitTick+0x58>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002566:	fbb3 f3f1 	udiv	r3, r3, r1
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f93b 	bl	80027ea <HAL_SYSTICK_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00e      	b.n	800259c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d80a      	bhi.n	800259a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002584:	2200      	movs	r2, #0
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	f000 f911 	bl	80027b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002590:	4a06      	ldr	r2, [pc, #24]	@ (80025ac <HAL_InitTick+0x5c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000030 	.word	0x20000030
 80025a8:	20000038 	.word	0x20000038
 80025ac:	20000034 	.word	0x20000034

080025b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_IncTick+0x20>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_IncTick+0x24>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <HAL_IncTick+0x24>)
 80025c2:	6013      	str	r3, [r2, #0]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000038 	.word	0x20000038
 80025d4:	200002e0 	.word	0x200002e0

080025d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <HAL_GetTick+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200002e0 	.word	0x200002e0

080025f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f8:	f7ff ffee 	bl	80025d8 <HAL_GetTick>
 80025fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d005      	beq.n	8002616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800260a:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <HAL_Delay+0x44>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002616:	bf00      	nop
 8002618:	f7ff ffde 	bl	80025d8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	429a      	cmp	r2, r3
 8002626:	d8f7      	bhi.n	8002618 <HAL_Delay+0x28>
  {
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000038 	.word	0x20000038

08002638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002660:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266a:	4a04      	ldr	r2, [pc, #16]	@ (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <__NVIC_GetPriorityGrouping+0x18>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0307 	and.w	r3, r3, #7
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	@ (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	@ (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
         );
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	@ 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002768:	d301      	bcc.n	800276e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276a:	2301      	movs	r3, #1
 800276c:	e00f      	b.n	800278e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276e:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <SysTick_Config+0x40>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002776:	210f      	movs	r1, #15
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f7ff ff8e 	bl	800269c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <SysTick_Config+0x40>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002786:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <SysTick_Config+0x40>)
 8002788:	2207      	movs	r2, #7
 800278a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	e000e010 	.word	0xe000e010

0800279c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff47 	bl	8002638 <__NVIC_SetPriorityGrouping>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c4:	f7ff ff5c 	bl	8002680 <__NVIC_GetPriorityGrouping>
 80027c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	6978      	ldr	r0, [r7, #20]
 80027d0:	f7ff ff8e 	bl	80026f0 <NVIC_EncodePriority>
 80027d4:	4602      	mov	r2, r0
 80027d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff5d 	bl	800269c <__NVIC_SetPriority>
}
 80027e2:	bf00      	nop
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffb0 	bl	8002758 <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	@ 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e159      	b.n	8002ad4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	429a      	cmp	r2, r3
 800283a:	f040 8148 	bne.w	8002ace <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d005      	beq.n	8002856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	2b02      	cmp	r3, #2
 8002854:	d130      	bne.n	80028b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d017      	beq.n	80028f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d123      	bne.n	8002948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a2 	beq.w	8002ace <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b57      	ldr	r3, [pc, #348]	@ (8002aec <HAL_GPIO_Init+0x2e8>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	4a56      	ldr	r2, [pc, #344]	@ (8002aec <HAL_GPIO_Init+0x2e8>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002998:	6453      	str	r3, [r2, #68]	@ 0x44
 800299a:	4b54      	ldr	r3, [pc, #336]	@ (8002aec <HAL_GPIO_Init+0x2e8>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a6:	4a52      	ldr	r2, [pc, #328]	@ (8002af0 <HAL_GPIO_Init+0x2ec>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a49      	ldr	r2, [pc, #292]	@ (8002af4 <HAL_GPIO_Init+0x2f0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d019      	beq.n	8002a06 <HAL_GPIO_Init+0x202>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a48      	ldr	r2, [pc, #288]	@ (8002af8 <HAL_GPIO_Init+0x2f4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d013      	beq.n	8002a02 <HAL_GPIO_Init+0x1fe>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a47      	ldr	r2, [pc, #284]	@ (8002afc <HAL_GPIO_Init+0x2f8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00d      	beq.n	80029fe <HAL_GPIO_Init+0x1fa>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a46      	ldr	r2, [pc, #280]	@ (8002b00 <HAL_GPIO_Init+0x2fc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d007      	beq.n	80029fa <HAL_GPIO_Init+0x1f6>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a45      	ldr	r2, [pc, #276]	@ (8002b04 <HAL_GPIO_Init+0x300>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <HAL_GPIO_Init+0x1f2>
 80029f2:	2304      	movs	r3, #4
 80029f4:	e008      	b.n	8002a08 <HAL_GPIO_Init+0x204>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e006      	b.n	8002a08 <HAL_GPIO_Init+0x204>
 80029fa:	2303      	movs	r3, #3
 80029fc:	e004      	b.n	8002a08 <HAL_GPIO_Init+0x204>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e002      	b.n	8002a08 <HAL_GPIO_Init+0x204>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <HAL_GPIO_Init+0x204>
 8002a06:	2300      	movs	r3, #0
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	f002 0203 	and.w	r2, r2, #3
 8002a0e:	0092      	lsls	r2, r2, #2
 8002a10:	4093      	lsls	r3, r2
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a18:	4935      	ldr	r1, [pc, #212]	@ (8002af0 <HAL_GPIO_Init+0x2ec>)
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a26:	4b38      	ldr	r3, [pc, #224]	@ (8002b08 <HAL_GPIO_Init+0x304>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002b08 <HAL_GPIO_Init+0x304>)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a50:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <HAL_GPIO_Init+0x304>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a74:	4a24      	ldr	r2, [pc, #144]	@ (8002b08 <HAL_GPIO_Init+0x304>)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a7a:	4b23      	ldr	r3, [pc, #140]	@ (8002b08 <HAL_GPIO_Init+0x304>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002b08 <HAL_GPIO_Init+0x304>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa4:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <HAL_GPIO_Init+0x304>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8002b08 <HAL_GPIO_Init+0x304>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2b0f      	cmp	r3, #15
 8002ad8:	f67f aea2 	bls.w	8002820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3724      	adds	r7, #36	@ 0x24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40013800 	.word	0x40013800
 8002af4:	40020000 	.word	0x40020000
 8002af8:	40020400 	.word	0x40020400
 8002afc:	40020800 	.word	0x40020800
 8002b00:	40020c00 	.word	0x40020c00
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40013c00 	.word	0x40013c00

08002b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b1c:	787b      	ldrb	r3, [r7, #1]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b28:	e003      	b.n	8002b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b2a:	887b      	ldrh	r3, [r7, #2]
 8002b2c:	041a      	lsls	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	619a      	str	r2, [r3, #24]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e267      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d075      	beq.n	8002c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5e:	4b88      	ldr	r3, [pc, #544]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d00c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6a:	4b85      	ldr	r3, [pc, #532]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d112      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b76:	4b82      	ldr	r3, [pc, #520]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b82:	d10b      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	4b7e      	ldr	r3, [pc, #504]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d05b      	beq.n	8002c48 <HAL_RCC_OscConfig+0x108>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d157      	bne.n	8002c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e242      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba4:	d106      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x74>
 8002ba6:	4b76      	ldr	r3, [pc, #472]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a75      	ldr	r2, [pc, #468]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e01d      	b.n	8002bf0 <HAL_RCC_OscConfig+0xb0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x98>
 8002bbe:	4b70      	ldr	r3, [pc, #448]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6f      	ldr	r2, [pc, #444]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b6d      	ldr	r3, [pc, #436]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6c      	ldr	r2, [pc, #432]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	4b69      	ldr	r3, [pc, #420]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a68      	ldr	r2, [pc, #416]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	4b66      	ldr	r3, [pc, #408]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a65      	ldr	r2, [pc, #404]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d013      	beq.n	8002c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7ff fcee 	bl	80025d8 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c00:	f7ff fcea 	bl	80025d8 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	@ 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e207      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b5b      	ldr	r3, [pc, #364]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0xc0>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff fcda 	bl	80025d8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c28:	f7ff fcd6 	bl	80025d8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	@ 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e1f3      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	4b51      	ldr	r3, [pc, #324]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0xe8>
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d063      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c56:	4b4a      	ldr	r3, [pc, #296]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c62:	4b47      	ldr	r3, [pc, #284]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d11c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6e:	4b44      	ldr	r3, [pc, #272]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d116      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7a:	4b41      	ldr	r3, [pc, #260]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_RCC_OscConfig+0x152>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e1c7      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c92:	4b3b      	ldr	r3, [pc, #236]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4937      	ldr	r1, [pc, #220]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	e03a      	b.n	8002d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d020      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb0:	4b34      	ldr	r3, [pc, #208]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7ff fc8f 	bl	80025d8 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbe:	f7ff fc8b 	bl	80025d8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1a8      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cdc:	4b28      	ldr	r3, [pc, #160]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4925      	ldr	r1, [pc, #148]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]
 8002cf0:	e015      	b.n	8002d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf2:	4b24      	ldr	r3, [pc, #144]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7ff fc6e 	bl	80025d8 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d00:	f7ff fc6a 	bl	80025d8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e187      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d036      	beq.n	8002d98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d32:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <HAL_RCC_OscConfig+0x248>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7ff fc4e 	bl	80025d8 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d40:	f7ff fc4a 	bl	80025d8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e167      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x200>
 8002d5e:	e01b      	b.n	8002d98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <HAL_RCC_OscConfig+0x248>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7ff fc37 	bl	80025d8 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	e00e      	b.n	8002d8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6e:	f7ff fc33 	bl	80025d8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d907      	bls.n	8002d8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e150      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
 8002d80:	40023800 	.word	0x40023800
 8002d84:	42470000 	.word	0x42470000
 8002d88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8c:	4b88      	ldr	r3, [pc, #544]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ea      	bne.n	8002d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8097 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da6:	2300      	movs	r3, #0
 8002da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002daa:	4b81      	ldr	r3, [pc, #516]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	4b7d      	ldr	r3, [pc, #500]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	4a7c      	ldr	r2, [pc, #496]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dc6:	4b7a      	ldr	r3, [pc, #488]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b77      	ldr	r3, [pc, #476]	@ (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d118      	bne.n	8002e14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de2:	4b74      	ldr	r3, [pc, #464]	@ (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a73      	ldr	r2, [pc, #460]	@ (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7ff fbf3 	bl	80025d8 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7ff fbef 	bl	80025d8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e10c      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2ea>
 8002e1c:	4b64      	ldr	r3, [pc, #400]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e20:	4a63      	ldr	r2, [pc, #396]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e28:	e01c      	b.n	8002e64 <HAL_RCC_OscConfig+0x324>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x30c>
 8002e32:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e36:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e42:	4a5b      	ldr	r2, [pc, #364]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4a:	e00b      	b.n	8002e64 <HAL_RCC_OscConfig+0x324>
 8002e4c:	4b58      	ldr	r3, [pc, #352]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e50:	4a57      	ldr	r2, [pc, #348]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e58:	4b55      	ldr	r3, [pc, #340]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5c:	4a54      	ldr	r2, [pc, #336]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	f023 0304 	bic.w	r3, r3, #4
 8002e62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6c:	f7ff fbb4 	bl	80025d8 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e74:	f7ff fbb0 	bl	80025d8 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e0cb      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	4b49      	ldr	r3, [pc, #292]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ee      	beq.n	8002e74 <HAL_RCC_OscConfig+0x334>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7ff fb9e 	bl	80025d8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7ff fb9a 	bl	80025d8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0b5      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ee      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec8:	4b39      	ldr	r3, [pc, #228]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	4a38      	ldr	r2, [pc, #224]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a1 	beq.w	8003020 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ede:	4b34      	ldr	r3, [pc, #208]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d05c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d141      	bne.n	8002f76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef2:	4b31      	ldr	r3, [pc, #196]	@ (8002fb8 <HAL_RCC_OscConfig+0x478>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7ff fb6e 	bl	80025d8 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f00:	f7ff fb6a 	bl	80025d8 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e087      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f12:	4b27      	ldr	r3, [pc, #156]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	019b      	lsls	r3, r3, #6
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	3b01      	subs	r3, #1
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	061b      	lsls	r3, r3, #24
 8002f42:	491b      	ldr	r1, [pc, #108]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f48:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <HAL_RCC_OscConfig+0x478>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7ff fb43 	bl	80025d8 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f56:	f7ff fb3f 	bl	80025d8 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e05c      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x416>
 8002f74:	e054      	b.n	8003020 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f76:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <HAL_RCC_OscConfig+0x478>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7ff fb2c 	bl	80025d8 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f84:	f7ff fb28 	bl	80025d8 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e045      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x444>
 8002fa2:	e03d      	b.n	8003020 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e038      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <HAL_RCC_OscConfig+0x4ec>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d028      	beq.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d121      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11a      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	3b01      	subs	r3, #1
 8003006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d107      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800

08003030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0cc      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003044:	4b68      	ldr	r3, [pc, #416]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d90c      	bls.n	800306c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b65      	ldr	r3, [pc, #404]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b63      	ldr	r3, [pc, #396]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0b8      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d020      	beq.n	80030ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003084:	4b59      	ldr	r3, [pc, #356]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a58      	ldr	r2, [pc, #352]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800308e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800309c:	4b53      	ldr	r3, [pc, #332]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a52      	ldr	r2, [pc, #328]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a8:	4b50      	ldr	r3, [pc, #320]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	494d      	ldr	r1, [pc, #308]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d044      	beq.n	8003150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d107      	bne.n	80030de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ce:	4b47      	ldr	r3, [pc, #284]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d119      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e07f      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	4b3f      	ldr	r3, [pc, #252]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06f      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	4b3b      	ldr	r3, [pc, #236]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e067      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310e:	4b37      	ldr	r3, [pc, #220]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f023 0203 	bic.w	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4934      	ldr	r1, [pc, #208]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003120:	f7ff fa5a 	bl	80025d8 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	e00a      	b.n	800313e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003128:	f7ff fa56 	bl	80025d8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e04f      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	4b2b      	ldr	r3, [pc, #172]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 020c 	and.w	r2, r3, #12
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d1eb      	bne.n	8003128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b25      	ldr	r3, [pc, #148]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d20c      	bcs.n	8003178 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b22      	ldr	r3, [pc, #136]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b20      	ldr	r3, [pc, #128]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e032      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003184:	4b19      	ldr	r3, [pc, #100]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4916      	ldr	r1, [pc, #88]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a2:	4b12      	ldr	r3, [pc, #72]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	490e      	ldr	r1, [pc, #56]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031b6:	f000 f821 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	490a      	ldr	r1, [pc, #40]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	5ccb      	ldrb	r3, [r1, r3]
 80031ca:	fa22 f303 	lsr.w	r3, r2, r3
 80031ce:	4a09      	ldr	r2, [pc, #36]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031d2:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff f9ba 	bl	8002550 <HAL_InitTick>

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023c00 	.word	0x40023c00
 80031ec:	40023800 	.word	0x40023800
 80031f0:	08008eac 	.word	0x08008eac
 80031f4:	20000030 	.word	0x20000030
 80031f8:	20000034 	.word	0x20000034

080031fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003200:	b094      	sub	sp, #80	@ 0x50
 8003202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	647b      	str	r3, [r7, #68]	@ 0x44
 8003208:	2300      	movs	r3, #0
 800320a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800320c:	2300      	movs	r3, #0
 800320e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003214:	4b79      	ldr	r3, [pc, #484]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d00d      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x40>
 8003220:	2b08      	cmp	r3, #8
 8003222:	f200 80e1 	bhi.w	80033e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x34>
 800322a:	2b04      	cmp	r3, #4
 800322c:	d003      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0x3a>
 800322e:	e0db      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003230:	4b73      	ldr	r3, [pc, #460]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x204>)
 8003232:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003234:	e0db      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003236:	4b73      	ldr	r3, [pc, #460]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x208>)
 8003238:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800323a:	e0d8      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800323c:	4b6f      	ldr	r3, [pc, #444]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003244:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003246:	4b6d      	ldr	r3, [pc, #436]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d063      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003252:	4b6a      	ldr	r3, [pc, #424]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	099b      	lsrs	r3, r3, #6
 8003258:	2200      	movs	r2, #0
 800325a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800325c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800325e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003264:	633b      	str	r3, [r7, #48]	@ 0x30
 8003266:	2300      	movs	r3, #0
 8003268:	637b      	str	r3, [r7, #52]	@ 0x34
 800326a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800326e:	4622      	mov	r2, r4
 8003270:	462b      	mov	r3, r5
 8003272:	f04f 0000 	mov.w	r0, #0
 8003276:	f04f 0100 	mov.w	r1, #0
 800327a:	0159      	lsls	r1, r3, #5
 800327c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003280:	0150      	lsls	r0, r2, #5
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4621      	mov	r1, r4
 8003288:	1a51      	subs	r1, r2, r1
 800328a:	6139      	str	r1, [r7, #16]
 800328c:	4629      	mov	r1, r5
 800328e:	eb63 0301 	sbc.w	r3, r3, r1
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a0:	4659      	mov	r1, fp
 80032a2:	018b      	lsls	r3, r1, #6
 80032a4:	4651      	mov	r1, sl
 80032a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032aa:	4651      	mov	r1, sl
 80032ac:	018a      	lsls	r2, r1, #6
 80032ae:	4651      	mov	r1, sl
 80032b0:	ebb2 0801 	subs.w	r8, r2, r1
 80032b4:	4659      	mov	r1, fp
 80032b6:	eb63 0901 	sbc.w	r9, r3, r1
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ce:	4690      	mov	r8, r2
 80032d0:	4699      	mov	r9, r3
 80032d2:	4623      	mov	r3, r4
 80032d4:	eb18 0303 	adds.w	r3, r8, r3
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	462b      	mov	r3, r5
 80032dc:	eb49 0303 	adc.w	r3, r9, r3
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ee:	4629      	mov	r1, r5
 80032f0:	024b      	lsls	r3, r1, #9
 80032f2:	4621      	mov	r1, r4
 80032f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032f8:	4621      	mov	r1, r4
 80032fa:	024a      	lsls	r2, r1, #9
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003302:	2200      	movs	r2, #0
 8003304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800330c:	f7fd fcc4 	bl	8000c98 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003318:	e058      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331a:	4b38      	ldr	r3, [pc, #224]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	099b      	lsrs	r3, r3, #6
 8003320:	2200      	movs	r2, #0
 8003322:	4618      	mov	r0, r3
 8003324:	4611      	mov	r1, r2
 8003326:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800332a:	623b      	str	r3, [r7, #32]
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003330:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003334:	4642      	mov	r2, r8
 8003336:	464b      	mov	r3, r9
 8003338:	f04f 0000 	mov.w	r0, #0
 800333c:	f04f 0100 	mov.w	r1, #0
 8003340:	0159      	lsls	r1, r3, #5
 8003342:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003346:	0150      	lsls	r0, r2, #5
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4641      	mov	r1, r8
 800334e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003352:	4649      	mov	r1, r9
 8003354:	eb63 0b01 	sbc.w	fp, r3, r1
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003364:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003368:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800336c:	ebb2 040a 	subs.w	r4, r2, sl
 8003370:	eb63 050b 	sbc.w	r5, r3, fp
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	00eb      	lsls	r3, r5, #3
 800337e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003382:	00e2      	lsls	r2, r4, #3
 8003384:	4614      	mov	r4, r2
 8003386:	461d      	mov	r5, r3
 8003388:	4643      	mov	r3, r8
 800338a:	18e3      	adds	r3, r4, r3
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	464b      	mov	r3, r9
 8003390:	eb45 0303 	adc.w	r3, r5, r3
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033a2:	4629      	mov	r1, r5
 80033a4:	028b      	lsls	r3, r1, #10
 80033a6:	4621      	mov	r1, r4
 80033a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033ac:	4621      	mov	r1, r4
 80033ae:	028a      	lsls	r2, r1, #10
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033b6:	2200      	movs	r2, #0
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	61fa      	str	r2, [r7, #28]
 80033bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c0:	f7fd fc6a 	bl	8000c98 <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4613      	mov	r3, r2
 80033ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	3301      	adds	r3, #1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80033dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033e6:	e002      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e8:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3750      	adds	r7, #80	@ 0x50
 80033f4:	46bd      	mov	sp, r7
 80033f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	00f42400 	.word	0x00f42400
 8003404:	007a1200 	.word	0x007a1200

08003408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800340c:	4b03      	ldr	r3, [pc, #12]	@ (800341c <HAL_RCC_GetHCLKFreq+0x14>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000030 	.word	0x20000030

08003420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003424:	f7ff fff0 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0a9b      	lsrs	r3, r3, #10
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4903      	ldr	r1, [pc, #12]	@ (8003444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40023800 	.word	0x40023800
 8003444:	08008ebc 	.word	0x08008ebc

08003448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800344c:	f7ff ffdc 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0b5b      	lsrs	r3, r3, #13
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4903      	ldr	r1, [pc, #12]	@ (800346c <HAL_RCC_GetPCLK2Freq+0x24>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40023800 	.word	0x40023800
 800346c:	08008ebc 	.word	0x08008ebc

08003470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e07b      	b.n	800357a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003492:	d009      	beq.n	80034a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	61da      	str	r2, [r3, #28]
 800349a:	e005      	b.n	80034a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fe fe60 	bl	8002188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352c:	ea42 0103 	orr.w	r1, r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003534:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	f003 0104 	and.w	r1, r3, #4
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	f003 0210 	and.w	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003568:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b088      	sub	sp, #32
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_SPI_Transmit+0x22>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e12d      	b.n	8003800 <HAL_SPI_Transmit+0x27e>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035ac:	f7ff f814 	bl	80025d8 <HAL_GetTick>
 80035b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d002      	beq.n	80035c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
 80035c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035c6:	e116      	b.n	80037f6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_SPI_Transmit+0x52>
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035d8:	e10d      	b.n	80037f6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	88fa      	ldrh	r2, [r7, #6]
 80035f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003620:	d10f      	bne.n	8003642 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003630:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003640:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364c:	2b40      	cmp	r3, #64	@ 0x40
 800364e:	d007      	beq.n	8003660 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800365e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003668:	d14f      	bne.n	800370a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_SPI_Transmit+0xf6>
 8003672:	8afb      	ldrh	r3, [r7, #22]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d142      	bne.n	80036fe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	881a      	ldrh	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	1c9a      	adds	r2, r3, #2
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800369c:	e02f      	b.n	80036fe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d112      	bne.n	80036d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	881a      	ldrh	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036bc:	1c9a      	adds	r2, r3, #2
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036d0:	e015      	b.n	80036fe <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d2:	f7fe ff81 	bl	80025d8 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d803      	bhi.n	80036ea <HAL_SPI_Transmit+0x168>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d102      	bne.n	80036f0 <HAL_SPI_Transmit+0x16e>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80036fc:	e07b      	b.n	80037f6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ca      	bne.n	800369e <HAL_SPI_Transmit+0x11c>
 8003708:	e050      	b.n	80037ac <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_SPI_Transmit+0x196>
 8003712:	8afb      	ldrh	r3, [r7, #22]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d144      	bne.n	80037a2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	7812      	ldrb	r2, [r2, #0]
 8003724:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800373e:	e030      	b.n	80037a2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b02      	cmp	r3, #2
 800374c:	d113      	bne.n	8003776 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003774:	e015      	b.n	80037a2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003776:	f7fe ff2f 	bl	80025d8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d803      	bhi.n	800378e <HAL_SPI_Transmit+0x20c>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d102      	bne.n	8003794 <HAL_SPI_Transmit+0x212>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80037a0:	e029      	b.n	80037f6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1c9      	bne.n	8003740 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	6839      	ldr	r1, [r7, #0]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f8b1 	bl	8003918 <SPI_EndRxTxTransaction>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e003      	b.n	80037f6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80037fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003818:	f7fe fede 	bl	80025d8 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003828:	f7fe fed6 	bl	80025d8 <HAL_GetTick>
 800382c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800382e:	4b39      	ldr	r3, [pc, #228]	@ (8003914 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	015b      	lsls	r3, r3, #5
 8003834:	0d1b      	lsrs	r3, r3, #20
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800383e:	e054      	b.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d050      	beq.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003848:	f7fe fec6 	bl	80025d8 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	429a      	cmp	r2, r3
 8003856:	d902      	bls.n	800385e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d13d      	bne.n	80038da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800386c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003876:	d111      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003880:	d004      	beq.n	800388c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388a:	d107      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800389a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a4:	d10f      	bne.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e017      	b.n	800390a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	429a      	cmp	r2, r3
 8003906:	d19b      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000030 	.word	0x20000030

08003918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2201      	movs	r2, #1
 800392c:	2102      	movs	r1, #2
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff ff6a 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e032      	b.n	80039b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800394a:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <SPI_EndRxTxTransaction+0xa0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a1b      	ldr	r2, [pc, #108]	@ (80039bc <SPI_EndRxTxTransaction+0xa4>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	0d5b      	lsrs	r3, r3, #21
 8003956:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003968:	d112      	bne.n	8003990 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2200      	movs	r2, #0
 8003972:	2180      	movs	r1, #128	@ 0x80
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff ff47 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d016      	beq.n	80039ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003984:	f043 0220 	orr.w	r2, r3, #32
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e00f      	b.n	80039b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	3b01      	subs	r3, #1
 800399a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a6:	2b80      	cmp	r3, #128	@ 0x80
 80039a8:	d0f2      	beq.n	8003990 <SPI_EndRxTxTransaction+0x78>
 80039aa:	e000      	b.n	80039ae <SPI_EndRxTxTransaction+0x96>
        break;
 80039ac:	bf00      	nop
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000030 	.word	0x20000030
 80039bc:	165e9f81 	.word	0x165e9f81

080039c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e042      	b.n	8003a58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fe fc16 	bl	8002218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	@ 0x24
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f973 	bl	8003cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	@ 0x28
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d175      	bne.n	8003b6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Transmit+0x2c>
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e06e      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2221      	movs	r2, #33	@ 0x21
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a9e:	f7fe fd9b 	bl	80025d8 <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	88fa      	ldrh	r2, [r7, #6]
 8003aae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab8:	d108      	bne.n	8003acc <HAL_UART_Transmit+0x6c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e003      	b.n	8003ad4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ad4:	e02e      	b.n	8003b34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	@ 0x80
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f848 	bl	8003b76 <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e03a      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	3302      	adds	r3, #2
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	e007      	b.n	8003b26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	3301      	adds	r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1cb      	bne.n	8003ad6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2200      	movs	r2, #0
 8003b46:	2140      	movs	r1, #64	@ 0x40
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f814 	bl	8003b76 <UART_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e006      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b86:	e03b      	b.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d037      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b90:	f7fe fd22 	bl	80025d8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	6a3a      	ldr	r2, [r7, #32]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e03a      	b.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d023      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b80      	cmp	r3, #128	@ 0x80
 8003bbc:	d020      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b40      	cmp	r3, #64	@ 0x40
 8003bc2:	d01d      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d116      	bne.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f81d 	bl	8003c28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e00f      	b.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d0b4      	beq.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b095      	sub	sp, #84	@ 0x54
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c50:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e5      	bne.n	8003c30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3314      	adds	r3, #20
 8003c6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e5      	bne.n	8003c64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d119      	bne.n	8003cd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f023 0310 	bic.w	r3, r3, #16
 8003cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cc0:	61ba      	str	r2, [r7, #24]
 8003cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6979      	ldr	r1, [r7, #20]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e5      	bne.n	8003ca0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ce2:	bf00      	nop
 8003ce4:	3754      	adds	r7, #84	@ 0x54
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf4:	b0c0      	sub	sp, #256	@ 0x100
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0c:	68d9      	ldr	r1, [r3, #12]
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	ea40 0301 	orr.w	r3, r0, r1
 8003d18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d48:	f021 010c 	bic.w	r1, r1, #12
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d56:	430b      	orrs	r3, r1
 8003d58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6a:	6999      	ldr	r1, [r3, #24]
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	ea40 0301 	orr.w	r3, r0, r1
 8003d76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b8f      	ldr	r3, [pc, #572]	@ (8003fbc <UART_SetConfig+0x2cc>)
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d005      	beq.n	8003d90 <UART_SetConfig+0xa0>
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b8d      	ldr	r3, [pc, #564]	@ (8003fc0 <UART_SetConfig+0x2d0>)
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d104      	bne.n	8003d9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d90:	f7ff fb5a 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 8003d94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d98:	e003      	b.n	8003da2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d9a:	f7ff fb41 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8003d9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dac:	f040 810c 	bne.w	8003fc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dc2:	4622      	mov	r2, r4
 8003dc4:	462b      	mov	r3, r5
 8003dc6:	1891      	adds	r1, r2, r2
 8003dc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003dca:	415b      	adcs	r3, r3
 8003dcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	eb12 0801 	adds.w	r8, r2, r1
 8003dd8:	4629      	mov	r1, r5
 8003dda:	eb43 0901 	adc.w	r9, r3, r1
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df2:	4690      	mov	r8, r2
 8003df4:	4699      	mov	r9, r3
 8003df6:	4623      	mov	r3, r4
 8003df8:	eb18 0303 	adds.w	r3, r8, r3
 8003dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e00:	462b      	mov	r3, r5
 8003e02:	eb49 0303 	adc.w	r3, r9, r3
 8003e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e1e:	460b      	mov	r3, r1
 8003e20:	18db      	adds	r3, r3, r3
 8003e22:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e24:	4613      	mov	r3, r2
 8003e26:	eb42 0303 	adc.w	r3, r2, r3
 8003e2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e34:	f7fc ff30 	bl	8000c98 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4b61      	ldr	r3, [pc, #388]	@ (8003fc4 <UART_SetConfig+0x2d4>)
 8003e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	011c      	lsls	r4, r3, #4
 8003e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	1891      	adds	r1, r2, r2
 8003e5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e60:	415b      	adcs	r3, r3
 8003e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e68:	4641      	mov	r1, r8
 8003e6a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e6e:	4649      	mov	r1, r9
 8003e70:	eb43 0b01 	adc.w	fp, r3, r1
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e88:	4692      	mov	sl, r2
 8003e8a:	469b      	mov	fp, r3
 8003e8c:	4643      	mov	r3, r8
 8003e8e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e96:	464b      	mov	r3, r9
 8003e98:	eb4b 0303 	adc.w	r3, fp, r3
 8003e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003eb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	18db      	adds	r3, r3, r3
 8003eb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003eba:	4613      	mov	r3, r2
 8003ebc:	eb42 0303 	adc.w	r3, r2, r3
 8003ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ec6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003eca:	f7fc fee5 	bl	8000c98 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc4 <UART_SetConfig+0x2d4>)
 8003ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2264      	movs	r2, #100	@ 0x64
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	1acb      	subs	r3, r1, r3
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003eea:	4b36      	ldr	r3, [pc, #216]	@ (8003fc4 <UART_SetConfig+0x2d4>)
 8003eec:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ef8:	441c      	add	r4, r3
 8003efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	1891      	adds	r1, r2, r2
 8003f12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f14:	415b      	adcs	r3, r3
 8003f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	1851      	adds	r1, r2, r1
 8003f20:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f22:	4649      	mov	r1, r9
 8003f24:	414b      	adcs	r3, r1
 8003f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f34:	4659      	mov	r1, fp
 8003f36:	00cb      	lsls	r3, r1, #3
 8003f38:	4651      	mov	r1, sl
 8003f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f3e:	4651      	mov	r1, sl
 8003f40:	00ca      	lsls	r2, r1, #3
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	4642      	mov	r2, r8
 8003f4a:	189b      	adds	r3, r3, r2
 8003f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f50:	464b      	mov	r3, r9
 8003f52:	460a      	mov	r2, r1
 8003f54:	eb42 0303 	adc.w	r3, r2, r3
 8003f58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f70:	460b      	mov	r3, r1
 8003f72:	18db      	adds	r3, r3, r3
 8003f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f76:	4613      	mov	r3, r2
 8003f78:	eb42 0303 	adc.w	r3, r2, r3
 8003f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f86:	f7fc fe87 	bl	8000c98 <__aeabi_uldivmod>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc4 <UART_SetConfig+0x2d4>)
 8003f90:	fba3 1302 	umull	r1, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	2164      	movs	r1, #100	@ 0x64
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	3332      	adds	r3, #50	@ 0x32
 8003fa2:	4a08      	ldr	r2, [pc, #32]	@ (8003fc4 <UART_SetConfig+0x2d4>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	f003 0207 	and.w	r2, r3, #7
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4422      	add	r2, r4
 8003fb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fb8:	e106      	b.n	80041c8 <UART_SetConfig+0x4d8>
 8003fba:	bf00      	nop
 8003fbc:	40011000 	.word	0x40011000
 8003fc0:	40011400 	.word	0x40011400
 8003fc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fda:	4642      	mov	r2, r8
 8003fdc:	464b      	mov	r3, r9
 8003fde:	1891      	adds	r1, r2, r2
 8003fe0:	6239      	str	r1, [r7, #32]
 8003fe2:	415b      	adcs	r3, r3
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fea:	4641      	mov	r1, r8
 8003fec:	1854      	adds	r4, r2, r1
 8003fee:	4649      	mov	r1, r9
 8003ff0:	eb43 0501 	adc.w	r5, r3, r1
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	00eb      	lsls	r3, r5, #3
 8003ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004002:	00e2      	lsls	r2, r4, #3
 8004004:	4614      	mov	r4, r2
 8004006:	461d      	mov	r5, r3
 8004008:	4643      	mov	r3, r8
 800400a:	18e3      	adds	r3, r4, r3
 800400c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004010:	464b      	mov	r3, r9
 8004012:	eb45 0303 	adc.w	r3, r5, r3
 8004016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004026:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004036:	4629      	mov	r1, r5
 8004038:	008b      	lsls	r3, r1, #2
 800403a:	4621      	mov	r1, r4
 800403c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004040:	4621      	mov	r1, r4
 8004042:	008a      	lsls	r2, r1, #2
 8004044:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004048:	f7fc fe26 	bl	8000c98 <__aeabi_uldivmod>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4b60      	ldr	r3, [pc, #384]	@ (80041d4 <UART_SetConfig+0x4e4>)
 8004052:	fba3 2302 	umull	r2, r3, r3, r2
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	011c      	lsls	r4, r3, #4
 800405a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800405e:	2200      	movs	r2, #0
 8004060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004064:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004068:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	1891      	adds	r1, r2, r2
 8004072:	61b9      	str	r1, [r7, #24]
 8004074:	415b      	adcs	r3, r3
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800407c:	4641      	mov	r1, r8
 800407e:	1851      	adds	r1, r2, r1
 8004080:	6139      	str	r1, [r7, #16]
 8004082:	4649      	mov	r1, r9
 8004084:	414b      	adcs	r3, r1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004094:	4659      	mov	r1, fp
 8004096:	00cb      	lsls	r3, r1, #3
 8004098:	4651      	mov	r1, sl
 800409a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800409e:	4651      	mov	r1, sl
 80040a0:	00ca      	lsls	r2, r1, #3
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	4642      	mov	r2, r8
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040b0:	464b      	mov	r3, r9
 80040b2:	460a      	mov	r2, r1
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040d4:	4649      	mov	r1, r9
 80040d6:	008b      	lsls	r3, r1, #2
 80040d8:	4641      	mov	r1, r8
 80040da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040de:	4641      	mov	r1, r8
 80040e0:	008a      	lsls	r2, r1, #2
 80040e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040e6:	f7fc fdd7 	bl	8000c98 <__aeabi_uldivmod>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	4b38      	ldr	r3, [pc, #224]	@ (80041d4 <UART_SetConfig+0x4e4>)
 80040f2:	fba3 2301 	umull	r2, r3, r3, r1
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	2264      	movs	r2, #100	@ 0x64
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	1acb      	subs	r3, r1, r3
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	3332      	adds	r3, #50	@ 0x32
 8004104:	4a33      	ldr	r2, [pc, #204]	@ (80041d4 <UART_SetConfig+0x4e4>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004110:	441c      	add	r4, r3
 8004112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004116:	2200      	movs	r2, #0
 8004118:	673b      	str	r3, [r7, #112]	@ 0x70
 800411a:	677a      	str	r2, [r7, #116]	@ 0x74
 800411c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004120:	4642      	mov	r2, r8
 8004122:	464b      	mov	r3, r9
 8004124:	1891      	adds	r1, r2, r2
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	415b      	adcs	r3, r3
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004130:	4641      	mov	r1, r8
 8004132:	1851      	adds	r1, r2, r1
 8004134:	6039      	str	r1, [r7, #0]
 8004136:	4649      	mov	r1, r9
 8004138:	414b      	adcs	r3, r1
 800413a:	607b      	str	r3, [r7, #4]
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004148:	4659      	mov	r1, fp
 800414a:	00cb      	lsls	r3, r1, #3
 800414c:	4651      	mov	r1, sl
 800414e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004152:	4651      	mov	r1, sl
 8004154:	00ca      	lsls	r2, r1, #3
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	4603      	mov	r3, r0
 800415c:	4642      	mov	r2, r8
 800415e:	189b      	adds	r3, r3, r2
 8004160:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004162:	464b      	mov	r3, r9
 8004164:	460a      	mov	r2, r1
 8004166:	eb42 0303 	adc.w	r3, r2, r3
 800416a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	663b      	str	r3, [r7, #96]	@ 0x60
 8004176:	667a      	str	r2, [r7, #100]	@ 0x64
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004184:	4649      	mov	r1, r9
 8004186:	008b      	lsls	r3, r1, #2
 8004188:	4641      	mov	r1, r8
 800418a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800418e:	4641      	mov	r1, r8
 8004190:	008a      	lsls	r2, r1, #2
 8004192:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004196:	f7fc fd7f 	bl	8000c98 <__aeabi_uldivmod>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4b0d      	ldr	r3, [pc, #52]	@ (80041d4 <UART_SetConfig+0x4e4>)
 80041a0:	fba3 1302 	umull	r1, r3, r3, r2
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	2164      	movs	r1, #100	@ 0x64
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	3332      	adds	r3, #50	@ 0x32
 80041b2:	4a08      	ldr	r2, [pc, #32]	@ (80041d4 <UART_SetConfig+0x4e4>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	f003 020f 	and.w	r2, r3, #15
 80041be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4422      	add	r2, r4
 80041c6:	609a      	str	r2, [r3, #8]
}
 80041c8:	bf00      	nop
 80041ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041ce:	46bd      	mov	sp, r7
 80041d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041d4:	51eb851f 	.word	0x51eb851f

080041d8 <malloc>:
 80041d8:	4b02      	ldr	r3, [pc, #8]	@ (80041e4 <malloc+0xc>)
 80041da:	4601      	mov	r1, r0
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	f000 b82d 	b.w	800423c <_malloc_r>
 80041e2:	bf00      	nop
 80041e4:	20000048 	.word	0x20000048

080041e8 <free>:
 80041e8:	4b02      	ldr	r3, [pc, #8]	@ (80041f4 <free+0xc>)
 80041ea:	4601      	mov	r1, r0
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	f001 be23 	b.w	8005e38 <_free_r>
 80041f2:	bf00      	nop
 80041f4:	20000048 	.word	0x20000048

080041f8 <sbrk_aligned>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004238 <sbrk_aligned+0x40>)
 80041fc:	460c      	mov	r4, r1
 80041fe:	6831      	ldr	r1, [r6, #0]
 8004200:	4605      	mov	r5, r0
 8004202:	b911      	cbnz	r1, 800420a <sbrk_aligned+0x12>
 8004204:	f000 ff7c 	bl	8005100 <_sbrk_r>
 8004208:	6030      	str	r0, [r6, #0]
 800420a:	4621      	mov	r1, r4
 800420c:	4628      	mov	r0, r5
 800420e:	f000 ff77 	bl	8005100 <_sbrk_r>
 8004212:	1c43      	adds	r3, r0, #1
 8004214:	d103      	bne.n	800421e <sbrk_aligned+0x26>
 8004216:	f04f 34ff 	mov.w	r4, #4294967295
 800421a:	4620      	mov	r0, r4
 800421c:	bd70      	pop	{r4, r5, r6, pc}
 800421e:	1cc4      	adds	r4, r0, #3
 8004220:	f024 0403 	bic.w	r4, r4, #3
 8004224:	42a0      	cmp	r0, r4
 8004226:	d0f8      	beq.n	800421a <sbrk_aligned+0x22>
 8004228:	1a21      	subs	r1, r4, r0
 800422a:	4628      	mov	r0, r5
 800422c:	f000 ff68 	bl	8005100 <_sbrk_r>
 8004230:	3001      	adds	r0, #1
 8004232:	d1f2      	bne.n	800421a <sbrk_aligned+0x22>
 8004234:	e7ef      	b.n	8004216 <sbrk_aligned+0x1e>
 8004236:	bf00      	nop
 8004238:	200002e4 	.word	0x200002e4

0800423c <_malloc_r>:
 800423c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004240:	1ccd      	adds	r5, r1, #3
 8004242:	f025 0503 	bic.w	r5, r5, #3
 8004246:	3508      	adds	r5, #8
 8004248:	2d0c      	cmp	r5, #12
 800424a:	bf38      	it	cc
 800424c:	250c      	movcc	r5, #12
 800424e:	2d00      	cmp	r5, #0
 8004250:	4606      	mov	r6, r0
 8004252:	db01      	blt.n	8004258 <_malloc_r+0x1c>
 8004254:	42a9      	cmp	r1, r5
 8004256:	d904      	bls.n	8004262 <_malloc_r+0x26>
 8004258:	230c      	movs	r3, #12
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	2000      	movs	r0, #0
 800425e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004338 <_malloc_r+0xfc>
 8004266:	f000 f869 	bl	800433c <__malloc_lock>
 800426a:	f8d8 3000 	ldr.w	r3, [r8]
 800426e:	461c      	mov	r4, r3
 8004270:	bb44      	cbnz	r4, 80042c4 <_malloc_r+0x88>
 8004272:	4629      	mov	r1, r5
 8004274:	4630      	mov	r0, r6
 8004276:	f7ff ffbf 	bl	80041f8 <sbrk_aligned>
 800427a:	1c43      	adds	r3, r0, #1
 800427c:	4604      	mov	r4, r0
 800427e:	d158      	bne.n	8004332 <_malloc_r+0xf6>
 8004280:	f8d8 4000 	ldr.w	r4, [r8]
 8004284:	4627      	mov	r7, r4
 8004286:	2f00      	cmp	r7, #0
 8004288:	d143      	bne.n	8004312 <_malloc_r+0xd6>
 800428a:	2c00      	cmp	r4, #0
 800428c:	d04b      	beq.n	8004326 <_malloc_r+0xea>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	4639      	mov	r1, r7
 8004292:	4630      	mov	r0, r6
 8004294:	eb04 0903 	add.w	r9, r4, r3
 8004298:	f000 ff32 	bl	8005100 <_sbrk_r>
 800429c:	4581      	cmp	r9, r0
 800429e:	d142      	bne.n	8004326 <_malloc_r+0xea>
 80042a0:	6821      	ldr	r1, [r4, #0]
 80042a2:	1a6d      	subs	r5, r5, r1
 80042a4:	4629      	mov	r1, r5
 80042a6:	4630      	mov	r0, r6
 80042a8:	f7ff ffa6 	bl	80041f8 <sbrk_aligned>
 80042ac:	3001      	adds	r0, #1
 80042ae:	d03a      	beq.n	8004326 <_malloc_r+0xea>
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	442b      	add	r3, r5
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	f8d8 3000 	ldr.w	r3, [r8]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	bb62      	cbnz	r2, 8004318 <_malloc_r+0xdc>
 80042be:	f8c8 7000 	str.w	r7, [r8]
 80042c2:	e00f      	b.n	80042e4 <_malloc_r+0xa8>
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	1b52      	subs	r2, r2, r5
 80042c8:	d420      	bmi.n	800430c <_malloc_r+0xd0>
 80042ca:	2a0b      	cmp	r2, #11
 80042cc:	d917      	bls.n	80042fe <_malloc_r+0xc2>
 80042ce:	1961      	adds	r1, r4, r5
 80042d0:	42a3      	cmp	r3, r4
 80042d2:	6025      	str	r5, [r4, #0]
 80042d4:	bf18      	it	ne
 80042d6:	6059      	strne	r1, [r3, #4]
 80042d8:	6863      	ldr	r3, [r4, #4]
 80042da:	bf08      	it	eq
 80042dc:	f8c8 1000 	streq.w	r1, [r8]
 80042e0:	5162      	str	r2, [r4, r5]
 80042e2:	604b      	str	r3, [r1, #4]
 80042e4:	4630      	mov	r0, r6
 80042e6:	f000 f82f 	bl	8004348 <__malloc_unlock>
 80042ea:	f104 000b 	add.w	r0, r4, #11
 80042ee:	1d23      	adds	r3, r4, #4
 80042f0:	f020 0007 	bic.w	r0, r0, #7
 80042f4:	1ac2      	subs	r2, r0, r3
 80042f6:	bf1c      	itt	ne
 80042f8:	1a1b      	subne	r3, r3, r0
 80042fa:	50a3      	strne	r3, [r4, r2]
 80042fc:	e7af      	b.n	800425e <_malloc_r+0x22>
 80042fe:	6862      	ldr	r2, [r4, #4]
 8004300:	42a3      	cmp	r3, r4
 8004302:	bf0c      	ite	eq
 8004304:	f8c8 2000 	streq.w	r2, [r8]
 8004308:	605a      	strne	r2, [r3, #4]
 800430a:	e7eb      	b.n	80042e4 <_malloc_r+0xa8>
 800430c:	4623      	mov	r3, r4
 800430e:	6864      	ldr	r4, [r4, #4]
 8004310:	e7ae      	b.n	8004270 <_malloc_r+0x34>
 8004312:	463c      	mov	r4, r7
 8004314:	687f      	ldr	r7, [r7, #4]
 8004316:	e7b6      	b.n	8004286 <_malloc_r+0x4a>
 8004318:	461a      	mov	r2, r3
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	42a3      	cmp	r3, r4
 800431e:	d1fb      	bne.n	8004318 <_malloc_r+0xdc>
 8004320:	2300      	movs	r3, #0
 8004322:	6053      	str	r3, [r2, #4]
 8004324:	e7de      	b.n	80042e4 <_malloc_r+0xa8>
 8004326:	230c      	movs	r3, #12
 8004328:	6033      	str	r3, [r6, #0]
 800432a:	4630      	mov	r0, r6
 800432c:	f000 f80c 	bl	8004348 <__malloc_unlock>
 8004330:	e794      	b.n	800425c <_malloc_r+0x20>
 8004332:	6005      	str	r5, [r0, #0]
 8004334:	e7d6      	b.n	80042e4 <_malloc_r+0xa8>
 8004336:	bf00      	nop
 8004338:	200002e8 	.word	0x200002e8

0800433c <__malloc_lock>:
 800433c:	4801      	ldr	r0, [pc, #4]	@ (8004344 <__malloc_lock+0x8>)
 800433e:	f000 bf2c 	b.w	800519a <__retarget_lock_acquire_recursive>
 8004342:	bf00      	nop
 8004344:	2000042c 	.word	0x2000042c

08004348 <__malloc_unlock>:
 8004348:	4801      	ldr	r0, [pc, #4]	@ (8004350 <__malloc_unlock+0x8>)
 800434a:	f000 bf27 	b.w	800519c <__retarget_lock_release_recursive>
 800434e:	bf00      	nop
 8004350:	2000042c 	.word	0x2000042c

08004354 <__cvt>:
 8004354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004358:	ec57 6b10 	vmov	r6, r7, d0
 800435c:	2f00      	cmp	r7, #0
 800435e:	460c      	mov	r4, r1
 8004360:	4619      	mov	r1, r3
 8004362:	463b      	mov	r3, r7
 8004364:	bfbb      	ittet	lt
 8004366:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800436a:	461f      	movlt	r7, r3
 800436c:	2300      	movge	r3, #0
 800436e:	232d      	movlt	r3, #45	@ 0x2d
 8004370:	700b      	strb	r3, [r1, #0]
 8004372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004374:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004378:	4691      	mov	r9, r2
 800437a:	f023 0820 	bic.w	r8, r3, #32
 800437e:	bfbc      	itt	lt
 8004380:	4632      	movlt	r2, r6
 8004382:	4616      	movlt	r6, r2
 8004384:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004388:	d005      	beq.n	8004396 <__cvt+0x42>
 800438a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800438e:	d100      	bne.n	8004392 <__cvt+0x3e>
 8004390:	3401      	adds	r4, #1
 8004392:	2102      	movs	r1, #2
 8004394:	e000      	b.n	8004398 <__cvt+0x44>
 8004396:	2103      	movs	r1, #3
 8004398:	ab03      	add	r3, sp, #12
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	ab02      	add	r3, sp, #8
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	ec47 6b10 	vmov	d0, r6, r7
 80043a4:	4653      	mov	r3, sl
 80043a6:	4622      	mov	r2, r4
 80043a8:	f000 ff82 	bl	80052b0 <_dtoa_r>
 80043ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80043b0:	4605      	mov	r5, r0
 80043b2:	d119      	bne.n	80043e8 <__cvt+0x94>
 80043b4:	f019 0f01 	tst.w	r9, #1
 80043b8:	d00e      	beq.n	80043d8 <__cvt+0x84>
 80043ba:	eb00 0904 	add.w	r9, r0, r4
 80043be:	2200      	movs	r2, #0
 80043c0:	2300      	movs	r3, #0
 80043c2:	4630      	mov	r0, r6
 80043c4:	4639      	mov	r1, r7
 80043c6:	f7fc fb87 	bl	8000ad8 <__aeabi_dcmpeq>
 80043ca:	b108      	cbz	r0, 80043d0 <__cvt+0x7c>
 80043cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80043d0:	2230      	movs	r2, #48	@ 0x30
 80043d2:	9b03      	ldr	r3, [sp, #12]
 80043d4:	454b      	cmp	r3, r9
 80043d6:	d31e      	bcc.n	8004416 <__cvt+0xc2>
 80043d8:	9b03      	ldr	r3, [sp, #12]
 80043da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80043dc:	1b5b      	subs	r3, r3, r5
 80043de:	4628      	mov	r0, r5
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	b004      	add	sp, #16
 80043e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80043ec:	eb00 0904 	add.w	r9, r0, r4
 80043f0:	d1e5      	bne.n	80043be <__cvt+0x6a>
 80043f2:	7803      	ldrb	r3, [r0, #0]
 80043f4:	2b30      	cmp	r3, #48	@ 0x30
 80043f6:	d10a      	bne.n	800440e <__cvt+0xba>
 80043f8:	2200      	movs	r2, #0
 80043fa:	2300      	movs	r3, #0
 80043fc:	4630      	mov	r0, r6
 80043fe:	4639      	mov	r1, r7
 8004400:	f7fc fb6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004404:	b918      	cbnz	r0, 800440e <__cvt+0xba>
 8004406:	f1c4 0401 	rsb	r4, r4, #1
 800440a:	f8ca 4000 	str.w	r4, [sl]
 800440e:	f8da 3000 	ldr.w	r3, [sl]
 8004412:	4499      	add	r9, r3
 8004414:	e7d3      	b.n	80043be <__cvt+0x6a>
 8004416:	1c59      	adds	r1, r3, #1
 8004418:	9103      	str	r1, [sp, #12]
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e7d9      	b.n	80043d2 <__cvt+0x7e>

0800441e <__exponent>:
 800441e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004420:	2900      	cmp	r1, #0
 8004422:	bfba      	itte	lt
 8004424:	4249      	neglt	r1, r1
 8004426:	232d      	movlt	r3, #45	@ 0x2d
 8004428:	232b      	movge	r3, #43	@ 0x2b
 800442a:	2909      	cmp	r1, #9
 800442c:	7002      	strb	r2, [r0, #0]
 800442e:	7043      	strb	r3, [r0, #1]
 8004430:	dd29      	ble.n	8004486 <__exponent+0x68>
 8004432:	f10d 0307 	add.w	r3, sp, #7
 8004436:	461d      	mov	r5, r3
 8004438:	270a      	movs	r7, #10
 800443a:	461a      	mov	r2, r3
 800443c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004440:	fb07 1416 	mls	r4, r7, r6, r1
 8004444:	3430      	adds	r4, #48	@ 0x30
 8004446:	f802 4c01 	strb.w	r4, [r2, #-1]
 800444a:	460c      	mov	r4, r1
 800444c:	2c63      	cmp	r4, #99	@ 0x63
 800444e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004452:	4631      	mov	r1, r6
 8004454:	dcf1      	bgt.n	800443a <__exponent+0x1c>
 8004456:	3130      	adds	r1, #48	@ 0x30
 8004458:	1e94      	subs	r4, r2, #2
 800445a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800445e:	1c41      	adds	r1, r0, #1
 8004460:	4623      	mov	r3, r4
 8004462:	42ab      	cmp	r3, r5
 8004464:	d30a      	bcc.n	800447c <__exponent+0x5e>
 8004466:	f10d 0309 	add.w	r3, sp, #9
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	42ac      	cmp	r4, r5
 800446e:	bf88      	it	hi
 8004470:	2300      	movhi	r3, #0
 8004472:	3302      	adds	r3, #2
 8004474:	4403      	add	r3, r0
 8004476:	1a18      	subs	r0, r3, r0
 8004478:	b003      	add	sp, #12
 800447a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800447c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004480:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004484:	e7ed      	b.n	8004462 <__exponent+0x44>
 8004486:	2330      	movs	r3, #48	@ 0x30
 8004488:	3130      	adds	r1, #48	@ 0x30
 800448a:	7083      	strb	r3, [r0, #2]
 800448c:	70c1      	strb	r1, [r0, #3]
 800448e:	1d03      	adds	r3, r0, #4
 8004490:	e7f1      	b.n	8004476 <__exponent+0x58>
	...

08004494 <_printf_float>:
 8004494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004498:	b08d      	sub	sp, #52	@ 0x34
 800449a:	460c      	mov	r4, r1
 800449c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80044a0:	4616      	mov	r6, r2
 80044a2:	461f      	mov	r7, r3
 80044a4:	4605      	mov	r5, r0
 80044a6:	f000 fdf3 	bl	8005090 <_localeconv_r>
 80044aa:	6803      	ldr	r3, [r0, #0]
 80044ac:	9304      	str	r3, [sp, #16]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fb fee6 	bl	8000280 <strlen>
 80044b4:	2300      	movs	r3, #0
 80044b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80044b8:	f8d8 3000 	ldr.w	r3, [r8]
 80044bc:	9005      	str	r0, [sp, #20]
 80044be:	3307      	adds	r3, #7
 80044c0:	f023 0307 	bic.w	r3, r3, #7
 80044c4:	f103 0208 	add.w	r2, r3, #8
 80044c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80044cc:	f8d4 b000 	ldr.w	fp, [r4]
 80044d0:	f8c8 2000 	str.w	r2, [r8]
 80044d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80044dc:	9307      	str	r3, [sp, #28]
 80044de:	f8cd 8018 	str.w	r8, [sp, #24]
 80044e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80044e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044ea:	4b9c      	ldr	r3, [pc, #624]	@ (800475c <_printf_float+0x2c8>)
 80044ec:	f04f 32ff 	mov.w	r2, #4294967295
 80044f0:	f7fc fb24 	bl	8000b3c <__aeabi_dcmpun>
 80044f4:	bb70      	cbnz	r0, 8004554 <_printf_float+0xc0>
 80044f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044fa:	4b98      	ldr	r3, [pc, #608]	@ (800475c <_printf_float+0x2c8>)
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	f7fc fafe 	bl	8000b00 <__aeabi_dcmple>
 8004504:	bb30      	cbnz	r0, 8004554 <_printf_float+0xc0>
 8004506:	2200      	movs	r2, #0
 8004508:	2300      	movs	r3, #0
 800450a:	4640      	mov	r0, r8
 800450c:	4649      	mov	r1, r9
 800450e:	f7fc faed 	bl	8000aec <__aeabi_dcmplt>
 8004512:	b110      	cbz	r0, 800451a <_printf_float+0x86>
 8004514:	232d      	movs	r3, #45	@ 0x2d
 8004516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800451a:	4a91      	ldr	r2, [pc, #580]	@ (8004760 <_printf_float+0x2cc>)
 800451c:	4b91      	ldr	r3, [pc, #580]	@ (8004764 <_printf_float+0x2d0>)
 800451e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004522:	bf94      	ite	ls
 8004524:	4690      	movls	r8, r2
 8004526:	4698      	movhi	r8, r3
 8004528:	2303      	movs	r3, #3
 800452a:	6123      	str	r3, [r4, #16]
 800452c:	f02b 0304 	bic.w	r3, fp, #4
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	f04f 0900 	mov.w	r9, #0
 8004536:	9700      	str	r7, [sp, #0]
 8004538:	4633      	mov	r3, r6
 800453a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800453c:	4621      	mov	r1, r4
 800453e:	4628      	mov	r0, r5
 8004540:	f000 f9d2 	bl	80048e8 <_printf_common>
 8004544:	3001      	adds	r0, #1
 8004546:	f040 808d 	bne.w	8004664 <_printf_float+0x1d0>
 800454a:	f04f 30ff 	mov.w	r0, #4294967295
 800454e:	b00d      	add	sp, #52	@ 0x34
 8004550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	4640      	mov	r0, r8
 800455a:	4649      	mov	r1, r9
 800455c:	f7fc faee 	bl	8000b3c <__aeabi_dcmpun>
 8004560:	b140      	cbz	r0, 8004574 <_printf_float+0xe0>
 8004562:	464b      	mov	r3, r9
 8004564:	2b00      	cmp	r3, #0
 8004566:	bfbc      	itt	lt
 8004568:	232d      	movlt	r3, #45	@ 0x2d
 800456a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800456e:	4a7e      	ldr	r2, [pc, #504]	@ (8004768 <_printf_float+0x2d4>)
 8004570:	4b7e      	ldr	r3, [pc, #504]	@ (800476c <_printf_float+0x2d8>)
 8004572:	e7d4      	b.n	800451e <_printf_float+0x8a>
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800457a:	9206      	str	r2, [sp, #24]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	d13b      	bne.n	80045f8 <_printf_float+0x164>
 8004580:	2306      	movs	r3, #6
 8004582:	6063      	str	r3, [r4, #4]
 8004584:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004588:	2300      	movs	r3, #0
 800458a:	6022      	str	r2, [r4, #0]
 800458c:	9303      	str	r3, [sp, #12]
 800458e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004590:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004594:	ab09      	add	r3, sp, #36	@ 0x24
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	6861      	ldr	r1, [r4, #4]
 800459a:	ec49 8b10 	vmov	d0, r8, r9
 800459e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80045a2:	4628      	mov	r0, r5
 80045a4:	f7ff fed6 	bl	8004354 <__cvt>
 80045a8:	9b06      	ldr	r3, [sp, #24]
 80045aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80045ac:	2b47      	cmp	r3, #71	@ 0x47
 80045ae:	4680      	mov	r8, r0
 80045b0:	d129      	bne.n	8004606 <_printf_float+0x172>
 80045b2:	1cc8      	adds	r0, r1, #3
 80045b4:	db02      	blt.n	80045bc <_printf_float+0x128>
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	4299      	cmp	r1, r3
 80045ba:	dd41      	ble.n	8004640 <_printf_float+0x1ac>
 80045bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80045c0:	fa5f fa8a 	uxtb.w	sl, sl
 80045c4:	3901      	subs	r1, #1
 80045c6:	4652      	mov	r2, sl
 80045c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80045cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80045ce:	f7ff ff26 	bl	800441e <__exponent>
 80045d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045d4:	1813      	adds	r3, r2, r0
 80045d6:	2a01      	cmp	r2, #1
 80045d8:	4681      	mov	r9, r0
 80045da:	6123      	str	r3, [r4, #16]
 80045dc:	dc02      	bgt.n	80045e4 <_printf_float+0x150>
 80045de:	6822      	ldr	r2, [r4, #0]
 80045e0:	07d2      	lsls	r2, r2, #31
 80045e2:	d501      	bpl.n	80045e8 <_printf_float+0x154>
 80045e4:	3301      	adds	r3, #1
 80045e6:	6123      	str	r3, [r4, #16]
 80045e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0a2      	beq.n	8004536 <_printf_float+0xa2>
 80045f0:	232d      	movs	r3, #45	@ 0x2d
 80045f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045f6:	e79e      	b.n	8004536 <_printf_float+0xa2>
 80045f8:	9a06      	ldr	r2, [sp, #24]
 80045fa:	2a47      	cmp	r2, #71	@ 0x47
 80045fc:	d1c2      	bne.n	8004584 <_printf_float+0xf0>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1c0      	bne.n	8004584 <_printf_float+0xf0>
 8004602:	2301      	movs	r3, #1
 8004604:	e7bd      	b.n	8004582 <_printf_float+0xee>
 8004606:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800460a:	d9db      	bls.n	80045c4 <_printf_float+0x130>
 800460c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004610:	d118      	bne.n	8004644 <_printf_float+0x1b0>
 8004612:	2900      	cmp	r1, #0
 8004614:	6863      	ldr	r3, [r4, #4]
 8004616:	dd0b      	ble.n	8004630 <_printf_float+0x19c>
 8004618:	6121      	str	r1, [r4, #16]
 800461a:	b913      	cbnz	r3, 8004622 <_printf_float+0x18e>
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	07d0      	lsls	r0, r2, #31
 8004620:	d502      	bpl.n	8004628 <_printf_float+0x194>
 8004622:	3301      	adds	r3, #1
 8004624:	440b      	add	r3, r1
 8004626:	6123      	str	r3, [r4, #16]
 8004628:	65a1      	str	r1, [r4, #88]	@ 0x58
 800462a:	f04f 0900 	mov.w	r9, #0
 800462e:	e7db      	b.n	80045e8 <_printf_float+0x154>
 8004630:	b913      	cbnz	r3, 8004638 <_printf_float+0x1a4>
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	07d2      	lsls	r2, r2, #31
 8004636:	d501      	bpl.n	800463c <_printf_float+0x1a8>
 8004638:	3302      	adds	r3, #2
 800463a:	e7f4      	b.n	8004626 <_printf_float+0x192>
 800463c:	2301      	movs	r3, #1
 800463e:	e7f2      	b.n	8004626 <_printf_float+0x192>
 8004640:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004646:	4299      	cmp	r1, r3
 8004648:	db05      	blt.n	8004656 <_printf_float+0x1c2>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	6121      	str	r1, [r4, #16]
 800464e:	07d8      	lsls	r0, r3, #31
 8004650:	d5ea      	bpl.n	8004628 <_printf_float+0x194>
 8004652:	1c4b      	adds	r3, r1, #1
 8004654:	e7e7      	b.n	8004626 <_printf_float+0x192>
 8004656:	2900      	cmp	r1, #0
 8004658:	bfd4      	ite	le
 800465a:	f1c1 0202 	rsble	r2, r1, #2
 800465e:	2201      	movgt	r2, #1
 8004660:	4413      	add	r3, r2
 8004662:	e7e0      	b.n	8004626 <_printf_float+0x192>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	055a      	lsls	r2, r3, #21
 8004668:	d407      	bmi.n	800467a <_printf_float+0x1e6>
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	4642      	mov	r2, r8
 800466e:	4631      	mov	r1, r6
 8004670:	4628      	mov	r0, r5
 8004672:	47b8      	blx	r7
 8004674:	3001      	adds	r0, #1
 8004676:	d12b      	bne.n	80046d0 <_printf_float+0x23c>
 8004678:	e767      	b.n	800454a <_printf_float+0xb6>
 800467a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800467e:	f240 80dd 	bls.w	800483c <_printf_float+0x3a8>
 8004682:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004686:	2200      	movs	r2, #0
 8004688:	2300      	movs	r3, #0
 800468a:	f7fc fa25 	bl	8000ad8 <__aeabi_dcmpeq>
 800468e:	2800      	cmp	r0, #0
 8004690:	d033      	beq.n	80046fa <_printf_float+0x266>
 8004692:	4a37      	ldr	r2, [pc, #220]	@ (8004770 <_printf_float+0x2dc>)
 8004694:	2301      	movs	r3, #1
 8004696:	4631      	mov	r1, r6
 8004698:	4628      	mov	r0, r5
 800469a:	47b8      	blx	r7
 800469c:	3001      	adds	r0, #1
 800469e:	f43f af54 	beq.w	800454a <_printf_float+0xb6>
 80046a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80046a6:	4543      	cmp	r3, r8
 80046a8:	db02      	blt.n	80046b0 <_printf_float+0x21c>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	07d8      	lsls	r0, r3, #31
 80046ae:	d50f      	bpl.n	80046d0 <_printf_float+0x23c>
 80046b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b4:	4631      	mov	r1, r6
 80046b6:	4628      	mov	r0, r5
 80046b8:	47b8      	blx	r7
 80046ba:	3001      	adds	r0, #1
 80046bc:	f43f af45 	beq.w	800454a <_printf_float+0xb6>
 80046c0:	f04f 0900 	mov.w	r9, #0
 80046c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80046c8:	f104 0a1a 	add.w	sl, r4, #26
 80046cc:	45c8      	cmp	r8, r9
 80046ce:	dc09      	bgt.n	80046e4 <_printf_float+0x250>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	079b      	lsls	r3, r3, #30
 80046d4:	f100 8103 	bmi.w	80048de <_printf_float+0x44a>
 80046d8:	68e0      	ldr	r0, [r4, #12]
 80046da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046dc:	4298      	cmp	r0, r3
 80046de:	bfb8      	it	lt
 80046e0:	4618      	movlt	r0, r3
 80046e2:	e734      	b.n	800454e <_printf_float+0xba>
 80046e4:	2301      	movs	r3, #1
 80046e6:	4652      	mov	r2, sl
 80046e8:	4631      	mov	r1, r6
 80046ea:	4628      	mov	r0, r5
 80046ec:	47b8      	blx	r7
 80046ee:	3001      	adds	r0, #1
 80046f0:	f43f af2b 	beq.w	800454a <_printf_float+0xb6>
 80046f4:	f109 0901 	add.w	r9, r9, #1
 80046f8:	e7e8      	b.n	80046cc <_printf_float+0x238>
 80046fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	dc39      	bgt.n	8004774 <_printf_float+0x2e0>
 8004700:	4a1b      	ldr	r2, [pc, #108]	@ (8004770 <_printf_float+0x2dc>)
 8004702:	2301      	movs	r3, #1
 8004704:	4631      	mov	r1, r6
 8004706:	4628      	mov	r0, r5
 8004708:	47b8      	blx	r7
 800470a:	3001      	adds	r0, #1
 800470c:	f43f af1d 	beq.w	800454a <_printf_float+0xb6>
 8004710:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004714:	ea59 0303 	orrs.w	r3, r9, r3
 8004718:	d102      	bne.n	8004720 <_printf_float+0x28c>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	07d9      	lsls	r1, r3, #31
 800471e:	d5d7      	bpl.n	80046d0 <_printf_float+0x23c>
 8004720:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004724:	4631      	mov	r1, r6
 8004726:	4628      	mov	r0, r5
 8004728:	47b8      	blx	r7
 800472a:	3001      	adds	r0, #1
 800472c:	f43f af0d 	beq.w	800454a <_printf_float+0xb6>
 8004730:	f04f 0a00 	mov.w	sl, #0
 8004734:	f104 0b1a 	add.w	fp, r4, #26
 8004738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800473a:	425b      	negs	r3, r3
 800473c:	4553      	cmp	r3, sl
 800473e:	dc01      	bgt.n	8004744 <_printf_float+0x2b0>
 8004740:	464b      	mov	r3, r9
 8004742:	e793      	b.n	800466c <_printf_float+0x1d8>
 8004744:	2301      	movs	r3, #1
 8004746:	465a      	mov	r2, fp
 8004748:	4631      	mov	r1, r6
 800474a:	4628      	mov	r0, r5
 800474c:	47b8      	blx	r7
 800474e:	3001      	adds	r0, #1
 8004750:	f43f aefb 	beq.w	800454a <_printf_float+0xb6>
 8004754:	f10a 0a01 	add.w	sl, sl, #1
 8004758:	e7ee      	b.n	8004738 <_printf_float+0x2a4>
 800475a:	bf00      	nop
 800475c:	7fefffff 	.word	0x7fefffff
 8004760:	08008ec4 	.word	0x08008ec4
 8004764:	08008ec8 	.word	0x08008ec8
 8004768:	08008ecc 	.word	0x08008ecc
 800476c:	08008ed0 	.word	0x08008ed0
 8004770:	08008ed4 	.word	0x08008ed4
 8004774:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004776:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800477a:	4553      	cmp	r3, sl
 800477c:	bfa8      	it	ge
 800477e:	4653      	movge	r3, sl
 8004780:	2b00      	cmp	r3, #0
 8004782:	4699      	mov	r9, r3
 8004784:	dc36      	bgt.n	80047f4 <_printf_float+0x360>
 8004786:	f04f 0b00 	mov.w	fp, #0
 800478a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800478e:	f104 021a 	add.w	r2, r4, #26
 8004792:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004794:	9306      	str	r3, [sp, #24]
 8004796:	eba3 0309 	sub.w	r3, r3, r9
 800479a:	455b      	cmp	r3, fp
 800479c:	dc31      	bgt.n	8004802 <_printf_float+0x36e>
 800479e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047a0:	459a      	cmp	sl, r3
 80047a2:	dc3a      	bgt.n	800481a <_printf_float+0x386>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	07da      	lsls	r2, r3, #31
 80047a8:	d437      	bmi.n	800481a <_printf_float+0x386>
 80047aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ac:	ebaa 0903 	sub.w	r9, sl, r3
 80047b0:	9b06      	ldr	r3, [sp, #24]
 80047b2:	ebaa 0303 	sub.w	r3, sl, r3
 80047b6:	4599      	cmp	r9, r3
 80047b8:	bfa8      	it	ge
 80047ba:	4699      	movge	r9, r3
 80047bc:	f1b9 0f00 	cmp.w	r9, #0
 80047c0:	dc33      	bgt.n	800482a <_printf_float+0x396>
 80047c2:	f04f 0800 	mov.w	r8, #0
 80047c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047ca:	f104 0b1a 	add.w	fp, r4, #26
 80047ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047d0:	ebaa 0303 	sub.w	r3, sl, r3
 80047d4:	eba3 0309 	sub.w	r3, r3, r9
 80047d8:	4543      	cmp	r3, r8
 80047da:	f77f af79 	ble.w	80046d0 <_printf_float+0x23c>
 80047de:	2301      	movs	r3, #1
 80047e0:	465a      	mov	r2, fp
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	f43f aeae 	beq.w	800454a <_printf_float+0xb6>
 80047ee:	f108 0801 	add.w	r8, r8, #1
 80047f2:	e7ec      	b.n	80047ce <_printf_float+0x33a>
 80047f4:	4642      	mov	r2, r8
 80047f6:	4631      	mov	r1, r6
 80047f8:	4628      	mov	r0, r5
 80047fa:	47b8      	blx	r7
 80047fc:	3001      	adds	r0, #1
 80047fe:	d1c2      	bne.n	8004786 <_printf_float+0x2f2>
 8004800:	e6a3      	b.n	800454a <_printf_float+0xb6>
 8004802:	2301      	movs	r3, #1
 8004804:	4631      	mov	r1, r6
 8004806:	4628      	mov	r0, r5
 8004808:	9206      	str	r2, [sp, #24]
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	f43f ae9c 	beq.w	800454a <_printf_float+0xb6>
 8004812:	9a06      	ldr	r2, [sp, #24]
 8004814:	f10b 0b01 	add.w	fp, fp, #1
 8004818:	e7bb      	b.n	8004792 <_printf_float+0x2fe>
 800481a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800481e:	4631      	mov	r1, r6
 8004820:	4628      	mov	r0, r5
 8004822:	47b8      	blx	r7
 8004824:	3001      	adds	r0, #1
 8004826:	d1c0      	bne.n	80047aa <_printf_float+0x316>
 8004828:	e68f      	b.n	800454a <_printf_float+0xb6>
 800482a:	9a06      	ldr	r2, [sp, #24]
 800482c:	464b      	mov	r3, r9
 800482e:	4442      	add	r2, r8
 8004830:	4631      	mov	r1, r6
 8004832:	4628      	mov	r0, r5
 8004834:	47b8      	blx	r7
 8004836:	3001      	adds	r0, #1
 8004838:	d1c3      	bne.n	80047c2 <_printf_float+0x32e>
 800483a:	e686      	b.n	800454a <_printf_float+0xb6>
 800483c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004840:	f1ba 0f01 	cmp.w	sl, #1
 8004844:	dc01      	bgt.n	800484a <_printf_float+0x3b6>
 8004846:	07db      	lsls	r3, r3, #31
 8004848:	d536      	bpl.n	80048b8 <_printf_float+0x424>
 800484a:	2301      	movs	r3, #1
 800484c:	4642      	mov	r2, r8
 800484e:	4631      	mov	r1, r6
 8004850:	4628      	mov	r0, r5
 8004852:	47b8      	blx	r7
 8004854:	3001      	adds	r0, #1
 8004856:	f43f ae78 	beq.w	800454a <_printf_float+0xb6>
 800485a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800485e:	4631      	mov	r1, r6
 8004860:	4628      	mov	r0, r5
 8004862:	47b8      	blx	r7
 8004864:	3001      	adds	r0, #1
 8004866:	f43f ae70 	beq.w	800454a <_printf_float+0xb6>
 800486a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800486e:	2200      	movs	r2, #0
 8004870:	2300      	movs	r3, #0
 8004872:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004876:	f7fc f92f 	bl	8000ad8 <__aeabi_dcmpeq>
 800487a:	b9c0      	cbnz	r0, 80048ae <_printf_float+0x41a>
 800487c:	4653      	mov	r3, sl
 800487e:	f108 0201 	add.w	r2, r8, #1
 8004882:	4631      	mov	r1, r6
 8004884:	4628      	mov	r0, r5
 8004886:	47b8      	blx	r7
 8004888:	3001      	adds	r0, #1
 800488a:	d10c      	bne.n	80048a6 <_printf_float+0x412>
 800488c:	e65d      	b.n	800454a <_printf_float+0xb6>
 800488e:	2301      	movs	r3, #1
 8004890:	465a      	mov	r2, fp
 8004892:	4631      	mov	r1, r6
 8004894:	4628      	mov	r0, r5
 8004896:	47b8      	blx	r7
 8004898:	3001      	adds	r0, #1
 800489a:	f43f ae56 	beq.w	800454a <_printf_float+0xb6>
 800489e:	f108 0801 	add.w	r8, r8, #1
 80048a2:	45d0      	cmp	r8, sl
 80048a4:	dbf3      	blt.n	800488e <_printf_float+0x3fa>
 80048a6:	464b      	mov	r3, r9
 80048a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80048ac:	e6df      	b.n	800466e <_printf_float+0x1da>
 80048ae:	f04f 0800 	mov.w	r8, #0
 80048b2:	f104 0b1a 	add.w	fp, r4, #26
 80048b6:	e7f4      	b.n	80048a2 <_printf_float+0x40e>
 80048b8:	2301      	movs	r3, #1
 80048ba:	4642      	mov	r2, r8
 80048bc:	e7e1      	b.n	8004882 <_printf_float+0x3ee>
 80048be:	2301      	movs	r3, #1
 80048c0:	464a      	mov	r2, r9
 80048c2:	4631      	mov	r1, r6
 80048c4:	4628      	mov	r0, r5
 80048c6:	47b8      	blx	r7
 80048c8:	3001      	adds	r0, #1
 80048ca:	f43f ae3e 	beq.w	800454a <_printf_float+0xb6>
 80048ce:	f108 0801 	add.w	r8, r8, #1
 80048d2:	68e3      	ldr	r3, [r4, #12]
 80048d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048d6:	1a5b      	subs	r3, r3, r1
 80048d8:	4543      	cmp	r3, r8
 80048da:	dcf0      	bgt.n	80048be <_printf_float+0x42a>
 80048dc:	e6fc      	b.n	80046d8 <_printf_float+0x244>
 80048de:	f04f 0800 	mov.w	r8, #0
 80048e2:	f104 0919 	add.w	r9, r4, #25
 80048e6:	e7f4      	b.n	80048d2 <_printf_float+0x43e>

080048e8 <_printf_common>:
 80048e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ec:	4616      	mov	r6, r2
 80048ee:	4698      	mov	r8, r3
 80048f0:	688a      	ldr	r2, [r1, #8]
 80048f2:	690b      	ldr	r3, [r1, #16]
 80048f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048f8:	4293      	cmp	r3, r2
 80048fa:	bfb8      	it	lt
 80048fc:	4613      	movlt	r3, r2
 80048fe:	6033      	str	r3, [r6, #0]
 8004900:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004904:	4607      	mov	r7, r0
 8004906:	460c      	mov	r4, r1
 8004908:	b10a      	cbz	r2, 800490e <_printf_common+0x26>
 800490a:	3301      	adds	r3, #1
 800490c:	6033      	str	r3, [r6, #0]
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	0699      	lsls	r1, r3, #26
 8004912:	bf42      	ittt	mi
 8004914:	6833      	ldrmi	r3, [r6, #0]
 8004916:	3302      	addmi	r3, #2
 8004918:	6033      	strmi	r3, [r6, #0]
 800491a:	6825      	ldr	r5, [r4, #0]
 800491c:	f015 0506 	ands.w	r5, r5, #6
 8004920:	d106      	bne.n	8004930 <_printf_common+0x48>
 8004922:	f104 0a19 	add.w	sl, r4, #25
 8004926:	68e3      	ldr	r3, [r4, #12]
 8004928:	6832      	ldr	r2, [r6, #0]
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	42ab      	cmp	r3, r5
 800492e:	dc26      	bgt.n	800497e <_printf_common+0x96>
 8004930:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004934:	6822      	ldr	r2, [r4, #0]
 8004936:	3b00      	subs	r3, #0
 8004938:	bf18      	it	ne
 800493a:	2301      	movne	r3, #1
 800493c:	0692      	lsls	r2, r2, #26
 800493e:	d42b      	bmi.n	8004998 <_printf_common+0xb0>
 8004940:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004944:	4641      	mov	r1, r8
 8004946:	4638      	mov	r0, r7
 8004948:	47c8      	blx	r9
 800494a:	3001      	adds	r0, #1
 800494c:	d01e      	beq.n	800498c <_printf_common+0xa4>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	6922      	ldr	r2, [r4, #16]
 8004952:	f003 0306 	and.w	r3, r3, #6
 8004956:	2b04      	cmp	r3, #4
 8004958:	bf02      	ittt	eq
 800495a:	68e5      	ldreq	r5, [r4, #12]
 800495c:	6833      	ldreq	r3, [r6, #0]
 800495e:	1aed      	subeq	r5, r5, r3
 8004960:	68a3      	ldr	r3, [r4, #8]
 8004962:	bf0c      	ite	eq
 8004964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004968:	2500      	movne	r5, #0
 800496a:	4293      	cmp	r3, r2
 800496c:	bfc4      	itt	gt
 800496e:	1a9b      	subgt	r3, r3, r2
 8004970:	18ed      	addgt	r5, r5, r3
 8004972:	2600      	movs	r6, #0
 8004974:	341a      	adds	r4, #26
 8004976:	42b5      	cmp	r5, r6
 8004978:	d11a      	bne.n	80049b0 <_printf_common+0xc8>
 800497a:	2000      	movs	r0, #0
 800497c:	e008      	b.n	8004990 <_printf_common+0xa8>
 800497e:	2301      	movs	r3, #1
 8004980:	4652      	mov	r2, sl
 8004982:	4641      	mov	r1, r8
 8004984:	4638      	mov	r0, r7
 8004986:	47c8      	blx	r9
 8004988:	3001      	adds	r0, #1
 800498a:	d103      	bne.n	8004994 <_printf_common+0xac>
 800498c:	f04f 30ff 	mov.w	r0, #4294967295
 8004990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004994:	3501      	adds	r5, #1
 8004996:	e7c6      	b.n	8004926 <_printf_common+0x3e>
 8004998:	18e1      	adds	r1, r4, r3
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	2030      	movs	r0, #48	@ 0x30
 800499e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049a2:	4422      	add	r2, r4
 80049a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049ac:	3302      	adds	r3, #2
 80049ae:	e7c7      	b.n	8004940 <_printf_common+0x58>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4622      	mov	r2, r4
 80049b4:	4641      	mov	r1, r8
 80049b6:	4638      	mov	r0, r7
 80049b8:	47c8      	blx	r9
 80049ba:	3001      	adds	r0, #1
 80049bc:	d0e6      	beq.n	800498c <_printf_common+0xa4>
 80049be:	3601      	adds	r6, #1
 80049c0:	e7d9      	b.n	8004976 <_printf_common+0x8e>
	...

080049c4 <_printf_i>:
 80049c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c8:	7e0f      	ldrb	r7, [r1, #24]
 80049ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049cc:	2f78      	cmp	r7, #120	@ 0x78
 80049ce:	4691      	mov	r9, r2
 80049d0:	4680      	mov	r8, r0
 80049d2:	460c      	mov	r4, r1
 80049d4:	469a      	mov	sl, r3
 80049d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049da:	d807      	bhi.n	80049ec <_printf_i+0x28>
 80049dc:	2f62      	cmp	r7, #98	@ 0x62
 80049de:	d80a      	bhi.n	80049f6 <_printf_i+0x32>
 80049e0:	2f00      	cmp	r7, #0
 80049e2:	f000 80d2 	beq.w	8004b8a <_printf_i+0x1c6>
 80049e6:	2f58      	cmp	r7, #88	@ 0x58
 80049e8:	f000 80b9 	beq.w	8004b5e <_printf_i+0x19a>
 80049ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049f4:	e03a      	b.n	8004a6c <_printf_i+0xa8>
 80049f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049fa:	2b15      	cmp	r3, #21
 80049fc:	d8f6      	bhi.n	80049ec <_printf_i+0x28>
 80049fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004a04 <_printf_i+0x40>)
 8004a00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a04:	08004a5d 	.word	0x08004a5d
 8004a08:	08004a71 	.word	0x08004a71
 8004a0c:	080049ed 	.word	0x080049ed
 8004a10:	080049ed 	.word	0x080049ed
 8004a14:	080049ed 	.word	0x080049ed
 8004a18:	080049ed 	.word	0x080049ed
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	080049ed 	.word	0x080049ed
 8004a24:	080049ed 	.word	0x080049ed
 8004a28:	080049ed 	.word	0x080049ed
 8004a2c:	080049ed 	.word	0x080049ed
 8004a30:	08004b71 	.word	0x08004b71
 8004a34:	08004a9b 	.word	0x08004a9b
 8004a38:	08004b2b 	.word	0x08004b2b
 8004a3c:	080049ed 	.word	0x080049ed
 8004a40:	080049ed 	.word	0x080049ed
 8004a44:	08004b93 	.word	0x08004b93
 8004a48:	080049ed 	.word	0x080049ed
 8004a4c:	08004a9b 	.word	0x08004a9b
 8004a50:	080049ed 	.word	0x080049ed
 8004a54:	080049ed 	.word	0x080049ed
 8004a58:	08004b33 	.word	0x08004b33
 8004a5c:	6833      	ldr	r3, [r6, #0]
 8004a5e:	1d1a      	adds	r2, r3, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6032      	str	r2, [r6, #0]
 8004a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e09d      	b.n	8004bac <_printf_i+0x1e8>
 8004a70:	6833      	ldr	r3, [r6, #0]
 8004a72:	6820      	ldr	r0, [r4, #0]
 8004a74:	1d19      	adds	r1, r3, #4
 8004a76:	6031      	str	r1, [r6, #0]
 8004a78:	0606      	lsls	r6, r0, #24
 8004a7a:	d501      	bpl.n	8004a80 <_printf_i+0xbc>
 8004a7c:	681d      	ldr	r5, [r3, #0]
 8004a7e:	e003      	b.n	8004a88 <_printf_i+0xc4>
 8004a80:	0645      	lsls	r5, r0, #25
 8004a82:	d5fb      	bpl.n	8004a7c <_printf_i+0xb8>
 8004a84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	da03      	bge.n	8004a94 <_printf_i+0xd0>
 8004a8c:	232d      	movs	r3, #45	@ 0x2d
 8004a8e:	426d      	negs	r5, r5
 8004a90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a94:	4859      	ldr	r0, [pc, #356]	@ (8004bfc <_printf_i+0x238>)
 8004a96:	230a      	movs	r3, #10
 8004a98:	e011      	b.n	8004abe <_printf_i+0xfa>
 8004a9a:	6821      	ldr	r1, [r4, #0]
 8004a9c:	6833      	ldr	r3, [r6, #0]
 8004a9e:	0608      	lsls	r0, r1, #24
 8004aa0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004aa4:	d402      	bmi.n	8004aac <_printf_i+0xe8>
 8004aa6:	0649      	lsls	r1, r1, #25
 8004aa8:	bf48      	it	mi
 8004aaa:	b2ad      	uxthmi	r5, r5
 8004aac:	2f6f      	cmp	r7, #111	@ 0x6f
 8004aae:	4853      	ldr	r0, [pc, #332]	@ (8004bfc <_printf_i+0x238>)
 8004ab0:	6033      	str	r3, [r6, #0]
 8004ab2:	bf14      	ite	ne
 8004ab4:	230a      	movne	r3, #10
 8004ab6:	2308      	moveq	r3, #8
 8004ab8:	2100      	movs	r1, #0
 8004aba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004abe:	6866      	ldr	r6, [r4, #4]
 8004ac0:	60a6      	str	r6, [r4, #8]
 8004ac2:	2e00      	cmp	r6, #0
 8004ac4:	bfa2      	ittt	ge
 8004ac6:	6821      	ldrge	r1, [r4, #0]
 8004ac8:	f021 0104 	bicge.w	r1, r1, #4
 8004acc:	6021      	strge	r1, [r4, #0]
 8004ace:	b90d      	cbnz	r5, 8004ad4 <_printf_i+0x110>
 8004ad0:	2e00      	cmp	r6, #0
 8004ad2:	d04b      	beq.n	8004b6c <_printf_i+0x1a8>
 8004ad4:	4616      	mov	r6, r2
 8004ad6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ada:	fb03 5711 	mls	r7, r3, r1, r5
 8004ade:	5dc7      	ldrb	r7, [r0, r7]
 8004ae0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ae4:	462f      	mov	r7, r5
 8004ae6:	42bb      	cmp	r3, r7
 8004ae8:	460d      	mov	r5, r1
 8004aea:	d9f4      	bls.n	8004ad6 <_printf_i+0x112>
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d10b      	bne.n	8004b08 <_printf_i+0x144>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	07df      	lsls	r7, r3, #31
 8004af4:	d508      	bpl.n	8004b08 <_printf_i+0x144>
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	6861      	ldr	r1, [r4, #4]
 8004afa:	4299      	cmp	r1, r3
 8004afc:	bfde      	ittt	le
 8004afe:	2330      	movle	r3, #48	@ 0x30
 8004b00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b08:	1b92      	subs	r2, r2, r6
 8004b0a:	6122      	str	r2, [r4, #16]
 8004b0c:	f8cd a000 	str.w	sl, [sp]
 8004b10:	464b      	mov	r3, r9
 8004b12:	aa03      	add	r2, sp, #12
 8004b14:	4621      	mov	r1, r4
 8004b16:	4640      	mov	r0, r8
 8004b18:	f7ff fee6 	bl	80048e8 <_printf_common>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d14a      	bne.n	8004bb6 <_printf_i+0x1f2>
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	b004      	add	sp, #16
 8004b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	f043 0320 	orr.w	r3, r3, #32
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	4833      	ldr	r0, [pc, #204]	@ (8004c00 <_printf_i+0x23c>)
 8004b34:	2778      	movs	r7, #120	@ 0x78
 8004b36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	6831      	ldr	r1, [r6, #0]
 8004b3e:	061f      	lsls	r7, r3, #24
 8004b40:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b44:	d402      	bmi.n	8004b4c <_printf_i+0x188>
 8004b46:	065f      	lsls	r7, r3, #25
 8004b48:	bf48      	it	mi
 8004b4a:	b2ad      	uxthmi	r5, r5
 8004b4c:	6031      	str	r1, [r6, #0]
 8004b4e:	07d9      	lsls	r1, r3, #31
 8004b50:	bf44      	itt	mi
 8004b52:	f043 0320 	orrmi.w	r3, r3, #32
 8004b56:	6023      	strmi	r3, [r4, #0]
 8004b58:	b11d      	cbz	r5, 8004b62 <_printf_i+0x19e>
 8004b5a:	2310      	movs	r3, #16
 8004b5c:	e7ac      	b.n	8004ab8 <_printf_i+0xf4>
 8004b5e:	4827      	ldr	r0, [pc, #156]	@ (8004bfc <_printf_i+0x238>)
 8004b60:	e7e9      	b.n	8004b36 <_printf_i+0x172>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	f023 0320 	bic.w	r3, r3, #32
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	e7f6      	b.n	8004b5a <_printf_i+0x196>
 8004b6c:	4616      	mov	r6, r2
 8004b6e:	e7bd      	b.n	8004aec <_printf_i+0x128>
 8004b70:	6833      	ldr	r3, [r6, #0]
 8004b72:	6825      	ldr	r5, [r4, #0]
 8004b74:	6961      	ldr	r1, [r4, #20]
 8004b76:	1d18      	adds	r0, r3, #4
 8004b78:	6030      	str	r0, [r6, #0]
 8004b7a:	062e      	lsls	r6, r5, #24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	d501      	bpl.n	8004b84 <_printf_i+0x1c0>
 8004b80:	6019      	str	r1, [r3, #0]
 8004b82:	e002      	b.n	8004b8a <_printf_i+0x1c6>
 8004b84:	0668      	lsls	r0, r5, #25
 8004b86:	d5fb      	bpl.n	8004b80 <_printf_i+0x1bc>
 8004b88:	8019      	strh	r1, [r3, #0]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	4616      	mov	r6, r2
 8004b90:	e7bc      	b.n	8004b0c <_printf_i+0x148>
 8004b92:	6833      	ldr	r3, [r6, #0]
 8004b94:	1d1a      	adds	r2, r3, #4
 8004b96:	6032      	str	r2, [r6, #0]
 8004b98:	681e      	ldr	r6, [r3, #0]
 8004b9a:	6862      	ldr	r2, [r4, #4]
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f7fb fb1e 	bl	80001e0 <memchr>
 8004ba4:	b108      	cbz	r0, 8004baa <_printf_i+0x1e6>
 8004ba6:	1b80      	subs	r0, r0, r6
 8004ba8:	6060      	str	r0, [r4, #4]
 8004baa:	6863      	ldr	r3, [r4, #4]
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bb4:	e7aa      	b.n	8004b0c <_printf_i+0x148>
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	4632      	mov	r2, r6
 8004bba:	4649      	mov	r1, r9
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	47d0      	blx	sl
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d0ad      	beq.n	8004b20 <_printf_i+0x15c>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	079b      	lsls	r3, r3, #30
 8004bc8:	d413      	bmi.n	8004bf2 <_printf_i+0x22e>
 8004bca:	68e0      	ldr	r0, [r4, #12]
 8004bcc:	9b03      	ldr	r3, [sp, #12]
 8004bce:	4298      	cmp	r0, r3
 8004bd0:	bfb8      	it	lt
 8004bd2:	4618      	movlt	r0, r3
 8004bd4:	e7a6      	b.n	8004b24 <_printf_i+0x160>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4632      	mov	r2, r6
 8004bda:	4649      	mov	r1, r9
 8004bdc:	4640      	mov	r0, r8
 8004bde:	47d0      	blx	sl
 8004be0:	3001      	adds	r0, #1
 8004be2:	d09d      	beq.n	8004b20 <_printf_i+0x15c>
 8004be4:	3501      	adds	r5, #1
 8004be6:	68e3      	ldr	r3, [r4, #12]
 8004be8:	9903      	ldr	r1, [sp, #12]
 8004bea:	1a5b      	subs	r3, r3, r1
 8004bec:	42ab      	cmp	r3, r5
 8004bee:	dcf2      	bgt.n	8004bd6 <_printf_i+0x212>
 8004bf0:	e7eb      	b.n	8004bca <_printf_i+0x206>
 8004bf2:	2500      	movs	r5, #0
 8004bf4:	f104 0619 	add.w	r6, r4, #25
 8004bf8:	e7f5      	b.n	8004be6 <_printf_i+0x222>
 8004bfa:	bf00      	nop
 8004bfc:	08008ed6 	.word	0x08008ed6
 8004c00:	08008ee7 	.word	0x08008ee7

08004c04 <std>:
 8004c04:	2300      	movs	r3, #0
 8004c06:	b510      	push	{r4, lr}
 8004c08:	4604      	mov	r4, r0
 8004c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c12:	6083      	str	r3, [r0, #8]
 8004c14:	8181      	strh	r1, [r0, #12]
 8004c16:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c18:	81c2      	strh	r2, [r0, #14]
 8004c1a:	6183      	str	r3, [r0, #24]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	2208      	movs	r2, #8
 8004c20:	305c      	adds	r0, #92	@ 0x5c
 8004c22:	f000 fa2d 	bl	8005080 <memset>
 8004c26:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <std+0x58>)
 8004c28:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <std+0x5c>)
 8004c2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c64 <std+0x60>)
 8004c30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c32:	4b0d      	ldr	r3, [pc, #52]	@ (8004c68 <std+0x64>)
 8004c34:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c36:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <std+0x68>)
 8004c38:	6224      	str	r4, [r4, #32]
 8004c3a:	429c      	cmp	r4, r3
 8004c3c:	d006      	beq.n	8004c4c <std+0x48>
 8004c3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c42:	4294      	cmp	r4, r2
 8004c44:	d002      	beq.n	8004c4c <std+0x48>
 8004c46:	33d0      	adds	r3, #208	@ 0xd0
 8004c48:	429c      	cmp	r4, r3
 8004c4a:	d105      	bne.n	8004c58 <std+0x54>
 8004c4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c54:	f000 baa0 	b.w	8005198 <__retarget_lock_init_recursive>
 8004c58:	bd10      	pop	{r4, pc}
 8004c5a:	bf00      	nop
 8004c5c:	08004ed1 	.word	0x08004ed1
 8004c60:	08004ef3 	.word	0x08004ef3
 8004c64:	08004f2b 	.word	0x08004f2b
 8004c68:	08004f4f 	.word	0x08004f4f
 8004c6c:	200002ec 	.word	0x200002ec

08004c70 <stdio_exit_handler>:
 8004c70:	4a02      	ldr	r2, [pc, #8]	@ (8004c7c <stdio_exit_handler+0xc>)
 8004c72:	4903      	ldr	r1, [pc, #12]	@ (8004c80 <stdio_exit_handler+0x10>)
 8004c74:	4803      	ldr	r0, [pc, #12]	@ (8004c84 <stdio_exit_handler+0x14>)
 8004c76:	f000 b869 	b.w	8004d4c <_fwalk_sglue>
 8004c7a:	bf00      	nop
 8004c7c:	2000003c 	.word	0x2000003c
 8004c80:	08006c0d 	.word	0x08006c0d
 8004c84:	2000004c 	.word	0x2000004c

08004c88 <cleanup_stdio>:
 8004c88:	6841      	ldr	r1, [r0, #4]
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cbc <cleanup_stdio+0x34>)
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	b510      	push	{r4, lr}
 8004c90:	4604      	mov	r4, r0
 8004c92:	d001      	beq.n	8004c98 <cleanup_stdio+0x10>
 8004c94:	f001 ffba 	bl	8006c0c <_fflush_r>
 8004c98:	68a1      	ldr	r1, [r4, #8]
 8004c9a:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <cleanup_stdio+0x38>)
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	d002      	beq.n	8004ca6 <cleanup_stdio+0x1e>
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f001 ffb3 	bl	8006c0c <_fflush_r>
 8004ca6:	68e1      	ldr	r1, [r4, #12]
 8004ca8:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <cleanup_stdio+0x3c>)
 8004caa:	4299      	cmp	r1, r3
 8004cac:	d004      	beq.n	8004cb8 <cleanup_stdio+0x30>
 8004cae:	4620      	mov	r0, r4
 8004cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb4:	f001 bfaa 	b.w	8006c0c <_fflush_r>
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	bf00      	nop
 8004cbc:	200002ec 	.word	0x200002ec
 8004cc0:	20000354 	.word	0x20000354
 8004cc4:	200003bc 	.word	0x200003bc

08004cc8 <global_stdio_init.part.0>:
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <global_stdio_init.part.0+0x30>)
 8004ccc:	4c0b      	ldr	r4, [pc, #44]	@ (8004cfc <global_stdio_init.part.0+0x34>)
 8004cce:	4a0c      	ldr	r2, [pc, #48]	@ (8004d00 <global_stdio_init.part.0+0x38>)
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2104      	movs	r1, #4
 8004cd8:	f7ff ff94 	bl	8004c04 <std>
 8004cdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	2109      	movs	r1, #9
 8004ce4:	f7ff ff8e 	bl	8004c04 <std>
 8004ce8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cec:	2202      	movs	r2, #2
 8004cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf2:	2112      	movs	r1, #18
 8004cf4:	f7ff bf86 	b.w	8004c04 <std>
 8004cf8:	20000424 	.word	0x20000424
 8004cfc:	200002ec 	.word	0x200002ec
 8004d00:	08004c71 	.word	0x08004c71

08004d04 <__sfp_lock_acquire>:
 8004d04:	4801      	ldr	r0, [pc, #4]	@ (8004d0c <__sfp_lock_acquire+0x8>)
 8004d06:	f000 ba48 	b.w	800519a <__retarget_lock_acquire_recursive>
 8004d0a:	bf00      	nop
 8004d0c:	2000042d 	.word	0x2000042d

08004d10 <__sfp_lock_release>:
 8004d10:	4801      	ldr	r0, [pc, #4]	@ (8004d18 <__sfp_lock_release+0x8>)
 8004d12:	f000 ba43 	b.w	800519c <__retarget_lock_release_recursive>
 8004d16:	bf00      	nop
 8004d18:	2000042d 	.word	0x2000042d

08004d1c <__sinit>:
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	4604      	mov	r4, r0
 8004d20:	f7ff fff0 	bl	8004d04 <__sfp_lock_acquire>
 8004d24:	6a23      	ldr	r3, [r4, #32]
 8004d26:	b11b      	cbz	r3, 8004d30 <__sinit+0x14>
 8004d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d2c:	f7ff bff0 	b.w	8004d10 <__sfp_lock_release>
 8004d30:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <__sinit+0x28>)
 8004d32:	6223      	str	r3, [r4, #32]
 8004d34:	4b04      	ldr	r3, [pc, #16]	@ (8004d48 <__sinit+0x2c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f5      	bne.n	8004d28 <__sinit+0xc>
 8004d3c:	f7ff ffc4 	bl	8004cc8 <global_stdio_init.part.0>
 8004d40:	e7f2      	b.n	8004d28 <__sinit+0xc>
 8004d42:	bf00      	nop
 8004d44:	08004c89 	.word	0x08004c89
 8004d48:	20000424 	.word	0x20000424

08004d4c <_fwalk_sglue>:
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	4607      	mov	r7, r0
 8004d52:	4688      	mov	r8, r1
 8004d54:	4614      	mov	r4, r2
 8004d56:	2600      	movs	r6, #0
 8004d58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d5c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d60:	d505      	bpl.n	8004d6e <_fwalk_sglue+0x22>
 8004d62:	6824      	ldr	r4, [r4, #0]
 8004d64:	2c00      	cmp	r4, #0
 8004d66:	d1f7      	bne.n	8004d58 <_fwalk_sglue+0xc>
 8004d68:	4630      	mov	r0, r6
 8004d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d6e:	89ab      	ldrh	r3, [r5, #12]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d907      	bls.n	8004d84 <_fwalk_sglue+0x38>
 8004d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	d003      	beq.n	8004d84 <_fwalk_sglue+0x38>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4638      	mov	r0, r7
 8004d80:	47c0      	blx	r8
 8004d82:	4306      	orrs	r6, r0
 8004d84:	3568      	adds	r5, #104	@ 0x68
 8004d86:	e7e9      	b.n	8004d5c <_fwalk_sglue+0x10>

08004d88 <iprintf>:
 8004d88:	b40f      	push	{r0, r1, r2, r3}
 8004d8a:	b507      	push	{r0, r1, r2, lr}
 8004d8c:	4906      	ldr	r1, [pc, #24]	@ (8004da8 <iprintf+0x20>)
 8004d8e:	ab04      	add	r3, sp, #16
 8004d90:	6808      	ldr	r0, [r1, #0]
 8004d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d96:	6881      	ldr	r1, [r0, #8]
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	f001 fd9b 	bl	80068d4 <_vfiprintf_r>
 8004d9e:	b003      	add	sp, #12
 8004da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da4:	b004      	add	sp, #16
 8004da6:	4770      	bx	lr
 8004da8:	20000048 	.word	0x20000048

08004dac <_puts_r>:
 8004dac:	6a03      	ldr	r3, [r0, #32]
 8004dae:	b570      	push	{r4, r5, r6, lr}
 8004db0:	6884      	ldr	r4, [r0, #8]
 8004db2:	4605      	mov	r5, r0
 8004db4:	460e      	mov	r6, r1
 8004db6:	b90b      	cbnz	r3, 8004dbc <_puts_r+0x10>
 8004db8:	f7ff ffb0 	bl	8004d1c <__sinit>
 8004dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dbe:	07db      	lsls	r3, r3, #31
 8004dc0:	d405      	bmi.n	8004dce <_puts_r+0x22>
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	0598      	lsls	r0, r3, #22
 8004dc6:	d402      	bmi.n	8004dce <_puts_r+0x22>
 8004dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dca:	f000 f9e6 	bl	800519a <__retarget_lock_acquire_recursive>
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	0719      	lsls	r1, r3, #28
 8004dd2:	d502      	bpl.n	8004dda <_puts_r+0x2e>
 8004dd4:	6923      	ldr	r3, [r4, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d135      	bne.n	8004e46 <_puts_r+0x9a>
 8004dda:	4621      	mov	r1, r4
 8004ddc:	4628      	mov	r0, r5
 8004dde:	f000 f8f9 	bl	8004fd4 <__swsetup_r>
 8004de2:	b380      	cbz	r0, 8004e46 <_puts_r+0x9a>
 8004de4:	f04f 35ff 	mov.w	r5, #4294967295
 8004de8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dea:	07da      	lsls	r2, r3, #31
 8004dec:	d405      	bmi.n	8004dfa <_puts_r+0x4e>
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	059b      	lsls	r3, r3, #22
 8004df2:	d402      	bmi.n	8004dfa <_puts_r+0x4e>
 8004df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004df6:	f000 f9d1 	bl	800519c <__retarget_lock_release_recursive>
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	bd70      	pop	{r4, r5, r6, pc}
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da04      	bge.n	8004e0c <_puts_r+0x60>
 8004e02:	69a2      	ldr	r2, [r4, #24]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	dc17      	bgt.n	8004e38 <_puts_r+0x8c>
 8004e08:	290a      	cmp	r1, #10
 8004e0a:	d015      	beq.n	8004e38 <_puts_r+0x8c>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	6022      	str	r2, [r4, #0]
 8004e12:	7019      	strb	r1, [r3, #0]
 8004e14:	68a3      	ldr	r3, [r4, #8]
 8004e16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	60a3      	str	r3, [r4, #8]
 8004e1e:	2900      	cmp	r1, #0
 8004e20:	d1ed      	bne.n	8004dfe <_puts_r+0x52>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da11      	bge.n	8004e4a <_puts_r+0x9e>
 8004e26:	4622      	mov	r2, r4
 8004e28:	210a      	movs	r1, #10
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f000 f893 	bl	8004f56 <__swbuf_r>
 8004e30:	3001      	adds	r0, #1
 8004e32:	d0d7      	beq.n	8004de4 <_puts_r+0x38>
 8004e34:	250a      	movs	r5, #10
 8004e36:	e7d7      	b.n	8004de8 <_puts_r+0x3c>
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 f88b 	bl	8004f56 <__swbuf_r>
 8004e40:	3001      	adds	r0, #1
 8004e42:	d1e7      	bne.n	8004e14 <_puts_r+0x68>
 8004e44:	e7ce      	b.n	8004de4 <_puts_r+0x38>
 8004e46:	3e01      	subs	r6, #1
 8004e48:	e7e4      	b.n	8004e14 <_puts_r+0x68>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	6022      	str	r2, [r4, #0]
 8004e50:	220a      	movs	r2, #10
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e7ee      	b.n	8004e34 <_puts_r+0x88>
	...

08004e58 <puts>:
 8004e58:	4b02      	ldr	r3, [pc, #8]	@ (8004e64 <puts+0xc>)
 8004e5a:	4601      	mov	r1, r0
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	f7ff bfa5 	b.w	8004dac <_puts_r>
 8004e62:	bf00      	nop
 8004e64:	20000048 	.word	0x20000048

08004e68 <sniprintf>:
 8004e68:	b40c      	push	{r2, r3}
 8004e6a:	b530      	push	{r4, r5, lr}
 8004e6c:	4b17      	ldr	r3, [pc, #92]	@ (8004ecc <sniprintf+0x64>)
 8004e6e:	1e0c      	subs	r4, r1, #0
 8004e70:	681d      	ldr	r5, [r3, #0]
 8004e72:	b09d      	sub	sp, #116	@ 0x74
 8004e74:	da08      	bge.n	8004e88 <sniprintf+0x20>
 8004e76:	238b      	movs	r3, #139	@ 0x8b
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7e:	b01d      	add	sp, #116	@ 0x74
 8004e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e84:	b002      	add	sp, #8
 8004e86:	4770      	bx	lr
 8004e88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004e8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004e90:	bf14      	ite	ne
 8004e92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004e96:	4623      	moveq	r3, r4
 8004e98:	9304      	str	r3, [sp, #16]
 8004e9a:	9307      	str	r3, [sp, #28]
 8004e9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ea0:	9002      	str	r0, [sp, #8]
 8004ea2:	9006      	str	r0, [sp, #24]
 8004ea4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ea8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004eaa:	ab21      	add	r3, sp, #132	@ 0x84
 8004eac:	a902      	add	r1, sp, #8
 8004eae:	4628      	mov	r0, r5
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	f001 fbe9 	bl	8006688 <_svfiprintf_r>
 8004eb6:	1c43      	adds	r3, r0, #1
 8004eb8:	bfbc      	itt	lt
 8004eba:	238b      	movlt	r3, #139	@ 0x8b
 8004ebc:	602b      	strlt	r3, [r5, #0]
 8004ebe:	2c00      	cmp	r4, #0
 8004ec0:	d0dd      	beq.n	8004e7e <sniprintf+0x16>
 8004ec2:	9b02      	ldr	r3, [sp, #8]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	e7d9      	b.n	8004e7e <sniprintf+0x16>
 8004eca:	bf00      	nop
 8004ecc:	20000048 	.word	0x20000048

08004ed0 <__sread>:
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed8:	f000 f900 	bl	80050dc <_read_r>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	bfab      	itete	ge
 8004ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ee4:	181b      	addge	r3, r3, r0
 8004ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004eea:	bfac      	ite	ge
 8004eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004eee:	81a3      	strhlt	r3, [r4, #12]
 8004ef0:	bd10      	pop	{r4, pc}

08004ef2 <__swrite>:
 8004ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef6:	461f      	mov	r7, r3
 8004ef8:	898b      	ldrh	r3, [r1, #12]
 8004efa:	05db      	lsls	r3, r3, #23
 8004efc:	4605      	mov	r5, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	4616      	mov	r6, r2
 8004f02:	d505      	bpl.n	8004f10 <__swrite+0x1e>
 8004f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f08:	2302      	movs	r3, #2
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f000 f8d4 	bl	80050b8 <_lseek_r>
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f1a:	81a3      	strh	r3, [r4, #12]
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	463b      	mov	r3, r7
 8004f20:	4628      	mov	r0, r5
 8004f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f26:	f000 b8fb 	b.w	8005120 <_write_r>

08004f2a <__sseek>:
 8004f2a:	b510      	push	{r4, lr}
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f32:	f000 f8c1 	bl	80050b8 <_lseek_r>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	bf15      	itete	ne
 8004f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f46:	81a3      	strheq	r3, [r4, #12]
 8004f48:	bf18      	it	ne
 8004f4a:	81a3      	strhne	r3, [r4, #12]
 8004f4c:	bd10      	pop	{r4, pc}

08004f4e <__sclose>:
 8004f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f52:	f000 b8a1 	b.w	8005098 <_close_r>

08004f56 <__swbuf_r>:
 8004f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f58:	460e      	mov	r6, r1
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	b118      	cbz	r0, 8004f68 <__swbuf_r+0x12>
 8004f60:	6a03      	ldr	r3, [r0, #32]
 8004f62:	b90b      	cbnz	r3, 8004f68 <__swbuf_r+0x12>
 8004f64:	f7ff feda 	bl	8004d1c <__sinit>
 8004f68:	69a3      	ldr	r3, [r4, #24]
 8004f6a:	60a3      	str	r3, [r4, #8]
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	071a      	lsls	r2, r3, #28
 8004f70:	d501      	bpl.n	8004f76 <__swbuf_r+0x20>
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	b943      	cbnz	r3, 8004f88 <__swbuf_r+0x32>
 8004f76:	4621      	mov	r1, r4
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f000 f82b 	bl	8004fd4 <__swsetup_r>
 8004f7e:	b118      	cbz	r0, 8004f88 <__swbuf_r+0x32>
 8004f80:	f04f 37ff 	mov.w	r7, #4294967295
 8004f84:	4638      	mov	r0, r7
 8004f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	6922      	ldr	r2, [r4, #16]
 8004f8c:	1a98      	subs	r0, r3, r2
 8004f8e:	6963      	ldr	r3, [r4, #20]
 8004f90:	b2f6      	uxtb	r6, r6
 8004f92:	4283      	cmp	r3, r0
 8004f94:	4637      	mov	r7, r6
 8004f96:	dc05      	bgt.n	8004fa4 <__swbuf_r+0x4e>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f001 fe36 	bl	8006c0c <_fflush_r>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d1ed      	bne.n	8004f80 <__swbuf_r+0x2a>
 8004fa4:	68a3      	ldr	r3, [r4, #8]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	60a3      	str	r3, [r4, #8]
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	6022      	str	r2, [r4, #0]
 8004fb0:	701e      	strb	r6, [r3, #0]
 8004fb2:	6962      	ldr	r2, [r4, #20]
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d004      	beq.n	8004fc4 <__swbuf_r+0x6e>
 8004fba:	89a3      	ldrh	r3, [r4, #12]
 8004fbc:	07db      	lsls	r3, r3, #31
 8004fbe:	d5e1      	bpl.n	8004f84 <__swbuf_r+0x2e>
 8004fc0:	2e0a      	cmp	r6, #10
 8004fc2:	d1df      	bne.n	8004f84 <__swbuf_r+0x2e>
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f001 fe20 	bl	8006c0c <_fflush_r>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d0d9      	beq.n	8004f84 <__swbuf_r+0x2e>
 8004fd0:	e7d6      	b.n	8004f80 <__swbuf_r+0x2a>
	...

08004fd4 <__swsetup_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4b29      	ldr	r3, [pc, #164]	@ (800507c <__swsetup_r+0xa8>)
 8004fd8:	4605      	mov	r5, r0
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	460c      	mov	r4, r1
 8004fde:	b118      	cbz	r0, 8004fe8 <__swsetup_r+0x14>
 8004fe0:	6a03      	ldr	r3, [r0, #32]
 8004fe2:	b90b      	cbnz	r3, 8004fe8 <__swsetup_r+0x14>
 8004fe4:	f7ff fe9a 	bl	8004d1c <__sinit>
 8004fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fec:	0719      	lsls	r1, r3, #28
 8004fee:	d422      	bmi.n	8005036 <__swsetup_r+0x62>
 8004ff0:	06da      	lsls	r2, r3, #27
 8004ff2:	d407      	bmi.n	8005004 <__swsetup_r+0x30>
 8004ff4:	2209      	movs	r2, #9
 8004ff6:	602a      	str	r2, [r5, #0]
 8004ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8005002:	e033      	b.n	800506c <__swsetup_r+0x98>
 8005004:	0758      	lsls	r0, r3, #29
 8005006:	d512      	bpl.n	800502e <__swsetup_r+0x5a>
 8005008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800500a:	b141      	cbz	r1, 800501e <__swsetup_r+0x4a>
 800500c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005010:	4299      	cmp	r1, r3
 8005012:	d002      	beq.n	800501a <__swsetup_r+0x46>
 8005014:	4628      	mov	r0, r5
 8005016:	f000 ff0f 	bl	8005e38 <_free_r>
 800501a:	2300      	movs	r3, #0
 800501c:	6363      	str	r3, [r4, #52]	@ 0x34
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005024:	81a3      	strh	r3, [r4, #12]
 8005026:	2300      	movs	r3, #0
 8005028:	6063      	str	r3, [r4, #4]
 800502a:	6923      	ldr	r3, [r4, #16]
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	f043 0308 	orr.w	r3, r3, #8
 8005034:	81a3      	strh	r3, [r4, #12]
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	b94b      	cbnz	r3, 800504e <__swsetup_r+0x7a>
 800503a:	89a3      	ldrh	r3, [r4, #12]
 800503c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005044:	d003      	beq.n	800504e <__swsetup_r+0x7a>
 8005046:	4621      	mov	r1, r4
 8005048:	4628      	mov	r0, r5
 800504a:	f001 fe2d 	bl	8006ca8 <__smakebuf_r>
 800504e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005052:	f013 0201 	ands.w	r2, r3, #1
 8005056:	d00a      	beq.n	800506e <__swsetup_r+0x9a>
 8005058:	2200      	movs	r2, #0
 800505a:	60a2      	str	r2, [r4, #8]
 800505c:	6962      	ldr	r2, [r4, #20]
 800505e:	4252      	negs	r2, r2
 8005060:	61a2      	str	r2, [r4, #24]
 8005062:	6922      	ldr	r2, [r4, #16]
 8005064:	b942      	cbnz	r2, 8005078 <__swsetup_r+0xa4>
 8005066:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800506a:	d1c5      	bne.n	8004ff8 <__swsetup_r+0x24>
 800506c:	bd38      	pop	{r3, r4, r5, pc}
 800506e:	0799      	lsls	r1, r3, #30
 8005070:	bf58      	it	pl
 8005072:	6962      	ldrpl	r2, [r4, #20]
 8005074:	60a2      	str	r2, [r4, #8]
 8005076:	e7f4      	b.n	8005062 <__swsetup_r+0x8e>
 8005078:	2000      	movs	r0, #0
 800507a:	e7f7      	b.n	800506c <__swsetup_r+0x98>
 800507c:	20000048 	.word	0x20000048

08005080 <memset>:
 8005080:	4402      	add	r2, r0
 8005082:	4603      	mov	r3, r0
 8005084:	4293      	cmp	r3, r2
 8005086:	d100      	bne.n	800508a <memset+0xa>
 8005088:	4770      	bx	lr
 800508a:	f803 1b01 	strb.w	r1, [r3], #1
 800508e:	e7f9      	b.n	8005084 <memset+0x4>

08005090 <_localeconv_r>:
 8005090:	4800      	ldr	r0, [pc, #0]	@ (8005094 <_localeconv_r+0x4>)
 8005092:	4770      	bx	lr
 8005094:	20000188 	.word	0x20000188

08005098 <_close_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4d06      	ldr	r5, [pc, #24]	@ (80050b4 <_close_r+0x1c>)
 800509c:	2300      	movs	r3, #0
 800509e:	4604      	mov	r4, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	f7fd f98b 	bl	80023be <_close>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_close_r+0x1a>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_close_r+0x1a>
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	20000428 	.word	0x20000428

080050b8 <_lseek_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4d07      	ldr	r5, [pc, #28]	@ (80050d8 <_lseek_r+0x20>)
 80050bc:	4604      	mov	r4, r0
 80050be:	4608      	mov	r0, r1
 80050c0:	4611      	mov	r1, r2
 80050c2:	2200      	movs	r2, #0
 80050c4:	602a      	str	r2, [r5, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f7fd f9a0 	bl	800240c <_lseek>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_lseek_r+0x1e>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_lseek_r+0x1e>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	20000428 	.word	0x20000428

080050dc <_read_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4d07      	ldr	r5, [pc, #28]	@ (80050fc <_read_r+0x20>)
 80050e0:	4604      	mov	r4, r0
 80050e2:	4608      	mov	r0, r1
 80050e4:	4611      	mov	r1, r2
 80050e6:	2200      	movs	r2, #0
 80050e8:	602a      	str	r2, [r5, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f7fd f92e 	bl	800234c <_read>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d102      	bne.n	80050fa <_read_r+0x1e>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b103      	cbz	r3, 80050fa <_read_r+0x1e>
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	20000428 	.word	0x20000428

08005100 <_sbrk_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4d06      	ldr	r5, [pc, #24]	@ (800511c <_sbrk_r+0x1c>)
 8005104:	2300      	movs	r3, #0
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	602b      	str	r3, [r5, #0]
 800510c:	f7fd f98c 	bl	8002428 <_sbrk>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_sbrk_r+0x1a>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	b103      	cbz	r3, 800511a <_sbrk_r+0x1a>
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	20000428 	.word	0x20000428

08005120 <_write_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4d07      	ldr	r5, [pc, #28]	@ (8005140 <_write_r+0x20>)
 8005124:	4604      	mov	r4, r0
 8005126:	4608      	mov	r0, r1
 8005128:	4611      	mov	r1, r2
 800512a:	2200      	movs	r2, #0
 800512c:	602a      	str	r2, [r5, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	f7fd f929 	bl	8002386 <_write>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_write_r+0x1e>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	b103      	cbz	r3, 800513e <_write_r+0x1e>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	20000428 	.word	0x20000428

08005144 <__errno>:
 8005144:	4b01      	ldr	r3, [pc, #4]	@ (800514c <__errno+0x8>)
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000048 	.word	0x20000048

08005150 <__libc_init_array>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	4d0d      	ldr	r5, [pc, #52]	@ (8005188 <__libc_init_array+0x38>)
 8005154:	4c0d      	ldr	r4, [pc, #52]	@ (800518c <__libc_init_array+0x3c>)
 8005156:	1b64      	subs	r4, r4, r5
 8005158:	10a4      	asrs	r4, r4, #2
 800515a:	2600      	movs	r6, #0
 800515c:	42a6      	cmp	r6, r4
 800515e:	d109      	bne.n	8005174 <__libc_init_array+0x24>
 8005160:	4d0b      	ldr	r5, [pc, #44]	@ (8005190 <__libc_init_array+0x40>)
 8005162:	4c0c      	ldr	r4, [pc, #48]	@ (8005194 <__libc_init_array+0x44>)
 8005164:	f003 f9f2 	bl	800854c <_init>
 8005168:	1b64      	subs	r4, r4, r5
 800516a:	10a4      	asrs	r4, r4, #2
 800516c:	2600      	movs	r6, #0
 800516e:	42a6      	cmp	r6, r4
 8005170:	d105      	bne.n	800517e <__libc_init_array+0x2e>
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	f855 3b04 	ldr.w	r3, [r5], #4
 8005178:	4798      	blx	r3
 800517a:	3601      	adds	r6, #1
 800517c:	e7ee      	b.n	800515c <__libc_init_array+0xc>
 800517e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005182:	4798      	blx	r3
 8005184:	3601      	adds	r6, #1
 8005186:	e7f2      	b.n	800516e <__libc_init_array+0x1e>
 8005188:	08009270 	.word	0x08009270
 800518c:	08009270 	.word	0x08009270
 8005190:	08009270 	.word	0x08009270
 8005194:	08009274 	.word	0x08009274

08005198 <__retarget_lock_init_recursive>:
 8005198:	4770      	bx	lr

0800519a <__retarget_lock_acquire_recursive>:
 800519a:	4770      	bx	lr

0800519c <__retarget_lock_release_recursive>:
 800519c:	4770      	bx	lr

0800519e <quorem>:
 800519e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a2:	6903      	ldr	r3, [r0, #16]
 80051a4:	690c      	ldr	r4, [r1, #16]
 80051a6:	42a3      	cmp	r3, r4
 80051a8:	4607      	mov	r7, r0
 80051aa:	db7e      	blt.n	80052aa <quorem+0x10c>
 80051ac:	3c01      	subs	r4, #1
 80051ae:	f101 0814 	add.w	r8, r1, #20
 80051b2:	00a3      	lsls	r3, r4, #2
 80051b4:	f100 0514 	add.w	r5, r0, #20
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051c8:	3301      	adds	r3, #1
 80051ca:	429a      	cmp	r2, r3
 80051cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80051d4:	d32e      	bcc.n	8005234 <quorem+0x96>
 80051d6:	f04f 0a00 	mov.w	sl, #0
 80051da:	46c4      	mov	ip, r8
 80051dc:	46ae      	mov	lr, r5
 80051de:	46d3      	mov	fp, sl
 80051e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80051e4:	b298      	uxth	r0, r3
 80051e6:	fb06 a000 	mla	r0, r6, r0, sl
 80051ea:	0c02      	lsrs	r2, r0, #16
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	fb06 2303 	mla	r3, r6, r3, r2
 80051f2:	f8de 2000 	ldr.w	r2, [lr]
 80051f6:	b280      	uxth	r0, r0
 80051f8:	b292      	uxth	r2, r2
 80051fa:	1a12      	subs	r2, r2, r0
 80051fc:	445a      	add	r2, fp
 80051fe:	f8de 0000 	ldr.w	r0, [lr]
 8005202:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005206:	b29b      	uxth	r3, r3
 8005208:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800520c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005210:	b292      	uxth	r2, r2
 8005212:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005216:	45e1      	cmp	r9, ip
 8005218:	f84e 2b04 	str.w	r2, [lr], #4
 800521c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005220:	d2de      	bcs.n	80051e0 <quorem+0x42>
 8005222:	9b00      	ldr	r3, [sp, #0]
 8005224:	58eb      	ldr	r3, [r5, r3]
 8005226:	b92b      	cbnz	r3, 8005234 <quorem+0x96>
 8005228:	9b01      	ldr	r3, [sp, #4]
 800522a:	3b04      	subs	r3, #4
 800522c:	429d      	cmp	r5, r3
 800522e:	461a      	mov	r2, r3
 8005230:	d32f      	bcc.n	8005292 <quorem+0xf4>
 8005232:	613c      	str	r4, [r7, #16]
 8005234:	4638      	mov	r0, r7
 8005236:	f001 f8c3 	bl	80063c0 <__mcmp>
 800523a:	2800      	cmp	r0, #0
 800523c:	db25      	blt.n	800528a <quorem+0xec>
 800523e:	4629      	mov	r1, r5
 8005240:	2000      	movs	r0, #0
 8005242:	f858 2b04 	ldr.w	r2, [r8], #4
 8005246:	f8d1 c000 	ldr.w	ip, [r1]
 800524a:	fa1f fe82 	uxth.w	lr, r2
 800524e:	fa1f f38c 	uxth.w	r3, ip
 8005252:	eba3 030e 	sub.w	r3, r3, lr
 8005256:	4403      	add	r3, r0
 8005258:	0c12      	lsrs	r2, r2, #16
 800525a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800525e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005262:	b29b      	uxth	r3, r3
 8005264:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005268:	45c1      	cmp	r9, r8
 800526a:	f841 3b04 	str.w	r3, [r1], #4
 800526e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005272:	d2e6      	bcs.n	8005242 <quorem+0xa4>
 8005274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005278:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800527c:	b922      	cbnz	r2, 8005288 <quorem+0xea>
 800527e:	3b04      	subs	r3, #4
 8005280:	429d      	cmp	r5, r3
 8005282:	461a      	mov	r2, r3
 8005284:	d30b      	bcc.n	800529e <quorem+0x100>
 8005286:	613c      	str	r4, [r7, #16]
 8005288:	3601      	adds	r6, #1
 800528a:	4630      	mov	r0, r6
 800528c:	b003      	add	sp, #12
 800528e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	3b04      	subs	r3, #4
 8005296:	2a00      	cmp	r2, #0
 8005298:	d1cb      	bne.n	8005232 <quorem+0x94>
 800529a:	3c01      	subs	r4, #1
 800529c:	e7c6      	b.n	800522c <quorem+0x8e>
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	3b04      	subs	r3, #4
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	d1ef      	bne.n	8005286 <quorem+0xe8>
 80052a6:	3c01      	subs	r4, #1
 80052a8:	e7ea      	b.n	8005280 <quorem+0xe2>
 80052aa:	2000      	movs	r0, #0
 80052ac:	e7ee      	b.n	800528c <quorem+0xee>
	...

080052b0 <_dtoa_r>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	69c7      	ldr	r7, [r0, #28]
 80052b6:	b099      	sub	sp, #100	@ 0x64
 80052b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80052bc:	ec55 4b10 	vmov	r4, r5, d0
 80052c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80052c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80052c4:	4683      	mov	fp, r0
 80052c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80052c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80052ca:	b97f      	cbnz	r7, 80052ec <_dtoa_r+0x3c>
 80052cc:	2010      	movs	r0, #16
 80052ce:	f7fe ff83 	bl	80041d8 <malloc>
 80052d2:	4602      	mov	r2, r0
 80052d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80052d8:	b920      	cbnz	r0, 80052e4 <_dtoa_r+0x34>
 80052da:	4ba7      	ldr	r3, [pc, #668]	@ (8005578 <_dtoa_r+0x2c8>)
 80052dc:	21ef      	movs	r1, #239	@ 0xef
 80052de:	48a7      	ldr	r0, [pc, #668]	@ (800557c <_dtoa_r+0x2cc>)
 80052e0:	f001 fd68 	bl	8006db4 <__assert_func>
 80052e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80052e8:	6007      	str	r7, [r0, #0]
 80052ea:	60c7      	str	r7, [r0, #12]
 80052ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	b159      	cbz	r1, 800530c <_dtoa_r+0x5c>
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	604a      	str	r2, [r1, #4]
 80052f8:	2301      	movs	r3, #1
 80052fa:	4093      	lsls	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
 80052fe:	4658      	mov	r0, fp
 8005300:	f000 fe24 	bl	8005f4c <_Bfree>
 8005304:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	1e2b      	subs	r3, r5, #0
 800530e:	bfb9      	ittee	lt
 8005310:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005314:	9303      	strlt	r3, [sp, #12]
 8005316:	2300      	movge	r3, #0
 8005318:	6033      	strge	r3, [r6, #0]
 800531a:	9f03      	ldr	r7, [sp, #12]
 800531c:	4b98      	ldr	r3, [pc, #608]	@ (8005580 <_dtoa_r+0x2d0>)
 800531e:	bfbc      	itt	lt
 8005320:	2201      	movlt	r2, #1
 8005322:	6032      	strlt	r2, [r6, #0]
 8005324:	43bb      	bics	r3, r7
 8005326:	d112      	bne.n	800534e <_dtoa_r+0x9e>
 8005328:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800532a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005334:	4323      	orrs	r3, r4
 8005336:	f000 854d 	beq.w	8005dd4 <_dtoa_r+0xb24>
 800533a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800533c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005594 <_dtoa_r+0x2e4>
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 854f 	beq.w	8005de4 <_dtoa_r+0xb34>
 8005346:	f10a 0303 	add.w	r3, sl, #3
 800534a:	f000 bd49 	b.w	8005de0 <_dtoa_r+0xb30>
 800534e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005352:	2200      	movs	r2, #0
 8005354:	ec51 0b17 	vmov	r0, r1, d7
 8005358:	2300      	movs	r3, #0
 800535a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800535e:	f7fb fbbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005362:	4680      	mov	r8, r0
 8005364:	b158      	cbz	r0, 800537e <_dtoa_r+0xce>
 8005366:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005368:	2301      	movs	r3, #1
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800536e:	b113      	cbz	r3, 8005376 <_dtoa_r+0xc6>
 8005370:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005372:	4b84      	ldr	r3, [pc, #528]	@ (8005584 <_dtoa_r+0x2d4>)
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005598 <_dtoa_r+0x2e8>
 800537a:	f000 bd33 	b.w	8005de4 <_dtoa_r+0xb34>
 800537e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005382:	aa16      	add	r2, sp, #88	@ 0x58
 8005384:	a917      	add	r1, sp, #92	@ 0x5c
 8005386:	4658      	mov	r0, fp
 8005388:	f001 f8ca 	bl	8006520 <__d2b>
 800538c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005390:	4681      	mov	r9, r0
 8005392:	2e00      	cmp	r6, #0
 8005394:	d077      	beq.n	8005486 <_dtoa_r+0x1d6>
 8005396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005398:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800539c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80053a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80053ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80053b0:	4619      	mov	r1, r3
 80053b2:	2200      	movs	r2, #0
 80053b4:	4b74      	ldr	r3, [pc, #464]	@ (8005588 <_dtoa_r+0x2d8>)
 80053b6:	f7fa ff6f 	bl	8000298 <__aeabi_dsub>
 80053ba:	a369      	add	r3, pc, #420	@ (adr r3, 8005560 <_dtoa_r+0x2b0>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f7fb f922 	bl	8000608 <__aeabi_dmul>
 80053c4:	a368      	add	r3, pc, #416	@ (adr r3, 8005568 <_dtoa_r+0x2b8>)
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f7fa ff67 	bl	800029c <__adddf3>
 80053ce:	4604      	mov	r4, r0
 80053d0:	4630      	mov	r0, r6
 80053d2:	460d      	mov	r5, r1
 80053d4:	f7fb f8ae 	bl	8000534 <__aeabi_i2d>
 80053d8:	a365      	add	r3, pc, #404	@ (adr r3, 8005570 <_dtoa_r+0x2c0>)
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	f7fb f913 	bl	8000608 <__aeabi_dmul>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4620      	mov	r0, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	f7fa ff57 	bl	800029c <__adddf3>
 80053ee:	4604      	mov	r4, r0
 80053f0:	460d      	mov	r5, r1
 80053f2:	f7fb fbb9 	bl	8000b68 <__aeabi_d2iz>
 80053f6:	2200      	movs	r2, #0
 80053f8:	4607      	mov	r7, r0
 80053fa:	2300      	movs	r3, #0
 80053fc:	4620      	mov	r0, r4
 80053fe:	4629      	mov	r1, r5
 8005400:	f7fb fb74 	bl	8000aec <__aeabi_dcmplt>
 8005404:	b140      	cbz	r0, 8005418 <_dtoa_r+0x168>
 8005406:	4638      	mov	r0, r7
 8005408:	f7fb f894 	bl	8000534 <__aeabi_i2d>
 800540c:	4622      	mov	r2, r4
 800540e:	462b      	mov	r3, r5
 8005410:	f7fb fb62 	bl	8000ad8 <__aeabi_dcmpeq>
 8005414:	b900      	cbnz	r0, 8005418 <_dtoa_r+0x168>
 8005416:	3f01      	subs	r7, #1
 8005418:	2f16      	cmp	r7, #22
 800541a:	d851      	bhi.n	80054c0 <_dtoa_r+0x210>
 800541c:	4b5b      	ldr	r3, [pc, #364]	@ (800558c <_dtoa_r+0x2dc>)
 800541e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800542a:	f7fb fb5f 	bl	8000aec <__aeabi_dcmplt>
 800542e:	2800      	cmp	r0, #0
 8005430:	d048      	beq.n	80054c4 <_dtoa_r+0x214>
 8005432:	3f01      	subs	r7, #1
 8005434:	2300      	movs	r3, #0
 8005436:	9312      	str	r3, [sp, #72]	@ 0x48
 8005438:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800543a:	1b9b      	subs	r3, r3, r6
 800543c:	1e5a      	subs	r2, r3, #1
 800543e:	bf44      	itt	mi
 8005440:	f1c3 0801 	rsbmi	r8, r3, #1
 8005444:	2300      	movmi	r3, #0
 8005446:	9208      	str	r2, [sp, #32]
 8005448:	bf54      	ite	pl
 800544a:	f04f 0800 	movpl.w	r8, #0
 800544e:	9308      	strmi	r3, [sp, #32]
 8005450:	2f00      	cmp	r7, #0
 8005452:	db39      	blt.n	80054c8 <_dtoa_r+0x218>
 8005454:	9b08      	ldr	r3, [sp, #32]
 8005456:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005458:	443b      	add	r3, r7
 800545a:	9308      	str	r3, [sp, #32]
 800545c:	2300      	movs	r3, #0
 800545e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005462:	2b09      	cmp	r3, #9
 8005464:	d864      	bhi.n	8005530 <_dtoa_r+0x280>
 8005466:	2b05      	cmp	r3, #5
 8005468:	bfc4      	itt	gt
 800546a:	3b04      	subgt	r3, #4
 800546c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800546e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005470:	f1a3 0302 	sub.w	r3, r3, #2
 8005474:	bfcc      	ite	gt
 8005476:	2400      	movgt	r4, #0
 8005478:	2401      	movle	r4, #1
 800547a:	2b03      	cmp	r3, #3
 800547c:	d863      	bhi.n	8005546 <_dtoa_r+0x296>
 800547e:	e8df f003 	tbb	[pc, r3]
 8005482:	372a      	.short	0x372a
 8005484:	5535      	.short	0x5535
 8005486:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800548a:	441e      	add	r6, r3
 800548c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005490:	2b20      	cmp	r3, #32
 8005492:	bfc1      	itttt	gt
 8005494:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005498:	409f      	lslgt	r7, r3
 800549a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800549e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80054a2:	bfd6      	itet	le
 80054a4:	f1c3 0320 	rsble	r3, r3, #32
 80054a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80054ac:	fa04 f003 	lslle.w	r0, r4, r3
 80054b0:	f7fb f830 	bl	8000514 <__aeabi_ui2d>
 80054b4:	2201      	movs	r2, #1
 80054b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80054ba:	3e01      	subs	r6, #1
 80054bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80054be:	e777      	b.n	80053b0 <_dtoa_r+0x100>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e7b8      	b.n	8005436 <_dtoa_r+0x186>
 80054c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80054c6:	e7b7      	b.n	8005438 <_dtoa_r+0x188>
 80054c8:	427b      	negs	r3, r7
 80054ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80054cc:	2300      	movs	r3, #0
 80054ce:	eba8 0807 	sub.w	r8, r8, r7
 80054d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80054d4:	e7c4      	b.n	8005460 <_dtoa_r+0x1b0>
 80054d6:	2300      	movs	r3, #0
 80054d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054dc:	2b00      	cmp	r3, #0
 80054de:	dc35      	bgt.n	800554c <_dtoa_r+0x29c>
 80054e0:	2301      	movs	r3, #1
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	9307      	str	r3, [sp, #28]
 80054e6:	461a      	mov	r2, r3
 80054e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80054ea:	e00b      	b.n	8005504 <_dtoa_r+0x254>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e7f3      	b.n	80054d8 <_dtoa_r+0x228>
 80054f0:	2300      	movs	r3, #0
 80054f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	9307      	str	r3, [sp, #28]
 8005500:	bfb8      	it	lt
 8005502:	2301      	movlt	r3, #1
 8005504:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005508:	2100      	movs	r1, #0
 800550a:	2204      	movs	r2, #4
 800550c:	f102 0514 	add.w	r5, r2, #20
 8005510:	429d      	cmp	r5, r3
 8005512:	d91f      	bls.n	8005554 <_dtoa_r+0x2a4>
 8005514:	6041      	str	r1, [r0, #4]
 8005516:	4658      	mov	r0, fp
 8005518:	f000 fcd8 	bl	8005ecc <_Balloc>
 800551c:	4682      	mov	sl, r0
 800551e:	2800      	cmp	r0, #0
 8005520:	d13c      	bne.n	800559c <_dtoa_r+0x2ec>
 8005522:	4b1b      	ldr	r3, [pc, #108]	@ (8005590 <_dtoa_r+0x2e0>)
 8005524:	4602      	mov	r2, r0
 8005526:	f240 11af 	movw	r1, #431	@ 0x1af
 800552a:	e6d8      	b.n	80052de <_dtoa_r+0x2e>
 800552c:	2301      	movs	r3, #1
 800552e:	e7e0      	b.n	80054f2 <_dtoa_r+0x242>
 8005530:	2401      	movs	r4, #1
 8005532:	2300      	movs	r3, #0
 8005534:	9309      	str	r3, [sp, #36]	@ 0x24
 8005536:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	9307      	str	r3, [sp, #28]
 8005540:	2200      	movs	r2, #0
 8005542:	2312      	movs	r3, #18
 8005544:	e7d0      	b.n	80054e8 <_dtoa_r+0x238>
 8005546:	2301      	movs	r3, #1
 8005548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800554a:	e7f5      	b.n	8005538 <_dtoa_r+0x288>
 800554c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	9307      	str	r3, [sp, #28]
 8005552:	e7d7      	b.n	8005504 <_dtoa_r+0x254>
 8005554:	3101      	adds	r1, #1
 8005556:	0052      	lsls	r2, r2, #1
 8005558:	e7d8      	b.n	800550c <_dtoa_r+0x25c>
 800555a:	bf00      	nop
 800555c:	f3af 8000 	nop.w
 8005560:	636f4361 	.word	0x636f4361
 8005564:	3fd287a7 	.word	0x3fd287a7
 8005568:	8b60c8b3 	.word	0x8b60c8b3
 800556c:	3fc68a28 	.word	0x3fc68a28
 8005570:	509f79fb 	.word	0x509f79fb
 8005574:	3fd34413 	.word	0x3fd34413
 8005578:	08008f05 	.word	0x08008f05
 800557c:	08008f1c 	.word	0x08008f1c
 8005580:	7ff00000 	.word	0x7ff00000
 8005584:	08008ed5 	.word	0x08008ed5
 8005588:	3ff80000 	.word	0x3ff80000
 800558c:	08009018 	.word	0x08009018
 8005590:	08008f74 	.word	0x08008f74
 8005594:	08008f01 	.word	0x08008f01
 8005598:	08008ed4 	.word	0x08008ed4
 800559c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80055a0:	6018      	str	r0, [r3, #0]
 80055a2:	9b07      	ldr	r3, [sp, #28]
 80055a4:	2b0e      	cmp	r3, #14
 80055a6:	f200 80a4 	bhi.w	80056f2 <_dtoa_r+0x442>
 80055aa:	2c00      	cmp	r4, #0
 80055ac:	f000 80a1 	beq.w	80056f2 <_dtoa_r+0x442>
 80055b0:	2f00      	cmp	r7, #0
 80055b2:	dd33      	ble.n	800561c <_dtoa_r+0x36c>
 80055b4:	4bad      	ldr	r3, [pc, #692]	@ (800586c <_dtoa_r+0x5bc>)
 80055b6:	f007 020f 	and.w	r2, r7, #15
 80055ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055be:	ed93 7b00 	vldr	d7, [r3]
 80055c2:	05f8      	lsls	r0, r7, #23
 80055c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80055c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80055cc:	d516      	bpl.n	80055fc <_dtoa_r+0x34c>
 80055ce:	4ba8      	ldr	r3, [pc, #672]	@ (8005870 <_dtoa_r+0x5c0>)
 80055d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055d8:	f7fb f940 	bl	800085c <__aeabi_ddiv>
 80055dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e0:	f004 040f 	and.w	r4, r4, #15
 80055e4:	2603      	movs	r6, #3
 80055e6:	4da2      	ldr	r5, [pc, #648]	@ (8005870 <_dtoa_r+0x5c0>)
 80055e8:	b954      	cbnz	r4, 8005600 <_dtoa_r+0x350>
 80055ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055f2:	f7fb f933 	bl	800085c <__aeabi_ddiv>
 80055f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055fa:	e028      	b.n	800564e <_dtoa_r+0x39e>
 80055fc:	2602      	movs	r6, #2
 80055fe:	e7f2      	b.n	80055e6 <_dtoa_r+0x336>
 8005600:	07e1      	lsls	r1, r4, #31
 8005602:	d508      	bpl.n	8005616 <_dtoa_r+0x366>
 8005604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005608:	e9d5 2300 	ldrd	r2, r3, [r5]
 800560c:	f7fa fffc 	bl	8000608 <__aeabi_dmul>
 8005610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005614:	3601      	adds	r6, #1
 8005616:	1064      	asrs	r4, r4, #1
 8005618:	3508      	adds	r5, #8
 800561a:	e7e5      	b.n	80055e8 <_dtoa_r+0x338>
 800561c:	f000 80d2 	beq.w	80057c4 <_dtoa_r+0x514>
 8005620:	427c      	negs	r4, r7
 8005622:	4b92      	ldr	r3, [pc, #584]	@ (800586c <_dtoa_r+0x5bc>)
 8005624:	4d92      	ldr	r5, [pc, #584]	@ (8005870 <_dtoa_r+0x5c0>)
 8005626:	f004 020f 	and.w	r2, r4, #15
 800562a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005636:	f7fa ffe7 	bl	8000608 <__aeabi_dmul>
 800563a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800563e:	1124      	asrs	r4, r4, #4
 8005640:	2300      	movs	r3, #0
 8005642:	2602      	movs	r6, #2
 8005644:	2c00      	cmp	r4, #0
 8005646:	f040 80b2 	bne.w	80057ae <_dtoa_r+0x4fe>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1d3      	bne.n	80055f6 <_dtoa_r+0x346>
 800564e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005650:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80b7 	beq.w	80057c8 <_dtoa_r+0x518>
 800565a:	4b86      	ldr	r3, [pc, #536]	@ (8005874 <_dtoa_r+0x5c4>)
 800565c:	2200      	movs	r2, #0
 800565e:	4620      	mov	r0, r4
 8005660:	4629      	mov	r1, r5
 8005662:	f7fb fa43 	bl	8000aec <__aeabi_dcmplt>
 8005666:	2800      	cmp	r0, #0
 8005668:	f000 80ae 	beq.w	80057c8 <_dtoa_r+0x518>
 800566c:	9b07      	ldr	r3, [sp, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 80aa 	beq.w	80057c8 <_dtoa_r+0x518>
 8005674:	9b00      	ldr	r3, [sp, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	dd37      	ble.n	80056ea <_dtoa_r+0x43a>
 800567a:	1e7b      	subs	r3, r7, #1
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	4620      	mov	r0, r4
 8005680:	4b7d      	ldr	r3, [pc, #500]	@ (8005878 <_dtoa_r+0x5c8>)
 8005682:	2200      	movs	r2, #0
 8005684:	4629      	mov	r1, r5
 8005686:	f7fa ffbf 	bl	8000608 <__aeabi_dmul>
 800568a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800568e:	9c00      	ldr	r4, [sp, #0]
 8005690:	3601      	adds	r6, #1
 8005692:	4630      	mov	r0, r6
 8005694:	f7fa ff4e 	bl	8000534 <__aeabi_i2d>
 8005698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800569c:	f7fa ffb4 	bl	8000608 <__aeabi_dmul>
 80056a0:	4b76      	ldr	r3, [pc, #472]	@ (800587c <_dtoa_r+0x5cc>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	f7fa fdfa 	bl	800029c <__adddf3>
 80056a8:	4605      	mov	r5, r0
 80056aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80056ae:	2c00      	cmp	r4, #0
 80056b0:	f040 808d 	bne.w	80057ce <_dtoa_r+0x51e>
 80056b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056b8:	4b71      	ldr	r3, [pc, #452]	@ (8005880 <_dtoa_r+0x5d0>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	f7fa fdec 	bl	8000298 <__aeabi_dsub>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056c8:	462a      	mov	r2, r5
 80056ca:	4633      	mov	r3, r6
 80056cc:	f7fb fa2c 	bl	8000b28 <__aeabi_dcmpgt>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	f040 828b 	bne.w	8005bec <_dtoa_r+0x93c>
 80056d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056da:	462a      	mov	r2, r5
 80056dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80056e0:	f7fb fa04 	bl	8000aec <__aeabi_dcmplt>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	f040 8128 	bne.w	800593a <_dtoa_r+0x68a>
 80056ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80056ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80056f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f2c0 815a 	blt.w	80059ae <_dtoa_r+0x6fe>
 80056fa:	2f0e      	cmp	r7, #14
 80056fc:	f300 8157 	bgt.w	80059ae <_dtoa_r+0x6fe>
 8005700:	4b5a      	ldr	r3, [pc, #360]	@ (800586c <_dtoa_r+0x5bc>)
 8005702:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005706:	ed93 7b00 	vldr	d7, [r3]
 800570a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800570c:	2b00      	cmp	r3, #0
 800570e:	ed8d 7b00 	vstr	d7, [sp]
 8005712:	da03      	bge.n	800571c <_dtoa_r+0x46c>
 8005714:	9b07      	ldr	r3, [sp, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f340 8101 	ble.w	800591e <_dtoa_r+0x66e>
 800571c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005720:	4656      	mov	r6, sl
 8005722:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fb f897 	bl	800085c <__aeabi_ddiv>
 800572e:	f7fb fa1b 	bl	8000b68 <__aeabi_d2iz>
 8005732:	4680      	mov	r8, r0
 8005734:	f7fa fefe 	bl	8000534 <__aeabi_i2d>
 8005738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800573c:	f7fa ff64 	bl	8000608 <__aeabi_dmul>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4620      	mov	r0, r4
 8005746:	4629      	mov	r1, r5
 8005748:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800574c:	f7fa fda4 	bl	8000298 <__aeabi_dsub>
 8005750:	f806 4b01 	strb.w	r4, [r6], #1
 8005754:	9d07      	ldr	r5, [sp, #28]
 8005756:	eba6 040a 	sub.w	r4, r6, sl
 800575a:	42a5      	cmp	r5, r4
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	f040 8117 	bne.w	8005992 <_dtoa_r+0x6e2>
 8005764:	f7fa fd9a 	bl	800029c <__adddf3>
 8005768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800576c:	4604      	mov	r4, r0
 800576e:	460d      	mov	r5, r1
 8005770:	f7fb f9da 	bl	8000b28 <__aeabi_dcmpgt>
 8005774:	2800      	cmp	r0, #0
 8005776:	f040 80f9 	bne.w	800596c <_dtoa_r+0x6bc>
 800577a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800577e:	4620      	mov	r0, r4
 8005780:	4629      	mov	r1, r5
 8005782:	f7fb f9a9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005786:	b118      	cbz	r0, 8005790 <_dtoa_r+0x4e0>
 8005788:	f018 0f01 	tst.w	r8, #1
 800578c:	f040 80ee 	bne.w	800596c <_dtoa_r+0x6bc>
 8005790:	4649      	mov	r1, r9
 8005792:	4658      	mov	r0, fp
 8005794:	f000 fbda 	bl	8005f4c <_Bfree>
 8005798:	2300      	movs	r3, #0
 800579a:	7033      	strb	r3, [r6, #0]
 800579c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800579e:	3701      	adds	r7, #1
 80057a0:	601f      	str	r7, [r3, #0]
 80057a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 831d 	beq.w	8005de4 <_dtoa_r+0xb34>
 80057aa:	601e      	str	r6, [r3, #0]
 80057ac:	e31a      	b.n	8005de4 <_dtoa_r+0xb34>
 80057ae:	07e2      	lsls	r2, r4, #31
 80057b0:	d505      	bpl.n	80057be <_dtoa_r+0x50e>
 80057b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057b6:	f7fa ff27 	bl	8000608 <__aeabi_dmul>
 80057ba:	3601      	adds	r6, #1
 80057bc:	2301      	movs	r3, #1
 80057be:	1064      	asrs	r4, r4, #1
 80057c0:	3508      	adds	r5, #8
 80057c2:	e73f      	b.n	8005644 <_dtoa_r+0x394>
 80057c4:	2602      	movs	r6, #2
 80057c6:	e742      	b.n	800564e <_dtoa_r+0x39e>
 80057c8:	9c07      	ldr	r4, [sp, #28]
 80057ca:	9704      	str	r7, [sp, #16]
 80057cc:	e761      	b.n	8005692 <_dtoa_r+0x3e2>
 80057ce:	4b27      	ldr	r3, [pc, #156]	@ (800586c <_dtoa_r+0x5bc>)
 80057d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80057d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057da:	4454      	add	r4, sl
 80057dc:	2900      	cmp	r1, #0
 80057de:	d053      	beq.n	8005888 <_dtoa_r+0x5d8>
 80057e0:	4928      	ldr	r1, [pc, #160]	@ (8005884 <_dtoa_r+0x5d4>)
 80057e2:	2000      	movs	r0, #0
 80057e4:	f7fb f83a 	bl	800085c <__aeabi_ddiv>
 80057e8:	4633      	mov	r3, r6
 80057ea:	462a      	mov	r2, r5
 80057ec:	f7fa fd54 	bl	8000298 <__aeabi_dsub>
 80057f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80057f4:	4656      	mov	r6, sl
 80057f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057fa:	f7fb f9b5 	bl	8000b68 <__aeabi_d2iz>
 80057fe:	4605      	mov	r5, r0
 8005800:	f7fa fe98 	bl	8000534 <__aeabi_i2d>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800580c:	f7fa fd44 	bl	8000298 <__aeabi_dsub>
 8005810:	3530      	adds	r5, #48	@ 0x30
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800581a:	f806 5b01 	strb.w	r5, [r6], #1
 800581e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005822:	f7fb f963 	bl	8000aec <__aeabi_dcmplt>
 8005826:	2800      	cmp	r0, #0
 8005828:	d171      	bne.n	800590e <_dtoa_r+0x65e>
 800582a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800582e:	4911      	ldr	r1, [pc, #68]	@ (8005874 <_dtoa_r+0x5c4>)
 8005830:	2000      	movs	r0, #0
 8005832:	f7fa fd31 	bl	8000298 <__aeabi_dsub>
 8005836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800583a:	f7fb f957 	bl	8000aec <__aeabi_dcmplt>
 800583e:	2800      	cmp	r0, #0
 8005840:	f040 8095 	bne.w	800596e <_dtoa_r+0x6be>
 8005844:	42a6      	cmp	r6, r4
 8005846:	f43f af50 	beq.w	80056ea <_dtoa_r+0x43a>
 800584a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800584e:	4b0a      	ldr	r3, [pc, #40]	@ (8005878 <_dtoa_r+0x5c8>)
 8005850:	2200      	movs	r2, #0
 8005852:	f7fa fed9 	bl	8000608 <__aeabi_dmul>
 8005856:	4b08      	ldr	r3, [pc, #32]	@ (8005878 <_dtoa_r+0x5c8>)
 8005858:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800585c:	2200      	movs	r2, #0
 800585e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005862:	f7fa fed1 	bl	8000608 <__aeabi_dmul>
 8005866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800586a:	e7c4      	b.n	80057f6 <_dtoa_r+0x546>
 800586c:	08009018 	.word	0x08009018
 8005870:	08008ff0 	.word	0x08008ff0
 8005874:	3ff00000 	.word	0x3ff00000
 8005878:	40240000 	.word	0x40240000
 800587c:	401c0000 	.word	0x401c0000
 8005880:	40140000 	.word	0x40140000
 8005884:	3fe00000 	.word	0x3fe00000
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	f7fa febc 	bl	8000608 <__aeabi_dmul>
 8005890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005894:	9415      	str	r4, [sp, #84]	@ 0x54
 8005896:	4656      	mov	r6, sl
 8005898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800589c:	f7fb f964 	bl	8000b68 <__aeabi_d2iz>
 80058a0:	4605      	mov	r5, r0
 80058a2:	f7fa fe47 	bl	8000534 <__aeabi_i2d>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ae:	f7fa fcf3 	bl	8000298 <__aeabi_dsub>
 80058b2:	3530      	adds	r5, #48	@ 0x30
 80058b4:	f806 5b01 	strb.w	r5, [r6], #1
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	42a6      	cmp	r6, r4
 80058be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	d124      	bne.n	8005912 <_dtoa_r+0x662>
 80058c8:	4bac      	ldr	r3, [pc, #688]	@ (8005b7c <_dtoa_r+0x8cc>)
 80058ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80058ce:	f7fa fce5 	bl	800029c <__adddf3>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058da:	f7fb f925 	bl	8000b28 <__aeabi_dcmpgt>
 80058de:	2800      	cmp	r0, #0
 80058e0:	d145      	bne.n	800596e <_dtoa_r+0x6be>
 80058e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058e6:	49a5      	ldr	r1, [pc, #660]	@ (8005b7c <_dtoa_r+0x8cc>)
 80058e8:	2000      	movs	r0, #0
 80058ea:	f7fa fcd5 	bl	8000298 <__aeabi_dsub>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058f6:	f7fb f8f9 	bl	8000aec <__aeabi_dcmplt>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	f43f aef5 	beq.w	80056ea <_dtoa_r+0x43a>
 8005900:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005902:	1e73      	subs	r3, r6, #1
 8005904:	9315      	str	r3, [sp, #84]	@ 0x54
 8005906:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800590a:	2b30      	cmp	r3, #48	@ 0x30
 800590c:	d0f8      	beq.n	8005900 <_dtoa_r+0x650>
 800590e:	9f04      	ldr	r7, [sp, #16]
 8005910:	e73e      	b.n	8005790 <_dtoa_r+0x4e0>
 8005912:	4b9b      	ldr	r3, [pc, #620]	@ (8005b80 <_dtoa_r+0x8d0>)
 8005914:	f7fa fe78 	bl	8000608 <__aeabi_dmul>
 8005918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800591c:	e7bc      	b.n	8005898 <_dtoa_r+0x5e8>
 800591e:	d10c      	bne.n	800593a <_dtoa_r+0x68a>
 8005920:	4b98      	ldr	r3, [pc, #608]	@ (8005b84 <_dtoa_r+0x8d4>)
 8005922:	2200      	movs	r2, #0
 8005924:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005928:	f7fa fe6e 	bl	8000608 <__aeabi_dmul>
 800592c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005930:	f7fb f8f0 	bl	8000b14 <__aeabi_dcmpge>
 8005934:	2800      	cmp	r0, #0
 8005936:	f000 8157 	beq.w	8005be8 <_dtoa_r+0x938>
 800593a:	2400      	movs	r4, #0
 800593c:	4625      	mov	r5, r4
 800593e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005940:	43db      	mvns	r3, r3
 8005942:	9304      	str	r3, [sp, #16]
 8005944:	4656      	mov	r6, sl
 8005946:	2700      	movs	r7, #0
 8005948:	4621      	mov	r1, r4
 800594a:	4658      	mov	r0, fp
 800594c:	f000 fafe 	bl	8005f4c <_Bfree>
 8005950:	2d00      	cmp	r5, #0
 8005952:	d0dc      	beq.n	800590e <_dtoa_r+0x65e>
 8005954:	b12f      	cbz	r7, 8005962 <_dtoa_r+0x6b2>
 8005956:	42af      	cmp	r7, r5
 8005958:	d003      	beq.n	8005962 <_dtoa_r+0x6b2>
 800595a:	4639      	mov	r1, r7
 800595c:	4658      	mov	r0, fp
 800595e:	f000 faf5 	bl	8005f4c <_Bfree>
 8005962:	4629      	mov	r1, r5
 8005964:	4658      	mov	r0, fp
 8005966:	f000 faf1 	bl	8005f4c <_Bfree>
 800596a:	e7d0      	b.n	800590e <_dtoa_r+0x65e>
 800596c:	9704      	str	r7, [sp, #16]
 800596e:	4633      	mov	r3, r6
 8005970:	461e      	mov	r6, r3
 8005972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005976:	2a39      	cmp	r2, #57	@ 0x39
 8005978:	d107      	bne.n	800598a <_dtoa_r+0x6da>
 800597a:	459a      	cmp	sl, r3
 800597c:	d1f8      	bne.n	8005970 <_dtoa_r+0x6c0>
 800597e:	9a04      	ldr	r2, [sp, #16]
 8005980:	3201      	adds	r2, #1
 8005982:	9204      	str	r2, [sp, #16]
 8005984:	2230      	movs	r2, #48	@ 0x30
 8005986:	f88a 2000 	strb.w	r2, [sl]
 800598a:	781a      	ldrb	r2, [r3, #0]
 800598c:	3201      	adds	r2, #1
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	e7bd      	b.n	800590e <_dtoa_r+0x65e>
 8005992:	4b7b      	ldr	r3, [pc, #492]	@ (8005b80 <_dtoa_r+0x8d0>)
 8005994:	2200      	movs	r2, #0
 8005996:	f7fa fe37 	bl	8000608 <__aeabi_dmul>
 800599a:	2200      	movs	r2, #0
 800599c:	2300      	movs	r3, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	460d      	mov	r5, r1
 80059a2:	f7fb f899 	bl	8000ad8 <__aeabi_dcmpeq>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	f43f aebb 	beq.w	8005722 <_dtoa_r+0x472>
 80059ac:	e6f0      	b.n	8005790 <_dtoa_r+0x4e0>
 80059ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80059b0:	2a00      	cmp	r2, #0
 80059b2:	f000 80db 	beq.w	8005b6c <_dtoa_r+0x8bc>
 80059b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059b8:	2a01      	cmp	r2, #1
 80059ba:	f300 80bf 	bgt.w	8005b3c <_dtoa_r+0x88c>
 80059be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80059c0:	2a00      	cmp	r2, #0
 80059c2:	f000 80b7 	beq.w	8005b34 <_dtoa_r+0x884>
 80059c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80059ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80059cc:	4646      	mov	r6, r8
 80059ce:	9a08      	ldr	r2, [sp, #32]
 80059d0:	2101      	movs	r1, #1
 80059d2:	441a      	add	r2, r3
 80059d4:	4658      	mov	r0, fp
 80059d6:	4498      	add	r8, r3
 80059d8:	9208      	str	r2, [sp, #32]
 80059da:	f000 fb6b 	bl	80060b4 <__i2b>
 80059de:	4605      	mov	r5, r0
 80059e0:	b15e      	cbz	r6, 80059fa <_dtoa_r+0x74a>
 80059e2:	9b08      	ldr	r3, [sp, #32]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dd08      	ble.n	80059fa <_dtoa_r+0x74a>
 80059e8:	42b3      	cmp	r3, r6
 80059ea:	9a08      	ldr	r2, [sp, #32]
 80059ec:	bfa8      	it	ge
 80059ee:	4633      	movge	r3, r6
 80059f0:	eba8 0803 	sub.w	r8, r8, r3
 80059f4:	1af6      	subs	r6, r6, r3
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	9308      	str	r3, [sp, #32]
 80059fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059fc:	b1f3      	cbz	r3, 8005a3c <_dtoa_r+0x78c>
 80059fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80b7 	beq.w	8005b74 <_dtoa_r+0x8c4>
 8005a06:	b18c      	cbz	r4, 8005a2c <_dtoa_r+0x77c>
 8005a08:	4629      	mov	r1, r5
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	4658      	mov	r0, fp
 8005a0e:	f000 fc11 	bl	8006234 <__pow5mult>
 8005a12:	464a      	mov	r2, r9
 8005a14:	4601      	mov	r1, r0
 8005a16:	4605      	mov	r5, r0
 8005a18:	4658      	mov	r0, fp
 8005a1a:	f000 fb61 	bl	80060e0 <__multiply>
 8005a1e:	4649      	mov	r1, r9
 8005a20:	9004      	str	r0, [sp, #16]
 8005a22:	4658      	mov	r0, fp
 8005a24:	f000 fa92 	bl	8005f4c <_Bfree>
 8005a28:	9b04      	ldr	r3, [sp, #16]
 8005a2a:	4699      	mov	r9, r3
 8005a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a2e:	1b1a      	subs	r2, r3, r4
 8005a30:	d004      	beq.n	8005a3c <_dtoa_r+0x78c>
 8005a32:	4649      	mov	r1, r9
 8005a34:	4658      	mov	r0, fp
 8005a36:	f000 fbfd 	bl	8006234 <__pow5mult>
 8005a3a:	4681      	mov	r9, r0
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	4658      	mov	r0, fp
 8005a40:	f000 fb38 	bl	80060b4 <__i2b>
 8005a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a46:	4604      	mov	r4, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 81cf 	beq.w	8005dec <_dtoa_r+0xb3c>
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4601      	mov	r1, r0
 8005a52:	4658      	mov	r0, fp
 8005a54:	f000 fbee 	bl	8006234 <__pow5mult>
 8005a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	f300 8095 	bgt.w	8005b8c <_dtoa_r+0x8dc>
 8005a62:	9b02      	ldr	r3, [sp, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f040 8087 	bne.w	8005b78 <_dtoa_r+0x8c8>
 8005a6a:	9b03      	ldr	r3, [sp, #12]
 8005a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f040 8089 	bne.w	8005b88 <_dtoa_r+0x8d8>
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a7c:	0d1b      	lsrs	r3, r3, #20
 8005a7e:	051b      	lsls	r3, r3, #20
 8005a80:	b12b      	cbz	r3, 8005a8e <_dtoa_r+0x7de>
 8005a82:	9b08      	ldr	r3, [sp, #32]
 8005a84:	3301      	adds	r3, #1
 8005a86:	9308      	str	r3, [sp, #32]
 8005a88:	f108 0801 	add.w	r8, r8, #1
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 81b0 	beq.w	8005df8 <_dtoa_r+0xb48>
 8005a98:	6923      	ldr	r3, [r4, #16]
 8005a9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a9e:	6918      	ldr	r0, [r3, #16]
 8005aa0:	f000 fabc 	bl	800601c <__hi0bits>
 8005aa4:	f1c0 0020 	rsb	r0, r0, #32
 8005aa8:	9b08      	ldr	r3, [sp, #32]
 8005aaa:	4418      	add	r0, r3
 8005aac:	f010 001f 	ands.w	r0, r0, #31
 8005ab0:	d077      	beq.n	8005ba2 <_dtoa_r+0x8f2>
 8005ab2:	f1c0 0320 	rsb	r3, r0, #32
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	dd6b      	ble.n	8005b92 <_dtoa_r+0x8e2>
 8005aba:	9b08      	ldr	r3, [sp, #32]
 8005abc:	f1c0 001c 	rsb	r0, r0, #28
 8005ac0:	4403      	add	r3, r0
 8005ac2:	4480      	add	r8, r0
 8005ac4:	4406      	add	r6, r0
 8005ac6:	9308      	str	r3, [sp, #32]
 8005ac8:	f1b8 0f00 	cmp.w	r8, #0
 8005acc:	dd05      	ble.n	8005ada <_dtoa_r+0x82a>
 8005ace:	4649      	mov	r1, r9
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	4658      	mov	r0, fp
 8005ad4:	f000 fc08 	bl	80062e8 <__lshift>
 8005ad8:	4681      	mov	r9, r0
 8005ada:	9b08      	ldr	r3, [sp, #32]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dd05      	ble.n	8005aec <_dtoa_r+0x83c>
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4658      	mov	r0, fp
 8005ae6:	f000 fbff 	bl	80062e8 <__lshift>
 8005aea:	4604      	mov	r4, r0
 8005aec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d059      	beq.n	8005ba6 <_dtoa_r+0x8f6>
 8005af2:	4621      	mov	r1, r4
 8005af4:	4648      	mov	r0, r9
 8005af6:	f000 fc63 	bl	80063c0 <__mcmp>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	da53      	bge.n	8005ba6 <_dtoa_r+0x8f6>
 8005afe:	1e7b      	subs	r3, r7, #1
 8005b00:	9304      	str	r3, [sp, #16]
 8005b02:	4649      	mov	r1, r9
 8005b04:	2300      	movs	r3, #0
 8005b06:	220a      	movs	r2, #10
 8005b08:	4658      	mov	r0, fp
 8005b0a:	f000 fa41 	bl	8005f90 <__multadd>
 8005b0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b10:	4681      	mov	r9, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 8172 	beq.w	8005dfc <_dtoa_r+0xb4c>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	220a      	movs	r2, #10
 8005b1e:	4658      	mov	r0, fp
 8005b20:	f000 fa36 	bl	8005f90 <__multadd>
 8005b24:	9b00      	ldr	r3, [sp, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	4605      	mov	r5, r0
 8005b2a:	dc67      	bgt.n	8005bfc <_dtoa_r+0x94c>
 8005b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	dc41      	bgt.n	8005bb6 <_dtoa_r+0x906>
 8005b32:	e063      	b.n	8005bfc <_dtoa_r+0x94c>
 8005b34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005b36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005b3a:	e746      	b.n	80059ca <_dtoa_r+0x71a>
 8005b3c:	9b07      	ldr	r3, [sp, #28]
 8005b3e:	1e5c      	subs	r4, r3, #1
 8005b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b42:	42a3      	cmp	r3, r4
 8005b44:	bfbf      	itttt	lt
 8005b46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005b48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005b4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005b4c:	1ae3      	sublt	r3, r4, r3
 8005b4e:	bfb4      	ite	lt
 8005b50:	18d2      	addlt	r2, r2, r3
 8005b52:	1b1c      	subge	r4, r3, r4
 8005b54:	9b07      	ldr	r3, [sp, #28]
 8005b56:	bfbc      	itt	lt
 8005b58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005b5a:	2400      	movlt	r4, #0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bfb5      	itete	lt
 8005b60:	eba8 0603 	sublt.w	r6, r8, r3
 8005b64:	9b07      	ldrge	r3, [sp, #28]
 8005b66:	2300      	movlt	r3, #0
 8005b68:	4646      	movge	r6, r8
 8005b6a:	e730      	b.n	80059ce <_dtoa_r+0x71e>
 8005b6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005b70:	4646      	mov	r6, r8
 8005b72:	e735      	b.n	80059e0 <_dtoa_r+0x730>
 8005b74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b76:	e75c      	b.n	8005a32 <_dtoa_r+0x782>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e788      	b.n	8005a8e <_dtoa_r+0x7de>
 8005b7c:	3fe00000 	.word	0x3fe00000
 8005b80:	40240000 	.word	0x40240000
 8005b84:	40140000 	.word	0x40140000
 8005b88:	9b02      	ldr	r3, [sp, #8]
 8005b8a:	e780      	b.n	8005a8e <_dtoa_r+0x7de>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b90:	e782      	b.n	8005a98 <_dtoa_r+0x7e8>
 8005b92:	d099      	beq.n	8005ac8 <_dtoa_r+0x818>
 8005b94:	9a08      	ldr	r2, [sp, #32]
 8005b96:	331c      	adds	r3, #28
 8005b98:	441a      	add	r2, r3
 8005b9a:	4498      	add	r8, r3
 8005b9c:	441e      	add	r6, r3
 8005b9e:	9208      	str	r2, [sp, #32]
 8005ba0:	e792      	b.n	8005ac8 <_dtoa_r+0x818>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	e7f6      	b.n	8005b94 <_dtoa_r+0x8e4>
 8005ba6:	9b07      	ldr	r3, [sp, #28]
 8005ba8:	9704      	str	r7, [sp, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	dc20      	bgt.n	8005bf0 <_dtoa_r+0x940>
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	dd1e      	ble.n	8005bf4 <_dtoa_r+0x944>
 8005bb6:	9b00      	ldr	r3, [sp, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f47f aec0 	bne.w	800593e <_dtoa_r+0x68e>
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	2205      	movs	r2, #5
 8005bc2:	4658      	mov	r0, fp
 8005bc4:	f000 f9e4 	bl	8005f90 <__multadd>
 8005bc8:	4601      	mov	r1, r0
 8005bca:	4604      	mov	r4, r0
 8005bcc:	4648      	mov	r0, r9
 8005bce:	f000 fbf7 	bl	80063c0 <__mcmp>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	f77f aeb3 	ble.w	800593e <_dtoa_r+0x68e>
 8005bd8:	4656      	mov	r6, sl
 8005bda:	2331      	movs	r3, #49	@ 0x31
 8005bdc:	f806 3b01 	strb.w	r3, [r6], #1
 8005be0:	9b04      	ldr	r3, [sp, #16]
 8005be2:	3301      	adds	r3, #1
 8005be4:	9304      	str	r3, [sp, #16]
 8005be6:	e6ae      	b.n	8005946 <_dtoa_r+0x696>
 8005be8:	9c07      	ldr	r4, [sp, #28]
 8005bea:	9704      	str	r7, [sp, #16]
 8005bec:	4625      	mov	r5, r4
 8005bee:	e7f3      	b.n	8005bd8 <_dtoa_r+0x928>
 8005bf0:	9b07      	ldr	r3, [sp, #28]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8104 	beq.w	8005e04 <_dtoa_r+0xb54>
 8005bfc:	2e00      	cmp	r6, #0
 8005bfe:	dd05      	ble.n	8005c0c <_dtoa_r+0x95c>
 8005c00:	4629      	mov	r1, r5
 8005c02:	4632      	mov	r2, r6
 8005c04:	4658      	mov	r0, fp
 8005c06:	f000 fb6f 	bl	80062e8 <__lshift>
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d05a      	beq.n	8005cc8 <_dtoa_r+0xa18>
 8005c12:	6869      	ldr	r1, [r5, #4]
 8005c14:	4658      	mov	r0, fp
 8005c16:	f000 f959 	bl	8005ecc <_Balloc>
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	b928      	cbnz	r0, 8005c2a <_dtoa_r+0x97a>
 8005c1e:	4b84      	ldr	r3, [pc, #528]	@ (8005e30 <_dtoa_r+0xb80>)
 8005c20:	4602      	mov	r2, r0
 8005c22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005c26:	f7ff bb5a 	b.w	80052de <_dtoa_r+0x2e>
 8005c2a:	692a      	ldr	r2, [r5, #16]
 8005c2c:	3202      	adds	r2, #2
 8005c2e:	0092      	lsls	r2, r2, #2
 8005c30:	f105 010c 	add.w	r1, r5, #12
 8005c34:	300c      	adds	r0, #12
 8005c36:	f001 f8af 	bl	8006d98 <memcpy>
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4658      	mov	r0, fp
 8005c40:	f000 fb52 	bl	80062e8 <__lshift>
 8005c44:	f10a 0301 	add.w	r3, sl, #1
 8005c48:	9307      	str	r3, [sp, #28]
 8005c4a:	9b00      	ldr	r3, [sp, #0]
 8005c4c:	4453      	add	r3, sl
 8005c4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c50:	9b02      	ldr	r3, [sp, #8]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	462f      	mov	r7, r5
 8005c58:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	9b07      	ldr	r3, [sp, #28]
 8005c5e:	4621      	mov	r1, r4
 8005c60:	3b01      	subs	r3, #1
 8005c62:	4648      	mov	r0, r9
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	f7ff fa9a 	bl	800519e <quorem>
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	9002      	str	r0, [sp, #8]
 8005c6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005c72:	4648      	mov	r0, r9
 8005c74:	f000 fba4 	bl	80063c0 <__mcmp>
 8005c78:	462a      	mov	r2, r5
 8005c7a:	9008      	str	r0, [sp, #32]
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	4658      	mov	r0, fp
 8005c80:	f000 fbba 	bl	80063f8 <__mdiff>
 8005c84:	68c2      	ldr	r2, [r0, #12]
 8005c86:	4606      	mov	r6, r0
 8005c88:	bb02      	cbnz	r2, 8005ccc <_dtoa_r+0xa1c>
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	4648      	mov	r0, r9
 8005c8e:	f000 fb97 	bl	80063c0 <__mcmp>
 8005c92:	4602      	mov	r2, r0
 8005c94:	4631      	mov	r1, r6
 8005c96:	4658      	mov	r0, fp
 8005c98:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c9a:	f000 f957 	bl	8005f4c <_Bfree>
 8005c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ca0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ca2:	9e07      	ldr	r6, [sp, #28]
 8005ca4:	ea43 0102 	orr.w	r1, r3, r2
 8005ca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005caa:	4319      	orrs	r1, r3
 8005cac:	d110      	bne.n	8005cd0 <_dtoa_r+0xa20>
 8005cae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005cb2:	d029      	beq.n	8005d08 <_dtoa_r+0xa58>
 8005cb4:	9b08      	ldr	r3, [sp, #32]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	dd02      	ble.n	8005cc0 <_dtoa_r+0xa10>
 8005cba:	9b02      	ldr	r3, [sp, #8]
 8005cbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005cc0:	9b00      	ldr	r3, [sp, #0]
 8005cc2:	f883 8000 	strb.w	r8, [r3]
 8005cc6:	e63f      	b.n	8005948 <_dtoa_r+0x698>
 8005cc8:	4628      	mov	r0, r5
 8005cca:	e7bb      	b.n	8005c44 <_dtoa_r+0x994>
 8005ccc:	2201      	movs	r2, #1
 8005cce:	e7e1      	b.n	8005c94 <_dtoa_r+0x9e4>
 8005cd0:	9b08      	ldr	r3, [sp, #32]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	db04      	blt.n	8005ce0 <_dtoa_r+0xa30>
 8005cd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	d120      	bne.n	8005d22 <_dtoa_r+0xa72>
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	dded      	ble.n	8005cc0 <_dtoa_r+0xa10>
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	4658      	mov	r0, fp
 8005cea:	f000 fafd 	bl	80062e8 <__lshift>
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4681      	mov	r9, r0
 8005cf2:	f000 fb65 	bl	80063c0 <__mcmp>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	dc03      	bgt.n	8005d02 <_dtoa_r+0xa52>
 8005cfa:	d1e1      	bne.n	8005cc0 <_dtoa_r+0xa10>
 8005cfc:	f018 0f01 	tst.w	r8, #1
 8005d00:	d0de      	beq.n	8005cc0 <_dtoa_r+0xa10>
 8005d02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d06:	d1d8      	bne.n	8005cba <_dtoa_r+0xa0a>
 8005d08:	9a00      	ldr	r2, [sp, #0]
 8005d0a:	2339      	movs	r3, #57	@ 0x39
 8005d0c:	7013      	strb	r3, [r2, #0]
 8005d0e:	4633      	mov	r3, r6
 8005d10:	461e      	mov	r6, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005d18:	2a39      	cmp	r2, #57	@ 0x39
 8005d1a:	d052      	beq.n	8005dc2 <_dtoa_r+0xb12>
 8005d1c:	3201      	adds	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e612      	b.n	8005948 <_dtoa_r+0x698>
 8005d22:	2a00      	cmp	r2, #0
 8005d24:	dd07      	ble.n	8005d36 <_dtoa_r+0xa86>
 8005d26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d2a:	d0ed      	beq.n	8005d08 <_dtoa_r+0xa58>
 8005d2c:	9a00      	ldr	r2, [sp, #0]
 8005d2e:	f108 0301 	add.w	r3, r8, #1
 8005d32:	7013      	strb	r3, [r2, #0]
 8005d34:	e608      	b.n	8005948 <_dtoa_r+0x698>
 8005d36:	9b07      	ldr	r3, [sp, #28]
 8005d38:	9a07      	ldr	r2, [sp, #28]
 8005d3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005d3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d028      	beq.n	8005d96 <_dtoa_r+0xae6>
 8005d44:	4649      	mov	r1, r9
 8005d46:	2300      	movs	r3, #0
 8005d48:	220a      	movs	r2, #10
 8005d4a:	4658      	mov	r0, fp
 8005d4c:	f000 f920 	bl	8005f90 <__multadd>
 8005d50:	42af      	cmp	r7, r5
 8005d52:	4681      	mov	r9, r0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	f04f 020a 	mov.w	r2, #10
 8005d5c:	4639      	mov	r1, r7
 8005d5e:	4658      	mov	r0, fp
 8005d60:	d107      	bne.n	8005d72 <_dtoa_r+0xac2>
 8005d62:	f000 f915 	bl	8005f90 <__multadd>
 8005d66:	4607      	mov	r7, r0
 8005d68:	4605      	mov	r5, r0
 8005d6a:	9b07      	ldr	r3, [sp, #28]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	9307      	str	r3, [sp, #28]
 8005d70:	e774      	b.n	8005c5c <_dtoa_r+0x9ac>
 8005d72:	f000 f90d 	bl	8005f90 <__multadd>
 8005d76:	4629      	mov	r1, r5
 8005d78:	4607      	mov	r7, r0
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	220a      	movs	r2, #10
 8005d7e:	4658      	mov	r0, fp
 8005d80:	f000 f906 	bl	8005f90 <__multadd>
 8005d84:	4605      	mov	r5, r0
 8005d86:	e7f0      	b.n	8005d6a <_dtoa_r+0xaba>
 8005d88:	9b00      	ldr	r3, [sp, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bfcc      	ite	gt
 8005d8e:	461e      	movgt	r6, r3
 8005d90:	2601      	movle	r6, #1
 8005d92:	4456      	add	r6, sl
 8005d94:	2700      	movs	r7, #0
 8005d96:	4649      	mov	r1, r9
 8005d98:	2201      	movs	r2, #1
 8005d9a:	4658      	mov	r0, fp
 8005d9c:	f000 faa4 	bl	80062e8 <__lshift>
 8005da0:	4621      	mov	r1, r4
 8005da2:	4681      	mov	r9, r0
 8005da4:	f000 fb0c 	bl	80063c0 <__mcmp>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	dcb0      	bgt.n	8005d0e <_dtoa_r+0xa5e>
 8005dac:	d102      	bne.n	8005db4 <_dtoa_r+0xb04>
 8005dae:	f018 0f01 	tst.w	r8, #1
 8005db2:	d1ac      	bne.n	8005d0e <_dtoa_r+0xa5e>
 8005db4:	4633      	mov	r3, r6
 8005db6:	461e      	mov	r6, r3
 8005db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dbc:	2a30      	cmp	r2, #48	@ 0x30
 8005dbe:	d0fa      	beq.n	8005db6 <_dtoa_r+0xb06>
 8005dc0:	e5c2      	b.n	8005948 <_dtoa_r+0x698>
 8005dc2:	459a      	cmp	sl, r3
 8005dc4:	d1a4      	bne.n	8005d10 <_dtoa_r+0xa60>
 8005dc6:	9b04      	ldr	r3, [sp, #16]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	2331      	movs	r3, #49	@ 0x31
 8005dce:	f88a 3000 	strb.w	r3, [sl]
 8005dd2:	e5b9      	b.n	8005948 <_dtoa_r+0x698>
 8005dd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005dd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005e34 <_dtoa_r+0xb84>
 8005dda:	b11b      	cbz	r3, 8005de4 <_dtoa_r+0xb34>
 8005ddc:	f10a 0308 	add.w	r3, sl, #8
 8005de0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	4650      	mov	r0, sl
 8005de6:	b019      	add	sp, #100	@ 0x64
 8005de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	f77f ae37 	ble.w	8005a62 <_dtoa_r+0x7b2>
 8005df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005df6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005df8:	2001      	movs	r0, #1
 8005dfa:	e655      	b.n	8005aa8 <_dtoa_r+0x7f8>
 8005dfc:	9b00      	ldr	r3, [sp, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f77f aed6 	ble.w	8005bb0 <_dtoa_r+0x900>
 8005e04:	4656      	mov	r6, sl
 8005e06:	4621      	mov	r1, r4
 8005e08:	4648      	mov	r0, r9
 8005e0a:	f7ff f9c8 	bl	800519e <quorem>
 8005e0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005e12:	f806 8b01 	strb.w	r8, [r6], #1
 8005e16:	9b00      	ldr	r3, [sp, #0]
 8005e18:	eba6 020a 	sub.w	r2, r6, sl
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	ddb3      	ble.n	8005d88 <_dtoa_r+0xad8>
 8005e20:	4649      	mov	r1, r9
 8005e22:	2300      	movs	r3, #0
 8005e24:	220a      	movs	r2, #10
 8005e26:	4658      	mov	r0, fp
 8005e28:	f000 f8b2 	bl	8005f90 <__multadd>
 8005e2c:	4681      	mov	r9, r0
 8005e2e:	e7ea      	b.n	8005e06 <_dtoa_r+0xb56>
 8005e30:	08008f74 	.word	0x08008f74
 8005e34:	08008ef8 	.word	0x08008ef8

08005e38 <_free_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	d041      	beq.n	8005ec4 <_free_r+0x8c>
 8005e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e44:	1f0c      	subs	r4, r1, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	bfb8      	it	lt
 8005e4a:	18e4      	addlt	r4, r4, r3
 8005e4c:	f7fe fa76 	bl	800433c <__malloc_lock>
 8005e50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec8 <_free_r+0x90>)
 8005e52:	6813      	ldr	r3, [r2, #0]
 8005e54:	b933      	cbnz	r3, 8005e64 <_free_r+0x2c>
 8005e56:	6063      	str	r3, [r4, #4]
 8005e58:	6014      	str	r4, [r2, #0]
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e60:	f7fe ba72 	b.w	8004348 <__malloc_unlock>
 8005e64:	42a3      	cmp	r3, r4
 8005e66:	d908      	bls.n	8005e7a <_free_r+0x42>
 8005e68:	6820      	ldr	r0, [r4, #0]
 8005e6a:	1821      	adds	r1, r4, r0
 8005e6c:	428b      	cmp	r3, r1
 8005e6e:	bf01      	itttt	eq
 8005e70:	6819      	ldreq	r1, [r3, #0]
 8005e72:	685b      	ldreq	r3, [r3, #4]
 8005e74:	1809      	addeq	r1, r1, r0
 8005e76:	6021      	streq	r1, [r4, #0]
 8005e78:	e7ed      	b.n	8005e56 <_free_r+0x1e>
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b10b      	cbz	r3, 8005e84 <_free_r+0x4c>
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	d9fa      	bls.n	8005e7a <_free_r+0x42>
 8005e84:	6811      	ldr	r1, [r2, #0]
 8005e86:	1850      	adds	r0, r2, r1
 8005e88:	42a0      	cmp	r0, r4
 8005e8a:	d10b      	bne.n	8005ea4 <_free_r+0x6c>
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	4401      	add	r1, r0
 8005e90:	1850      	adds	r0, r2, r1
 8005e92:	4283      	cmp	r3, r0
 8005e94:	6011      	str	r1, [r2, #0]
 8005e96:	d1e0      	bne.n	8005e5a <_free_r+0x22>
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	6053      	str	r3, [r2, #4]
 8005e9e:	4408      	add	r0, r1
 8005ea0:	6010      	str	r0, [r2, #0]
 8005ea2:	e7da      	b.n	8005e5a <_free_r+0x22>
 8005ea4:	d902      	bls.n	8005eac <_free_r+0x74>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	602b      	str	r3, [r5, #0]
 8005eaa:	e7d6      	b.n	8005e5a <_free_r+0x22>
 8005eac:	6820      	ldr	r0, [r4, #0]
 8005eae:	1821      	adds	r1, r4, r0
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	bf04      	itt	eq
 8005eb4:	6819      	ldreq	r1, [r3, #0]
 8005eb6:	685b      	ldreq	r3, [r3, #4]
 8005eb8:	6063      	str	r3, [r4, #4]
 8005eba:	bf04      	itt	eq
 8005ebc:	1809      	addeq	r1, r1, r0
 8005ebe:	6021      	streq	r1, [r4, #0]
 8005ec0:	6054      	str	r4, [r2, #4]
 8005ec2:	e7ca      	b.n	8005e5a <_free_r+0x22>
 8005ec4:	bd38      	pop	{r3, r4, r5, pc}
 8005ec6:	bf00      	nop
 8005ec8:	200002e8 	.word	0x200002e8

08005ecc <_Balloc>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	69c6      	ldr	r6, [r0, #28]
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	460d      	mov	r5, r1
 8005ed4:	b976      	cbnz	r6, 8005ef4 <_Balloc+0x28>
 8005ed6:	2010      	movs	r0, #16
 8005ed8:	f7fe f97e 	bl	80041d8 <malloc>
 8005edc:	4602      	mov	r2, r0
 8005ede:	61e0      	str	r0, [r4, #28]
 8005ee0:	b920      	cbnz	r0, 8005eec <_Balloc+0x20>
 8005ee2:	4b18      	ldr	r3, [pc, #96]	@ (8005f44 <_Balloc+0x78>)
 8005ee4:	4818      	ldr	r0, [pc, #96]	@ (8005f48 <_Balloc+0x7c>)
 8005ee6:	216b      	movs	r1, #107	@ 0x6b
 8005ee8:	f000 ff64 	bl	8006db4 <__assert_func>
 8005eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ef0:	6006      	str	r6, [r0, #0]
 8005ef2:	60c6      	str	r6, [r0, #12]
 8005ef4:	69e6      	ldr	r6, [r4, #28]
 8005ef6:	68f3      	ldr	r3, [r6, #12]
 8005ef8:	b183      	cbz	r3, 8005f1c <_Balloc+0x50>
 8005efa:	69e3      	ldr	r3, [r4, #28]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f02:	b9b8      	cbnz	r0, 8005f34 <_Balloc+0x68>
 8005f04:	2101      	movs	r1, #1
 8005f06:	fa01 f605 	lsl.w	r6, r1, r5
 8005f0a:	1d72      	adds	r2, r6, #5
 8005f0c:	0092      	lsls	r2, r2, #2
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f000 ff6e 	bl	8006df0 <_calloc_r>
 8005f14:	b160      	cbz	r0, 8005f30 <_Balloc+0x64>
 8005f16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f1a:	e00e      	b.n	8005f3a <_Balloc+0x6e>
 8005f1c:	2221      	movs	r2, #33	@ 0x21
 8005f1e:	2104      	movs	r1, #4
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 ff65 	bl	8006df0 <_calloc_r>
 8005f26:	69e3      	ldr	r3, [r4, #28]
 8005f28:	60f0      	str	r0, [r6, #12]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e4      	bne.n	8005efa <_Balloc+0x2e>
 8005f30:	2000      	movs	r0, #0
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	6802      	ldr	r2, [r0, #0]
 8005f36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f40:	e7f7      	b.n	8005f32 <_Balloc+0x66>
 8005f42:	bf00      	nop
 8005f44:	08008f05 	.word	0x08008f05
 8005f48:	08008f85 	.word	0x08008f85

08005f4c <_Bfree>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	69c6      	ldr	r6, [r0, #28]
 8005f50:	4605      	mov	r5, r0
 8005f52:	460c      	mov	r4, r1
 8005f54:	b976      	cbnz	r6, 8005f74 <_Bfree+0x28>
 8005f56:	2010      	movs	r0, #16
 8005f58:	f7fe f93e 	bl	80041d8 <malloc>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	61e8      	str	r0, [r5, #28]
 8005f60:	b920      	cbnz	r0, 8005f6c <_Bfree+0x20>
 8005f62:	4b09      	ldr	r3, [pc, #36]	@ (8005f88 <_Bfree+0x3c>)
 8005f64:	4809      	ldr	r0, [pc, #36]	@ (8005f8c <_Bfree+0x40>)
 8005f66:	218f      	movs	r1, #143	@ 0x8f
 8005f68:	f000 ff24 	bl	8006db4 <__assert_func>
 8005f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f70:	6006      	str	r6, [r0, #0]
 8005f72:	60c6      	str	r6, [r0, #12]
 8005f74:	b13c      	cbz	r4, 8005f86 <_Bfree+0x3a>
 8005f76:	69eb      	ldr	r3, [r5, #28]
 8005f78:	6862      	ldr	r2, [r4, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f80:	6021      	str	r1, [r4, #0]
 8005f82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
 8005f88:	08008f05 	.word	0x08008f05
 8005f8c:	08008f85 	.word	0x08008f85

08005f90 <__multadd>:
 8005f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f94:	690d      	ldr	r5, [r1, #16]
 8005f96:	4607      	mov	r7, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	461e      	mov	r6, r3
 8005f9c:	f101 0c14 	add.w	ip, r1, #20
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f8dc 3000 	ldr.w	r3, [ip]
 8005fa6:	b299      	uxth	r1, r3
 8005fa8:	fb02 6101 	mla	r1, r2, r1, r6
 8005fac:	0c1e      	lsrs	r6, r3, #16
 8005fae:	0c0b      	lsrs	r3, r1, #16
 8005fb0:	fb02 3306 	mla	r3, r2, r6, r3
 8005fb4:	b289      	uxth	r1, r1
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005fbc:	4285      	cmp	r5, r0
 8005fbe:	f84c 1b04 	str.w	r1, [ip], #4
 8005fc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005fc6:	dcec      	bgt.n	8005fa2 <__multadd+0x12>
 8005fc8:	b30e      	cbz	r6, 800600e <__multadd+0x7e>
 8005fca:	68a3      	ldr	r3, [r4, #8]
 8005fcc:	42ab      	cmp	r3, r5
 8005fce:	dc19      	bgt.n	8006004 <__multadd+0x74>
 8005fd0:	6861      	ldr	r1, [r4, #4]
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	3101      	adds	r1, #1
 8005fd6:	f7ff ff79 	bl	8005ecc <_Balloc>
 8005fda:	4680      	mov	r8, r0
 8005fdc:	b928      	cbnz	r0, 8005fea <__multadd+0x5a>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8006014 <__multadd+0x84>)
 8005fe2:	480d      	ldr	r0, [pc, #52]	@ (8006018 <__multadd+0x88>)
 8005fe4:	21ba      	movs	r1, #186	@ 0xba
 8005fe6:	f000 fee5 	bl	8006db4 <__assert_func>
 8005fea:	6922      	ldr	r2, [r4, #16]
 8005fec:	3202      	adds	r2, #2
 8005fee:	f104 010c 	add.w	r1, r4, #12
 8005ff2:	0092      	lsls	r2, r2, #2
 8005ff4:	300c      	adds	r0, #12
 8005ff6:	f000 fecf 	bl	8006d98 <memcpy>
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f7ff ffa5 	bl	8005f4c <_Bfree>
 8006002:	4644      	mov	r4, r8
 8006004:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006008:	3501      	adds	r5, #1
 800600a:	615e      	str	r6, [r3, #20]
 800600c:	6125      	str	r5, [r4, #16]
 800600e:	4620      	mov	r0, r4
 8006010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006014:	08008f74 	.word	0x08008f74
 8006018:	08008f85 	.word	0x08008f85

0800601c <__hi0bits>:
 800601c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006020:	4603      	mov	r3, r0
 8006022:	bf36      	itet	cc
 8006024:	0403      	lslcc	r3, r0, #16
 8006026:	2000      	movcs	r0, #0
 8006028:	2010      	movcc	r0, #16
 800602a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800602e:	bf3c      	itt	cc
 8006030:	021b      	lslcc	r3, r3, #8
 8006032:	3008      	addcc	r0, #8
 8006034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006038:	bf3c      	itt	cc
 800603a:	011b      	lslcc	r3, r3, #4
 800603c:	3004      	addcc	r0, #4
 800603e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006042:	bf3c      	itt	cc
 8006044:	009b      	lslcc	r3, r3, #2
 8006046:	3002      	addcc	r0, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	db05      	blt.n	8006058 <__hi0bits+0x3c>
 800604c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006050:	f100 0001 	add.w	r0, r0, #1
 8006054:	bf08      	it	eq
 8006056:	2020      	moveq	r0, #32
 8006058:	4770      	bx	lr

0800605a <__lo0bits>:
 800605a:	6803      	ldr	r3, [r0, #0]
 800605c:	4602      	mov	r2, r0
 800605e:	f013 0007 	ands.w	r0, r3, #7
 8006062:	d00b      	beq.n	800607c <__lo0bits+0x22>
 8006064:	07d9      	lsls	r1, r3, #31
 8006066:	d421      	bmi.n	80060ac <__lo0bits+0x52>
 8006068:	0798      	lsls	r0, r3, #30
 800606a:	bf49      	itett	mi
 800606c:	085b      	lsrmi	r3, r3, #1
 800606e:	089b      	lsrpl	r3, r3, #2
 8006070:	2001      	movmi	r0, #1
 8006072:	6013      	strmi	r3, [r2, #0]
 8006074:	bf5c      	itt	pl
 8006076:	6013      	strpl	r3, [r2, #0]
 8006078:	2002      	movpl	r0, #2
 800607a:	4770      	bx	lr
 800607c:	b299      	uxth	r1, r3
 800607e:	b909      	cbnz	r1, 8006084 <__lo0bits+0x2a>
 8006080:	0c1b      	lsrs	r3, r3, #16
 8006082:	2010      	movs	r0, #16
 8006084:	b2d9      	uxtb	r1, r3
 8006086:	b909      	cbnz	r1, 800608c <__lo0bits+0x32>
 8006088:	3008      	adds	r0, #8
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	0719      	lsls	r1, r3, #28
 800608e:	bf04      	itt	eq
 8006090:	091b      	lsreq	r3, r3, #4
 8006092:	3004      	addeq	r0, #4
 8006094:	0799      	lsls	r1, r3, #30
 8006096:	bf04      	itt	eq
 8006098:	089b      	lsreq	r3, r3, #2
 800609a:	3002      	addeq	r0, #2
 800609c:	07d9      	lsls	r1, r3, #31
 800609e:	d403      	bmi.n	80060a8 <__lo0bits+0x4e>
 80060a0:	085b      	lsrs	r3, r3, #1
 80060a2:	f100 0001 	add.w	r0, r0, #1
 80060a6:	d003      	beq.n	80060b0 <__lo0bits+0x56>
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	4770      	bx	lr
 80060ac:	2000      	movs	r0, #0
 80060ae:	4770      	bx	lr
 80060b0:	2020      	movs	r0, #32
 80060b2:	4770      	bx	lr

080060b4 <__i2b>:
 80060b4:	b510      	push	{r4, lr}
 80060b6:	460c      	mov	r4, r1
 80060b8:	2101      	movs	r1, #1
 80060ba:	f7ff ff07 	bl	8005ecc <_Balloc>
 80060be:	4602      	mov	r2, r0
 80060c0:	b928      	cbnz	r0, 80060ce <__i2b+0x1a>
 80060c2:	4b05      	ldr	r3, [pc, #20]	@ (80060d8 <__i2b+0x24>)
 80060c4:	4805      	ldr	r0, [pc, #20]	@ (80060dc <__i2b+0x28>)
 80060c6:	f240 1145 	movw	r1, #325	@ 0x145
 80060ca:	f000 fe73 	bl	8006db4 <__assert_func>
 80060ce:	2301      	movs	r3, #1
 80060d0:	6144      	str	r4, [r0, #20]
 80060d2:	6103      	str	r3, [r0, #16]
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	bf00      	nop
 80060d8:	08008f74 	.word	0x08008f74
 80060dc:	08008f85 	.word	0x08008f85

080060e0 <__multiply>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	4614      	mov	r4, r2
 80060e6:	690a      	ldr	r2, [r1, #16]
 80060e8:	6923      	ldr	r3, [r4, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	bfa8      	it	ge
 80060ee:	4623      	movge	r3, r4
 80060f0:	460f      	mov	r7, r1
 80060f2:	bfa4      	itt	ge
 80060f4:	460c      	movge	r4, r1
 80060f6:	461f      	movge	r7, r3
 80060f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80060fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006100:	68a3      	ldr	r3, [r4, #8]
 8006102:	6861      	ldr	r1, [r4, #4]
 8006104:	eb0a 0609 	add.w	r6, sl, r9
 8006108:	42b3      	cmp	r3, r6
 800610a:	b085      	sub	sp, #20
 800610c:	bfb8      	it	lt
 800610e:	3101      	addlt	r1, #1
 8006110:	f7ff fedc 	bl	8005ecc <_Balloc>
 8006114:	b930      	cbnz	r0, 8006124 <__multiply+0x44>
 8006116:	4602      	mov	r2, r0
 8006118:	4b44      	ldr	r3, [pc, #272]	@ (800622c <__multiply+0x14c>)
 800611a:	4845      	ldr	r0, [pc, #276]	@ (8006230 <__multiply+0x150>)
 800611c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006120:	f000 fe48 	bl	8006db4 <__assert_func>
 8006124:	f100 0514 	add.w	r5, r0, #20
 8006128:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800612c:	462b      	mov	r3, r5
 800612e:	2200      	movs	r2, #0
 8006130:	4543      	cmp	r3, r8
 8006132:	d321      	bcc.n	8006178 <__multiply+0x98>
 8006134:	f107 0114 	add.w	r1, r7, #20
 8006138:	f104 0214 	add.w	r2, r4, #20
 800613c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006140:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006144:	9302      	str	r3, [sp, #8]
 8006146:	1b13      	subs	r3, r2, r4
 8006148:	3b15      	subs	r3, #21
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	3304      	adds	r3, #4
 8006150:	f104 0715 	add.w	r7, r4, #21
 8006154:	42ba      	cmp	r2, r7
 8006156:	bf38      	it	cc
 8006158:	2304      	movcc	r3, #4
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	9b02      	ldr	r3, [sp, #8]
 800615e:	9103      	str	r1, [sp, #12]
 8006160:	428b      	cmp	r3, r1
 8006162:	d80c      	bhi.n	800617e <__multiply+0x9e>
 8006164:	2e00      	cmp	r6, #0
 8006166:	dd03      	ble.n	8006170 <__multiply+0x90>
 8006168:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800616c:	2b00      	cmp	r3, #0
 800616e:	d05b      	beq.n	8006228 <__multiply+0x148>
 8006170:	6106      	str	r6, [r0, #16]
 8006172:	b005      	add	sp, #20
 8006174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006178:	f843 2b04 	str.w	r2, [r3], #4
 800617c:	e7d8      	b.n	8006130 <__multiply+0x50>
 800617e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006182:	f1ba 0f00 	cmp.w	sl, #0
 8006186:	d024      	beq.n	80061d2 <__multiply+0xf2>
 8006188:	f104 0e14 	add.w	lr, r4, #20
 800618c:	46a9      	mov	r9, r5
 800618e:	f04f 0c00 	mov.w	ip, #0
 8006192:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006196:	f8d9 3000 	ldr.w	r3, [r9]
 800619a:	fa1f fb87 	uxth.w	fp, r7
 800619e:	b29b      	uxth	r3, r3
 80061a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80061a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80061a8:	f8d9 7000 	ldr.w	r7, [r9]
 80061ac:	4463      	add	r3, ip
 80061ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80061b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80061b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80061c0:	4572      	cmp	r2, lr
 80061c2:	f849 3b04 	str.w	r3, [r9], #4
 80061c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80061ca:	d8e2      	bhi.n	8006192 <__multiply+0xb2>
 80061cc:	9b01      	ldr	r3, [sp, #4]
 80061ce:	f845 c003 	str.w	ip, [r5, r3]
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80061d8:	3104      	adds	r1, #4
 80061da:	f1b9 0f00 	cmp.w	r9, #0
 80061de:	d021      	beq.n	8006224 <__multiply+0x144>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	f104 0c14 	add.w	ip, r4, #20
 80061e6:	46ae      	mov	lr, r5
 80061e8:	f04f 0a00 	mov.w	sl, #0
 80061ec:	f8bc b000 	ldrh.w	fp, [ip]
 80061f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80061f4:	fb09 770b 	mla	r7, r9, fp, r7
 80061f8:	4457      	add	r7, sl
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006200:	f84e 3b04 	str.w	r3, [lr], #4
 8006204:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006208:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800620c:	f8be 3000 	ldrh.w	r3, [lr]
 8006210:	fb09 330a 	mla	r3, r9, sl, r3
 8006214:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006218:	4562      	cmp	r2, ip
 800621a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800621e:	d8e5      	bhi.n	80061ec <__multiply+0x10c>
 8006220:	9f01      	ldr	r7, [sp, #4]
 8006222:	51eb      	str	r3, [r5, r7]
 8006224:	3504      	adds	r5, #4
 8006226:	e799      	b.n	800615c <__multiply+0x7c>
 8006228:	3e01      	subs	r6, #1
 800622a:	e79b      	b.n	8006164 <__multiply+0x84>
 800622c:	08008f74 	.word	0x08008f74
 8006230:	08008f85 	.word	0x08008f85

08006234 <__pow5mult>:
 8006234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006238:	4615      	mov	r5, r2
 800623a:	f012 0203 	ands.w	r2, r2, #3
 800623e:	4607      	mov	r7, r0
 8006240:	460e      	mov	r6, r1
 8006242:	d007      	beq.n	8006254 <__pow5mult+0x20>
 8006244:	4c25      	ldr	r4, [pc, #148]	@ (80062dc <__pow5mult+0xa8>)
 8006246:	3a01      	subs	r2, #1
 8006248:	2300      	movs	r3, #0
 800624a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800624e:	f7ff fe9f 	bl	8005f90 <__multadd>
 8006252:	4606      	mov	r6, r0
 8006254:	10ad      	asrs	r5, r5, #2
 8006256:	d03d      	beq.n	80062d4 <__pow5mult+0xa0>
 8006258:	69fc      	ldr	r4, [r7, #28]
 800625a:	b97c      	cbnz	r4, 800627c <__pow5mult+0x48>
 800625c:	2010      	movs	r0, #16
 800625e:	f7fd ffbb 	bl	80041d8 <malloc>
 8006262:	4602      	mov	r2, r0
 8006264:	61f8      	str	r0, [r7, #28]
 8006266:	b928      	cbnz	r0, 8006274 <__pow5mult+0x40>
 8006268:	4b1d      	ldr	r3, [pc, #116]	@ (80062e0 <__pow5mult+0xac>)
 800626a:	481e      	ldr	r0, [pc, #120]	@ (80062e4 <__pow5mult+0xb0>)
 800626c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006270:	f000 fda0 	bl	8006db4 <__assert_func>
 8006274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006278:	6004      	str	r4, [r0, #0]
 800627a:	60c4      	str	r4, [r0, #12]
 800627c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006284:	b94c      	cbnz	r4, 800629a <__pow5mult+0x66>
 8006286:	f240 2171 	movw	r1, #625	@ 0x271
 800628a:	4638      	mov	r0, r7
 800628c:	f7ff ff12 	bl	80060b4 <__i2b>
 8006290:	2300      	movs	r3, #0
 8006292:	f8c8 0008 	str.w	r0, [r8, #8]
 8006296:	4604      	mov	r4, r0
 8006298:	6003      	str	r3, [r0, #0]
 800629a:	f04f 0900 	mov.w	r9, #0
 800629e:	07eb      	lsls	r3, r5, #31
 80062a0:	d50a      	bpl.n	80062b8 <__pow5mult+0x84>
 80062a2:	4631      	mov	r1, r6
 80062a4:	4622      	mov	r2, r4
 80062a6:	4638      	mov	r0, r7
 80062a8:	f7ff ff1a 	bl	80060e0 <__multiply>
 80062ac:	4631      	mov	r1, r6
 80062ae:	4680      	mov	r8, r0
 80062b0:	4638      	mov	r0, r7
 80062b2:	f7ff fe4b 	bl	8005f4c <_Bfree>
 80062b6:	4646      	mov	r6, r8
 80062b8:	106d      	asrs	r5, r5, #1
 80062ba:	d00b      	beq.n	80062d4 <__pow5mult+0xa0>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	b938      	cbnz	r0, 80062d0 <__pow5mult+0x9c>
 80062c0:	4622      	mov	r2, r4
 80062c2:	4621      	mov	r1, r4
 80062c4:	4638      	mov	r0, r7
 80062c6:	f7ff ff0b 	bl	80060e0 <__multiply>
 80062ca:	6020      	str	r0, [r4, #0]
 80062cc:	f8c0 9000 	str.w	r9, [r0]
 80062d0:	4604      	mov	r4, r0
 80062d2:	e7e4      	b.n	800629e <__pow5mult+0x6a>
 80062d4:	4630      	mov	r0, r6
 80062d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062da:	bf00      	nop
 80062dc:	08008fe0 	.word	0x08008fe0
 80062e0:	08008f05 	.word	0x08008f05
 80062e4:	08008f85 	.word	0x08008f85

080062e8 <__lshift>:
 80062e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ec:	460c      	mov	r4, r1
 80062ee:	6849      	ldr	r1, [r1, #4]
 80062f0:	6923      	ldr	r3, [r4, #16]
 80062f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062f6:	68a3      	ldr	r3, [r4, #8]
 80062f8:	4607      	mov	r7, r0
 80062fa:	4691      	mov	r9, r2
 80062fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006300:	f108 0601 	add.w	r6, r8, #1
 8006304:	42b3      	cmp	r3, r6
 8006306:	db0b      	blt.n	8006320 <__lshift+0x38>
 8006308:	4638      	mov	r0, r7
 800630a:	f7ff fddf 	bl	8005ecc <_Balloc>
 800630e:	4605      	mov	r5, r0
 8006310:	b948      	cbnz	r0, 8006326 <__lshift+0x3e>
 8006312:	4602      	mov	r2, r0
 8006314:	4b28      	ldr	r3, [pc, #160]	@ (80063b8 <__lshift+0xd0>)
 8006316:	4829      	ldr	r0, [pc, #164]	@ (80063bc <__lshift+0xd4>)
 8006318:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800631c:	f000 fd4a 	bl	8006db4 <__assert_func>
 8006320:	3101      	adds	r1, #1
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	e7ee      	b.n	8006304 <__lshift+0x1c>
 8006326:	2300      	movs	r3, #0
 8006328:	f100 0114 	add.w	r1, r0, #20
 800632c:	f100 0210 	add.w	r2, r0, #16
 8006330:	4618      	mov	r0, r3
 8006332:	4553      	cmp	r3, sl
 8006334:	db33      	blt.n	800639e <__lshift+0xb6>
 8006336:	6920      	ldr	r0, [r4, #16]
 8006338:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800633c:	f104 0314 	add.w	r3, r4, #20
 8006340:	f019 091f 	ands.w	r9, r9, #31
 8006344:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006348:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800634c:	d02b      	beq.n	80063a6 <__lshift+0xbe>
 800634e:	f1c9 0e20 	rsb	lr, r9, #32
 8006352:	468a      	mov	sl, r1
 8006354:	2200      	movs	r2, #0
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	fa00 f009 	lsl.w	r0, r0, r9
 800635c:	4310      	orrs	r0, r2
 800635e:	f84a 0b04 	str.w	r0, [sl], #4
 8006362:	f853 2b04 	ldr.w	r2, [r3], #4
 8006366:	459c      	cmp	ip, r3
 8006368:	fa22 f20e 	lsr.w	r2, r2, lr
 800636c:	d8f3      	bhi.n	8006356 <__lshift+0x6e>
 800636e:	ebac 0304 	sub.w	r3, ip, r4
 8006372:	3b15      	subs	r3, #21
 8006374:	f023 0303 	bic.w	r3, r3, #3
 8006378:	3304      	adds	r3, #4
 800637a:	f104 0015 	add.w	r0, r4, #21
 800637e:	4584      	cmp	ip, r0
 8006380:	bf38      	it	cc
 8006382:	2304      	movcc	r3, #4
 8006384:	50ca      	str	r2, [r1, r3]
 8006386:	b10a      	cbz	r2, 800638c <__lshift+0xa4>
 8006388:	f108 0602 	add.w	r6, r8, #2
 800638c:	3e01      	subs	r6, #1
 800638e:	4638      	mov	r0, r7
 8006390:	612e      	str	r6, [r5, #16]
 8006392:	4621      	mov	r1, r4
 8006394:	f7ff fdda 	bl	8005f4c <_Bfree>
 8006398:	4628      	mov	r0, r5
 800639a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639e:	f842 0f04 	str.w	r0, [r2, #4]!
 80063a2:	3301      	adds	r3, #1
 80063a4:	e7c5      	b.n	8006332 <__lshift+0x4a>
 80063a6:	3904      	subs	r1, #4
 80063a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80063b0:	459c      	cmp	ip, r3
 80063b2:	d8f9      	bhi.n	80063a8 <__lshift+0xc0>
 80063b4:	e7ea      	b.n	800638c <__lshift+0xa4>
 80063b6:	bf00      	nop
 80063b8:	08008f74 	.word	0x08008f74
 80063bc:	08008f85 	.word	0x08008f85

080063c0 <__mcmp>:
 80063c0:	690a      	ldr	r2, [r1, #16]
 80063c2:	4603      	mov	r3, r0
 80063c4:	6900      	ldr	r0, [r0, #16]
 80063c6:	1a80      	subs	r0, r0, r2
 80063c8:	b530      	push	{r4, r5, lr}
 80063ca:	d10e      	bne.n	80063ea <__mcmp+0x2a>
 80063cc:	3314      	adds	r3, #20
 80063ce:	3114      	adds	r1, #20
 80063d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80063d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80063d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80063dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80063e0:	4295      	cmp	r5, r2
 80063e2:	d003      	beq.n	80063ec <__mcmp+0x2c>
 80063e4:	d205      	bcs.n	80063f2 <__mcmp+0x32>
 80063e6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ea:	bd30      	pop	{r4, r5, pc}
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	d3f3      	bcc.n	80063d8 <__mcmp+0x18>
 80063f0:	e7fb      	b.n	80063ea <__mcmp+0x2a>
 80063f2:	2001      	movs	r0, #1
 80063f4:	e7f9      	b.n	80063ea <__mcmp+0x2a>
	...

080063f8 <__mdiff>:
 80063f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	4689      	mov	r9, r1
 80063fe:	4606      	mov	r6, r0
 8006400:	4611      	mov	r1, r2
 8006402:	4648      	mov	r0, r9
 8006404:	4614      	mov	r4, r2
 8006406:	f7ff ffdb 	bl	80063c0 <__mcmp>
 800640a:	1e05      	subs	r5, r0, #0
 800640c:	d112      	bne.n	8006434 <__mdiff+0x3c>
 800640e:	4629      	mov	r1, r5
 8006410:	4630      	mov	r0, r6
 8006412:	f7ff fd5b 	bl	8005ecc <_Balloc>
 8006416:	4602      	mov	r2, r0
 8006418:	b928      	cbnz	r0, 8006426 <__mdiff+0x2e>
 800641a:	4b3f      	ldr	r3, [pc, #252]	@ (8006518 <__mdiff+0x120>)
 800641c:	f240 2137 	movw	r1, #567	@ 0x237
 8006420:	483e      	ldr	r0, [pc, #248]	@ (800651c <__mdiff+0x124>)
 8006422:	f000 fcc7 	bl	8006db4 <__assert_func>
 8006426:	2301      	movs	r3, #1
 8006428:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800642c:	4610      	mov	r0, r2
 800642e:	b003      	add	sp, #12
 8006430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006434:	bfbc      	itt	lt
 8006436:	464b      	movlt	r3, r9
 8006438:	46a1      	movlt	r9, r4
 800643a:	4630      	mov	r0, r6
 800643c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006440:	bfba      	itte	lt
 8006442:	461c      	movlt	r4, r3
 8006444:	2501      	movlt	r5, #1
 8006446:	2500      	movge	r5, #0
 8006448:	f7ff fd40 	bl	8005ecc <_Balloc>
 800644c:	4602      	mov	r2, r0
 800644e:	b918      	cbnz	r0, 8006458 <__mdiff+0x60>
 8006450:	4b31      	ldr	r3, [pc, #196]	@ (8006518 <__mdiff+0x120>)
 8006452:	f240 2145 	movw	r1, #581	@ 0x245
 8006456:	e7e3      	b.n	8006420 <__mdiff+0x28>
 8006458:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800645c:	6926      	ldr	r6, [r4, #16]
 800645e:	60c5      	str	r5, [r0, #12]
 8006460:	f109 0310 	add.w	r3, r9, #16
 8006464:	f109 0514 	add.w	r5, r9, #20
 8006468:	f104 0e14 	add.w	lr, r4, #20
 800646c:	f100 0b14 	add.w	fp, r0, #20
 8006470:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006474:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006478:	9301      	str	r3, [sp, #4]
 800647a:	46d9      	mov	r9, fp
 800647c:	f04f 0c00 	mov.w	ip, #0
 8006480:	9b01      	ldr	r3, [sp, #4]
 8006482:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006486:	f853 af04 	ldr.w	sl, [r3, #4]!
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	fa1f f38a 	uxth.w	r3, sl
 8006490:	4619      	mov	r1, r3
 8006492:	b283      	uxth	r3, r0
 8006494:	1acb      	subs	r3, r1, r3
 8006496:	0c00      	lsrs	r0, r0, #16
 8006498:	4463      	add	r3, ip
 800649a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800649e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80064a8:	4576      	cmp	r6, lr
 80064aa:	f849 3b04 	str.w	r3, [r9], #4
 80064ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80064b2:	d8e5      	bhi.n	8006480 <__mdiff+0x88>
 80064b4:	1b33      	subs	r3, r6, r4
 80064b6:	3b15      	subs	r3, #21
 80064b8:	f023 0303 	bic.w	r3, r3, #3
 80064bc:	3415      	adds	r4, #21
 80064be:	3304      	adds	r3, #4
 80064c0:	42a6      	cmp	r6, r4
 80064c2:	bf38      	it	cc
 80064c4:	2304      	movcc	r3, #4
 80064c6:	441d      	add	r5, r3
 80064c8:	445b      	add	r3, fp
 80064ca:	461e      	mov	r6, r3
 80064cc:	462c      	mov	r4, r5
 80064ce:	4544      	cmp	r4, r8
 80064d0:	d30e      	bcc.n	80064f0 <__mdiff+0xf8>
 80064d2:	f108 0103 	add.w	r1, r8, #3
 80064d6:	1b49      	subs	r1, r1, r5
 80064d8:	f021 0103 	bic.w	r1, r1, #3
 80064dc:	3d03      	subs	r5, #3
 80064de:	45a8      	cmp	r8, r5
 80064e0:	bf38      	it	cc
 80064e2:	2100      	movcc	r1, #0
 80064e4:	440b      	add	r3, r1
 80064e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80064ea:	b191      	cbz	r1, 8006512 <__mdiff+0x11a>
 80064ec:	6117      	str	r7, [r2, #16]
 80064ee:	e79d      	b.n	800642c <__mdiff+0x34>
 80064f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80064f4:	46e6      	mov	lr, ip
 80064f6:	0c08      	lsrs	r0, r1, #16
 80064f8:	fa1c fc81 	uxtah	ip, ip, r1
 80064fc:	4471      	add	r1, lr
 80064fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006502:	b289      	uxth	r1, r1
 8006504:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006508:	f846 1b04 	str.w	r1, [r6], #4
 800650c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006510:	e7dd      	b.n	80064ce <__mdiff+0xd6>
 8006512:	3f01      	subs	r7, #1
 8006514:	e7e7      	b.n	80064e6 <__mdiff+0xee>
 8006516:	bf00      	nop
 8006518:	08008f74 	.word	0x08008f74
 800651c:	08008f85 	.word	0x08008f85

08006520 <__d2b>:
 8006520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006524:	460f      	mov	r7, r1
 8006526:	2101      	movs	r1, #1
 8006528:	ec59 8b10 	vmov	r8, r9, d0
 800652c:	4616      	mov	r6, r2
 800652e:	f7ff fccd 	bl	8005ecc <_Balloc>
 8006532:	4604      	mov	r4, r0
 8006534:	b930      	cbnz	r0, 8006544 <__d2b+0x24>
 8006536:	4602      	mov	r2, r0
 8006538:	4b23      	ldr	r3, [pc, #140]	@ (80065c8 <__d2b+0xa8>)
 800653a:	4824      	ldr	r0, [pc, #144]	@ (80065cc <__d2b+0xac>)
 800653c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006540:	f000 fc38 	bl	8006db4 <__assert_func>
 8006544:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800654c:	b10d      	cbz	r5, 8006552 <__d2b+0x32>
 800654e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	f1b8 0300 	subs.w	r3, r8, #0
 8006558:	d023      	beq.n	80065a2 <__d2b+0x82>
 800655a:	4668      	mov	r0, sp
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	f7ff fd7c 	bl	800605a <__lo0bits>
 8006562:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006566:	b1d0      	cbz	r0, 800659e <__d2b+0x7e>
 8006568:	f1c0 0320 	rsb	r3, r0, #32
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	430b      	orrs	r3, r1
 8006572:	40c2      	lsrs	r2, r0
 8006574:	6163      	str	r3, [r4, #20]
 8006576:	9201      	str	r2, [sp, #4]
 8006578:	9b01      	ldr	r3, [sp, #4]
 800657a:	61a3      	str	r3, [r4, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	bf0c      	ite	eq
 8006580:	2201      	moveq	r2, #1
 8006582:	2202      	movne	r2, #2
 8006584:	6122      	str	r2, [r4, #16]
 8006586:	b1a5      	cbz	r5, 80065b2 <__d2b+0x92>
 8006588:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800658c:	4405      	add	r5, r0
 800658e:	603d      	str	r5, [r7, #0]
 8006590:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006594:	6030      	str	r0, [r6, #0]
 8006596:	4620      	mov	r0, r4
 8006598:	b003      	add	sp, #12
 800659a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800659e:	6161      	str	r1, [r4, #20]
 80065a0:	e7ea      	b.n	8006578 <__d2b+0x58>
 80065a2:	a801      	add	r0, sp, #4
 80065a4:	f7ff fd59 	bl	800605a <__lo0bits>
 80065a8:	9b01      	ldr	r3, [sp, #4]
 80065aa:	6163      	str	r3, [r4, #20]
 80065ac:	3020      	adds	r0, #32
 80065ae:	2201      	movs	r2, #1
 80065b0:	e7e8      	b.n	8006584 <__d2b+0x64>
 80065b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80065ba:	6038      	str	r0, [r7, #0]
 80065bc:	6918      	ldr	r0, [r3, #16]
 80065be:	f7ff fd2d 	bl	800601c <__hi0bits>
 80065c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065c6:	e7e5      	b.n	8006594 <__d2b+0x74>
 80065c8:	08008f74 	.word	0x08008f74
 80065cc:	08008f85 	.word	0x08008f85

080065d0 <__ssputs_r>:
 80065d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	688e      	ldr	r6, [r1, #8]
 80065d6:	461f      	mov	r7, r3
 80065d8:	42be      	cmp	r6, r7
 80065da:	680b      	ldr	r3, [r1, #0]
 80065dc:	4682      	mov	sl, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	4690      	mov	r8, r2
 80065e2:	d82d      	bhi.n	8006640 <__ssputs_r+0x70>
 80065e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065ec:	d026      	beq.n	800663c <__ssputs_r+0x6c>
 80065ee:	6965      	ldr	r5, [r4, #20]
 80065f0:	6909      	ldr	r1, [r1, #16]
 80065f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065f6:	eba3 0901 	sub.w	r9, r3, r1
 80065fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065fe:	1c7b      	adds	r3, r7, #1
 8006600:	444b      	add	r3, r9
 8006602:	106d      	asrs	r5, r5, #1
 8006604:	429d      	cmp	r5, r3
 8006606:	bf38      	it	cc
 8006608:	461d      	movcc	r5, r3
 800660a:	0553      	lsls	r3, r2, #21
 800660c:	d527      	bpl.n	800665e <__ssputs_r+0x8e>
 800660e:	4629      	mov	r1, r5
 8006610:	f7fd fe14 	bl	800423c <_malloc_r>
 8006614:	4606      	mov	r6, r0
 8006616:	b360      	cbz	r0, 8006672 <__ssputs_r+0xa2>
 8006618:	6921      	ldr	r1, [r4, #16]
 800661a:	464a      	mov	r2, r9
 800661c:	f000 fbbc 	bl	8006d98 <memcpy>
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800662a:	81a3      	strh	r3, [r4, #12]
 800662c:	6126      	str	r6, [r4, #16]
 800662e:	6165      	str	r5, [r4, #20]
 8006630:	444e      	add	r6, r9
 8006632:	eba5 0509 	sub.w	r5, r5, r9
 8006636:	6026      	str	r6, [r4, #0]
 8006638:	60a5      	str	r5, [r4, #8]
 800663a:	463e      	mov	r6, r7
 800663c:	42be      	cmp	r6, r7
 800663e:	d900      	bls.n	8006642 <__ssputs_r+0x72>
 8006640:	463e      	mov	r6, r7
 8006642:	6820      	ldr	r0, [r4, #0]
 8006644:	4632      	mov	r2, r6
 8006646:	4641      	mov	r1, r8
 8006648:	f000 fb6a 	bl	8006d20 <memmove>
 800664c:	68a3      	ldr	r3, [r4, #8]
 800664e:	1b9b      	subs	r3, r3, r6
 8006650:	60a3      	str	r3, [r4, #8]
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	4433      	add	r3, r6
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	2000      	movs	r0, #0
 800665a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665e:	462a      	mov	r2, r5
 8006660:	f000 fbec 	bl	8006e3c <_realloc_r>
 8006664:	4606      	mov	r6, r0
 8006666:	2800      	cmp	r0, #0
 8006668:	d1e0      	bne.n	800662c <__ssputs_r+0x5c>
 800666a:	6921      	ldr	r1, [r4, #16]
 800666c:	4650      	mov	r0, sl
 800666e:	f7ff fbe3 	bl	8005e38 <_free_r>
 8006672:	230c      	movs	r3, #12
 8006674:	f8ca 3000 	str.w	r3, [sl]
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	f04f 30ff 	mov.w	r0, #4294967295
 8006684:	e7e9      	b.n	800665a <__ssputs_r+0x8a>
	...

08006688 <_svfiprintf_r>:
 8006688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668c:	4698      	mov	r8, r3
 800668e:	898b      	ldrh	r3, [r1, #12]
 8006690:	061b      	lsls	r3, r3, #24
 8006692:	b09d      	sub	sp, #116	@ 0x74
 8006694:	4607      	mov	r7, r0
 8006696:	460d      	mov	r5, r1
 8006698:	4614      	mov	r4, r2
 800669a:	d510      	bpl.n	80066be <_svfiprintf_r+0x36>
 800669c:	690b      	ldr	r3, [r1, #16]
 800669e:	b973      	cbnz	r3, 80066be <_svfiprintf_r+0x36>
 80066a0:	2140      	movs	r1, #64	@ 0x40
 80066a2:	f7fd fdcb 	bl	800423c <_malloc_r>
 80066a6:	6028      	str	r0, [r5, #0]
 80066a8:	6128      	str	r0, [r5, #16]
 80066aa:	b930      	cbnz	r0, 80066ba <_svfiprintf_r+0x32>
 80066ac:	230c      	movs	r3, #12
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	f04f 30ff 	mov.w	r0, #4294967295
 80066b4:	b01d      	add	sp, #116	@ 0x74
 80066b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ba:	2340      	movs	r3, #64	@ 0x40
 80066bc:	616b      	str	r3, [r5, #20]
 80066be:	2300      	movs	r3, #0
 80066c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80066c2:	2320      	movs	r3, #32
 80066c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80066cc:	2330      	movs	r3, #48	@ 0x30
 80066ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800686c <_svfiprintf_r+0x1e4>
 80066d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066d6:	f04f 0901 	mov.w	r9, #1
 80066da:	4623      	mov	r3, r4
 80066dc:	469a      	mov	sl, r3
 80066de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066e2:	b10a      	cbz	r2, 80066e8 <_svfiprintf_r+0x60>
 80066e4:	2a25      	cmp	r2, #37	@ 0x25
 80066e6:	d1f9      	bne.n	80066dc <_svfiprintf_r+0x54>
 80066e8:	ebba 0b04 	subs.w	fp, sl, r4
 80066ec:	d00b      	beq.n	8006706 <_svfiprintf_r+0x7e>
 80066ee:	465b      	mov	r3, fp
 80066f0:	4622      	mov	r2, r4
 80066f2:	4629      	mov	r1, r5
 80066f4:	4638      	mov	r0, r7
 80066f6:	f7ff ff6b 	bl	80065d0 <__ssputs_r>
 80066fa:	3001      	adds	r0, #1
 80066fc:	f000 80a7 	beq.w	800684e <_svfiprintf_r+0x1c6>
 8006700:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006702:	445a      	add	r2, fp
 8006704:	9209      	str	r2, [sp, #36]	@ 0x24
 8006706:	f89a 3000 	ldrb.w	r3, [sl]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 809f 	beq.w	800684e <_svfiprintf_r+0x1c6>
 8006710:	2300      	movs	r3, #0
 8006712:	f04f 32ff 	mov.w	r2, #4294967295
 8006716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800671a:	f10a 0a01 	add.w	sl, sl, #1
 800671e:	9304      	str	r3, [sp, #16]
 8006720:	9307      	str	r3, [sp, #28]
 8006722:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006726:	931a      	str	r3, [sp, #104]	@ 0x68
 8006728:	4654      	mov	r4, sl
 800672a:	2205      	movs	r2, #5
 800672c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006730:	484e      	ldr	r0, [pc, #312]	@ (800686c <_svfiprintf_r+0x1e4>)
 8006732:	f7f9 fd55 	bl	80001e0 <memchr>
 8006736:	9a04      	ldr	r2, [sp, #16]
 8006738:	b9d8      	cbnz	r0, 8006772 <_svfiprintf_r+0xea>
 800673a:	06d0      	lsls	r0, r2, #27
 800673c:	bf44      	itt	mi
 800673e:	2320      	movmi	r3, #32
 8006740:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006744:	0711      	lsls	r1, r2, #28
 8006746:	bf44      	itt	mi
 8006748:	232b      	movmi	r3, #43	@ 0x2b
 800674a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800674e:	f89a 3000 	ldrb.w	r3, [sl]
 8006752:	2b2a      	cmp	r3, #42	@ 0x2a
 8006754:	d015      	beq.n	8006782 <_svfiprintf_r+0xfa>
 8006756:	9a07      	ldr	r2, [sp, #28]
 8006758:	4654      	mov	r4, sl
 800675a:	2000      	movs	r0, #0
 800675c:	f04f 0c0a 	mov.w	ip, #10
 8006760:	4621      	mov	r1, r4
 8006762:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006766:	3b30      	subs	r3, #48	@ 0x30
 8006768:	2b09      	cmp	r3, #9
 800676a:	d94b      	bls.n	8006804 <_svfiprintf_r+0x17c>
 800676c:	b1b0      	cbz	r0, 800679c <_svfiprintf_r+0x114>
 800676e:	9207      	str	r2, [sp, #28]
 8006770:	e014      	b.n	800679c <_svfiprintf_r+0x114>
 8006772:	eba0 0308 	sub.w	r3, r0, r8
 8006776:	fa09 f303 	lsl.w	r3, r9, r3
 800677a:	4313      	orrs	r3, r2
 800677c:	9304      	str	r3, [sp, #16]
 800677e:	46a2      	mov	sl, r4
 8006780:	e7d2      	b.n	8006728 <_svfiprintf_r+0xa0>
 8006782:	9b03      	ldr	r3, [sp, #12]
 8006784:	1d19      	adds	r1, r3, #4
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	9103      	str	r1, [sp, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	bfbb      	ittet	lt
 800678e:	425b      	neglt	r3, r3
 8006790:	f042 0202 	orrlt.w	r2, r2, #2
 8006794:	9307      	strge	r3, [sp, #28]
 8006796:	9307      	strlt	r3, [sp, #28]
 8006798:	bfb8      	it	lt
 800679a:	9204      	strlt	r2, [sp, #16]
 800679c:	7823      	ldrb	r3, [r4, #0]
 800679e:	2b2e      	cmp	r3, #46	@ 0x2e
 80067a0:	d10a      	bne.n	80067b8 <_svfiprintf_r+0x130>
 80067a2:	7863      	ldrb	r3, [r4, #1]
 80067a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80067a6:	d132      	bne.n	800680e <_svfiprintf_r+0x186>
 80067a8:	9b03      	ldr	r3, [sp, #12]
 80067aa:	1d1a      	adds	r2, r3, #4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	9203      	str	r2, [sp, #12]
 80067b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067b4:	3402      	adds	r4, #2
 80067b6:	9305      	str	r3, [sp, #20]
 80067b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800687c <_svfiprintf_r+0x1f4>
 80067bc:	7821      	ldrb	r1, [r4, #0]
 80067be:	2203      	movs	r2, #3
 80067c0:	4650      	mov	r0, sl
 80067c2:	f7f9 fd0d 	bl	80001e0 <memchr>
 80067c6:	b138      	cbz	r0, 80067d8 <_svfiprintf_r+0x150>
 80067c8:	9b04      	ldr	r3, [sp, #16]
 80067ca:	eba0 000a 	sub.w	r0, r0, sl
 80067ce:	2240      	movs	r2, #64	@ 0x40
 80067d0:	4082      	lsls	r2, r0
 80067d2:	4313      	orrs	r3, r2
 80067d4:	3401      	adds	r4, #1
 80067d6:	9304      	str	r3, [sp, #16]
 80067d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067dc:	4824      	ldr	r0, [pc, #144]	@ (8006870 <_svfiprintf_r+0x1e8>)
 80067de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067e2:	2206      	movs	r2, #6
 80067e4:	f7f9 fcfc 	bl	80001e0 <memchr>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d036      	beq.n	800685a <_svfiprintf_r+0x1d2>
 80067ec:	4b21      	ldr	r3, [pc, #132]	@ (8006874 <_svfiprintf_r+0x1ec>)
 80067ee:	bb1b      	cbnz	r3, 8006838 <_svfiprintf_r+0x1b0>
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	3307      	adds	r3, #7
 80067f4:	f023 0307 	bic.w	r3, r3, #7
 80067f8:	3308      	adds	r3, #8
 80067fa:	9303      	str	r3, [sp, #12]
 80067fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067fe:	4433      	add	r3, r6
 8006800:	9309      	str	r3, [sp, #36]	@ 0x24
 8006802:	e76a      	b.n	80066da <_svfiprintf_r+0x52>
 8006804:	fb0c 3202 	mla	r2, ip, r2, r3
 8006808:	460c      	mov	r4, r1
 800680a:	2001      	movs	r0, #1
 800680c:	e7a8      	b.n	8006760 <_svfiprintf_r+0xd8>
 800680e:	2300      	movs	r3, #0
 8006810:	3401      	adds	r4, #1
 8006812:	9305      	str	r3, [sp, #20]
 8006814:	4619      	mov	r1, r3
 8006816:	f04f 0c0a 	mov.w	ip, #10
 800681a:	4620      	mov	r0, r4
 800681c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006820:	3a30      	subs	r2, #48	@ 0x30
 8006822:	2a09      	cmp	r2, #9
 8006824:	d903      	bls.n	800682e <_svfiprintf_r+0x1a6>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0c6      	beq.n	80067b8 <_svfiprintf_r+0x130>
 800682a:	9105      	str	r1, [sp, #20]
 800682c:	e7c4      	b.n	80067b8 <_svfiprintf_r+0x130>
 800682e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006832:	4604      	mov	r4, r0
 8006834:	2301      	movs	r3, #1
 8006836:	e7f0      	b.n	800681a <_svfiprintf_r+0x192>
 8006838:	ab03      	add	r3, sp, #12
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	462a      	mov	r2, r5
 800683e:	4b0e      	ldr	r3, [pc, #56]	@ (8006878 <_svfiprintf_r+0x1f0>)
 8006840:	a904      	add	r1, sp, #16
 8006842:	4638      	mov	r0, r7
 8006844:	f7fd fe26 	bl	8004494 <_printf_float>
 8006848:	1c42      	adds	r2, r0, #1
 800684a:	4606      	mov	r6, r0
 800684c:	d1d6      	bne.n	80067fc <_svfiprintf_r+0x174>
 800684e:	89ab      	ldrh	r3, [r5, #12]
 8006850:	065b      	lsls	r3, r3, #25
 8006852:	f53f af2d 	bmi.w	80066b0 <_svfiprintf_r+0x28>
 8006856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006858:	e72c      	b.n	80066b4 <_svfiprintf_r+0x2c>
 800685a:	ab03      	add	r3, sp, #12
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	462a      	mov	r2, r5
 8006860:	4b05      	ldr	r3, [pc, #20]	@ (8006878 <_svfiprintf_r+0x1f0>)
 8006862:	a904      	add	r1, sp, #16
 8006864:	4638      	mov	r0, r7
 8006866:	f7fe f8ad 	bl	80049c4 <_printf_i>
 800686a:	e7ed      	b.n	8006848 <_svfiprintf_r+0x1c0>
 800686c:	080090e0 	.word	0x080090e0
 8006870:	080090ea 	.word	0x080090ea
 8006874:	08004495 	.word	0x08004495
 8006878:	080065d1 	.word	0x080065d1
 800687c:	080090e6 	.word	0x080090e6

08006880 <__sfputc_r>:
 8006880:	6893      	ldr	r3, [r2, #8]
 8006882:	3b01      	subs	r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	b410      	push	{r4}
 8006888:	6093      	str	r3, [r2, #8]
 800688a:	da08      	bge.n	800689e <__sfputc_r+0x1e>
 800688c:	6994      	ldr	r4, [r2, #24]
 800688e:	42a3      	cmp	r3, r4
 8006890:	db01      	blt.n	8006896 <__sfputc_r+0x16>
 8006892:	290a      	cmp	r1, #10
 8006894:	d103      	bne.n	800689e <__sfputc_r+0x1e>
 8006896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800689a:	f7fe bb5c 	b.w	8004f56 <__swbuf_r>
 800689e:	6813      	ldr	r3, [r2, #0]
 80068a0:	1c58      	adds	r0, r3, #1
 80068a2:	6010      	str	r0, [r2, #0]
 80068a4:	7019      	strb	r1, [r3, #0]
 80068a6:	4608      	mov	r0, r1
 80068a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <__sfputs_r>:
 80068ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b0:	4606      	mov	r6, r0
 80068b2:	460f      	mov	r7, r1
 80068b4:	4614      	mov	r4, r2
 80068b6:	18d5      	adds	r5, r2, r3
 80068b8:	42ac      	cmp	r4, r5
 80068ba:	d101      	bne.n	80068c0 <__sfputs_r+0x12>
 80068bc:	2000      	movs	r0, #0
 80068be:	e007      	b.n	80068d0 <__sfputs_r+0x22>
 80068c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c4:	463a      	mov	r2, r7
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7ff ffda 	bl	8006880 <__sfputc_r>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d1f3      	bne.n	80068b8 <__sfputs_r+0xa>
 80068d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068d4 <_vfiprintf_r>:
 80068d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d8:	460d      	mov	r5, r1
 80068da:	b09d      	sub	sp, #116	@ 0x74
 80068dc:	4614      	mov	r4, r2
 80068de:	4698      	mov	r8, r3
 80068e0:	4606      	mov	r6, r0
 80068e2:	b118      	cbz	r0, 80068ec <_vfiprintf_r+0x18>
 80068e4:	6a03      	ldr	r3, [r0, #32]
 80068e6:	b90b      	cbnz	r3, 80068ec <_vfiprintf_r+0x18>
 80068e8:	f7fe fa18 	bl	8004d1c <__sinit>
 80068ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068ee:	07d9      	lsls	r1, r3, #31
 80068f0:	d405      	bmi.n	80068fe <_vfiprintf_r+0x2a>
 80068f2:	89ab      	ldrh	r3, [r5, #12]
 80068f4:	059a      	lsls	r2, r3, #22
 80068f6:	d402      	bmi.n	80068fe <_vfiprintf_r+0x2a>
 80068f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068fa:	f7fe fc4e 	bl	800519a <__retarget_lock_acquire_recursive>
 80068fe:	89ab      	ldrh	r3, [r5, #12]
 8006900:	071b      	lsls	r3, r3, #28
 8006902:	d501      	bpl.n	8006908 <_vfiprintf_r+0x34>
 8006904:	692b      	ldr	r3, [r5, #16]
 8006906:	b99b      	cbnz	r3, 8006930 <_vfiprintf_r+0x5c>
 8006908:	4629      	mov	r1, r5
 800690a:	4630      	mov	r0, r6
 800690c:	f7fe fb62 	bl	8004fd4 <__swsetup_r>
 8006910:	b170      	cbz	r0, 8006930 <_vfiprintf_r+0x5c>
 8006912:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006914:	07dc      	lsls	r4, r3, #31
 8006916:	d504      	bpl.n	8006922 <_vfiprintf_r+0x4e>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	b01d      	add	sp, #116	@ 0x74
 800691e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006922:	89ab      	ldrh	r3, [r5, #12]
 8006924:	0598      	lsls	r0, r3, #22
 8006926:	d4f7      	bmi.n	8006918 <_vfiprintf_r+0x44>
 8006928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800692a:	f7fe fc37 	bl	800519c <__retarget_lock_release_recursive>
 800692e:	e7f3      	b.n	8006918 <_vfiprintf_r+0x44>
 8006930:	2300      	movs	r3, #0
 8006932:	9309      	str	r3, [sp, #36]	@ 0x24
 8006934:	2320      	movs	r3, #32
 8006936:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800693a:	f8cd 800c 	str.w	r8, [sp, #12]
 800693e:	2330      	movs	r3, #48	@ 0x30
 8006940:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006af0 <_vfiprintf_r+0x21c>
 8006944:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006948:	f04f 0901 	mov.w	r9, #1
 800694c:	4623      	mov	r3, r4
 800694e:	469a      	mov	sl, r3
 8006950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006954:	b10a      	cbz	r2, 800695a <_vfiprintf_r+0x86>
 8006956:	2a25      	cmp	r2, #37	@ 0x25
 8006958:	d1f9      	bne.n	800694e <_vfiprintf_r+0x7a>
 800695a:	ebba 0b04 	subs.w	fp, sl, r4
 800695e:	d00b      	beq.n	8006978 <_vfiprintf_r+0xa4>
 8006960:	465b      	mov	r3, fp
 8006962:	4622      	mov	r2, r4
 8006964:	4629      	mov	r1, r5
 8006966:	4630      	mov	r0, r6
 8006968:	f7ff ffa1 	bl	80068ae <__sfputs_r>
 800696c:	3001      	adds	r0, #1
 800696e:	f000 80a7 	beq.w	8006ac0 <_vfiprintf_r+0x1ec>
 8006972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006974:	445a      	add	r2, fp
 8006976:	9209      	str	r2, [sp, #36]	@ 0x24
 8006978:	f89a 3000 	ldrb.w	r3, [sl]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 809f 	beq.w	8006ac0 <_vfiprintf_r+0x1ec>
 8006982:	2300      	movs	r3, #0
 8006984:	f04f 32ff 	mov.w	r2, #4294967295
 8006988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800698c:	f10a 0a01 	add.w	sl, sl, #1
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	9307      	str	r3, [sp, #28]
 8006994:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006998:	931a      	str	r3, [sp, #104]	@ 0x68
 800699a:	4654      	mov	r4, sl
 800699c:	2205      	movs	r2, #5
 800699e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a2:	4853      	ldr	r0, [pc, #332]	@ (8006af0 <_vfiprintf_r+0x21c>)
 80069a4:	f7f9 fc1c 	bl	80001e0 <memchr>
 80069a8:	9a04      	ldr	r2, [sp, #16]
 80069aa:	b9d8      	cbnz	r0, 80069e4 <_vfiprintf_r+0x110>
 80069ac:	06d1      	lsls	r1, r2, #27
 80069ae:	bf44      	itt	mi
 80069b0:	2320      	movmi	r3, #32
 80069b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069b6:	0713      	lsls	r3, r2, #28
 80069b8:	bf44      	itt	mi
 80069ba:	232b      	movmi	r3, #43	@ 0x2b
 80069bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069c0:	f89a 3000 	ldrb.w	r3, [sl]
 80069c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80069c6:	d015      	beq.n	80069f4 <_vfiprintf_r+0x120>
 80069c8:	9a07      	ldr	r2, [sp, #28]
 80069ca:	4654      	mov	r4, sl
 80069cc:	2000      	movs	r0, #0
 80069ce:	f04f 0c0a 	mov.w	ip, #10
 80069d2:	4621      	mov	r1, r4
 80069d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069d8:	3b30      	subs	r3, #48	@ 0x30
 80069da:	2b09      	cmp	r3, #9
 80069dc:	d94b      	bls.n	8006a76 <_vfiprintf_r+0x1a2>
 80069de:	b1b0      	cbz	r0, 8006a0e <_vfiprintf_r+0x13a>
 80069e0:	9207      	str	r2, [sp, #28]
 80069e2:	e014      	b.n	8006a0e <_vfiprintf_r+0x13a>
 80069e4:	eba0 0308 	sub.w	r3, r0, r8
 80069e8:	fa09 f303 	lsl.w	r3, r9, r3
 80069ec:	4313      	orrs	r3, r2
 80069ee:	9304      	str	r3, [sp, #16]
 80069f0:	46a2      	mov	sl, r4
 80069f2:	e7d2      	b.n	800699a <_vfiprintf_r+0xc6>
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	1d19      	adds	r1, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	9103      	str	r1, [sp, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bfbb      	ittet	lt
 8006a00:	425b      	neglt	r3, r3
 8006a02:	f042 0202 	orrlt.w	r2, r2, #2
 8006a06:	9307      	strge	r3, [sp, #28]
 8006a08:	9307      	strlt	r3, [sp, #28]
 8006a0a:	bfb8      	it	lt
 8006a0c:	9204      	strlt	r2, [sp, #16]
 8006a0e:	7823      	ldrb	r3, [r4, #0]
 8006a10:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a12:	d10a      	bne.n	8006a2a <_vfiprintf_r+0x156>
 8006a14:	7863      	ldrb	r3, [r4, #1]
 8006a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a18:	d132      	bne.n	8006a80 <_vfiprintf_r+0x1ac>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	1d1a      	adds	r2, r3, #4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	9203      	str	r2, [sp, #12]
 8006a22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a26:	3402      	adds	r4, #2
 8006a28:	9305      	str	r3, [sp, #20]
 8006a2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006b00 <_vfiprintf_r+0x22c>
 8006a2e:	7821      	ldrb	r1, [r4, #0]
 8006a30:	2203      	movs	r2, #3
 8006a32:	4650      	mov	r0, sl
 8006a34:	f7f9 fbd4 	bl	80001e0 <memchr>
 8006a38:	b138      	cbz	r0, 8006a4a <_vfiprintf_r+0x176>
 8006a3a:	9b04      	ldr	r3, [sp, #16]
 8006a3c:	eba0 000a 	sub.w	r0, r0, sl
 8006a40:	2240      	movs	r2, #64	@ 0x40
 8006a42:	4082      	lsls	r2, r0
 8006a44:	4313      	orrs	r3, r2
 8006a46:	3401      	adds	r4, #1
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a4e:	4829      	ldr	r0, [pc, #164]	@ (8006af4 <_vfiprintf_r+0x220>)
 8006a50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a54:	2206      	movs	r2, #6
 8006a56:	f7f9 fbc3 	bl	80001e0 <memchr>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d03f      	beq.n	8006ade <_vfiprintf_r+0x20a>
 8006a5e:	4b26      	ldr	r3, [pc, #152]	@ (8006af8 <_vfiprintf_r+0x224>)
 8006a60:	bb1b      	cbnz	r3, 8006aaa <_vfiprintf_r+0x1d6>
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	3307      	adds	r3, #7
 8006a66:	f023 0307 	bic.w	r3, r3, #7
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	9303      	str	r3, [sp, #12]
 8006a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a70:	443b      	add	r3, r7
 8006a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a74:	e76a      	b.n	800694c <_vfiprintf_r+0x78>
 8006a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	e7a8      	b.n	80069d2 <_vfiprintf_r+0xfe>
 8006a80:	2300      	movs	r3, #0
 8006a82:	3401      	adds	r4, #1
 8006a84:	9305      	str	r3, [sp, #20]
 8006a86:	4619      	mov	r1, r3
 8006a88:	f04f 0c0a 	mov.w	ip, #10
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a92:	3a30      	subs	r2, #48	@ 0x30
 8006a94:	2a09      	cmp	r2, #9
 8006a96:	d903      	bls.n	8006aa0 <_vfiprintf_r+0x1cc>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0c6      	beq.n	8006a2a <_vfiprintf_r+0x156>
 8006a9c:	9105      	str	r1, [sp, #20]
 8006a9e:	e7c4      	b.n	8006a2a <_vfiprintf_r+0x156>
 8006aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e7f0      	b.n	8006a8c <_vfiprintf_r+0x1b8>
 8006aaa:	ab03      	add	r3, sp, #12
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	462a      	mov	r2, r5
 8006ab0:	4b12      	ldr	r3, [pc, #72]	@ (8006afc <_vfiprintf_r+0x228>)
 8006ab2:	a904      	add	r1, sp, #16
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7fd fced 	bl	8004494 <_printf_float>
 8006aba:	4607      	mov	r7, r0
 8006abc:	1c78      	adds	r0, r7, #1
 8006abe:	d1d6      	bne.n	8006a6e <_vfiprintf_r+0x19a>
 8006ac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ac2:	07d9      	lsls	r1, r3, #31
 8006ac4:	d405      	bmi.n	8006ad2 <_vfiprintf_r+0x1fe>
 8006ac6:	89ab      	ldrh	r3, [r5, #12]
 8006ac8:	059a      	lsls	r2, r3, #22
 8006aca:	d402      	bmi.n	8006ad2 <_vfiprintf_r+0x1fe>
 8006acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ace:	f7fe fb65 	bl	800519c <__retarget_lock_release_recursive>
 8006ad2:	89ab      	ldrh	r3, [r5, #12]
 8006ad4:	065b      	lsls	r3, r3, #25
 8006ad6:	f53f af1f 	bmi.w	8006918 <_vfiprintf_r+0x44>
 8006ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006adc:	e71e      	b.n	800691c <_vfiprintf_r+0x48>
 8006ade:	ab03      	add	r3, sp, #12
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	462a      	mov	r2, r5
 8006ae4:	4b05      	ldr	r3, [pc, #20]	@ (8006afc <_vfiprintf_r+0x228>)
 8006ae6:	a904      	add	r1, sp, #16
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f7fd ff6b 	bl	80049c4 <_printf_i>
 8006aee:	e7e4      	b.n	8006aba <_vfiprintf_r+0x1e6>
 8006af0:	080090e0 	.word	0x080090e0
 8006af4:	080090ea 	.word	0x080090ea
 8006af8:	08004495 	.word	0x08004495
 8006afc:	080068af 	.word	0x080068af
 8006b00:	080090e6 	.word	0x080090e6

08006b04 <__sflush_r>:
 8006b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0c:	0716      	lsls	r6, r2, #28
 8006b0e:	4605      	mov	r5, r0
 8006b10:	460c      	mov	r4, r1
 8006b12:	d454      	bmi.n	8006bbe <__sflush_r+0xba>
 8006b14:	684b      	ldr	r3, [r1, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	dc02      	bgt.n	8006b20 <__sflush_r+0x1c>
 8006b1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	dd48      	ble.n	8006bb2 <__sflush_r+0xae>
 8006b20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b22:	2e00      	cmp	r6, #0
 8006b24:	d045      	beq.n	8006bb2 <__sflush_r+0xae>
 8006b26:	2300      	movs	r3, #0
 8006b28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b2c:	682f      	ldr	r7, [r5, #0]
 8006b2e:	6a21      	ldr	r1, [r4, #32]
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	d030      	beq.n	8006b96 <__sflush_r+0x92>
 8006b34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	0759      	lsls	r1, r3, #29
 8006b3a:	d505      	bpl.n	8006b48 <__sflush_r+0x44>
 8006b3c:	6863      	ldr	r3, [r4, #4]
 8006b3e:	1ad2      	subs	r2, r2, r3
 8006b40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b42:	b10b      	cbz	r3, 8006b48 <__sflush_r+0x44>
 8006b44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b4c:	6a21      	ldr	r1, [r4, #32]
 8006b4e:	4628      	mov	r0, r5
 8006b50:	47b0      	blx	r6
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	d106      	bne.n	8006b66 <__sflush_r+0x62>
 8006b58:	6829      	ldr	r1, [r5, #0]
 8006b5a:	291d      	cmp	r1, #29
 8006b5c:	d82b      	bhi.n	8006bb6 <__sflush_r+0xb2>
 8006b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8006c08 <__sflush_r+0x104>)
 8006b60:	410a      	asrs	r2, r1
 8006b62:	07d6      	lsls	r6, r2, #31
 8006b64:	d427      	bmi.n	8006bb6 <__sflush_r+0xb2>
 8006b66:	2200      	movs	r2, #0
 8006b68:	6062      	str	r2, [r4, #4]
 8006b6a:	04d9      	lsls	r1, r3, #19
 8006b6c:	6922      	ldr	r2, [r4, #16]
 8006b6e:	6022      	str	r2, [r4, #0]
 8006b70:	d504      	bpl.n	8006b7c <__sflush_r+0x78>
 8006b72:	1c42      	adds	r2, r0, #1
 8006b74:	d101      	bne.n	8006b7a <__sflush_r+0x76>
 8006b76:	682b      	ldr	r3, [r5, #0]
 8006b78:	b903      	cbnz	r3, 8006b7c <__sflush_r+0x78>
 8006b7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b7e:	602f      	str	r7, [r5, #0]
 8006b80:	b1b9      	cbz	r1, 8006bb2 <__sflush_r+0xae>
 8006b82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b86:	4299      	cmp	r1, r3
 8006b88:	d002      	beq.n	8006b90 <__sflush_r+0x8c>
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f7ff f954 	bl	8005e38 <_free_r>
 8006b90:	2300      	movs	r3, #0
 8006b92:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b94:	e00d      	b.n	8006bb2 <__sflush_r+0xae>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4628      	mov	r0, r5
 8006b9a:	47b0      	blx	r6
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	1c50      	adds	r0, r2, #1
 8006ba0:	d1c9      	bne.n	8006b36 <__sflush_r+0x32>
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0c6      	beq.n	8006b36 <__sflush_r+0x32>
 8006ba8:	2b1d      	cmp	r3, #29
 8006baa:	d001      	beq.n	8006bb0 <__sflush_r+0xac>
 8006bac:	2b16      	cmp	r3, #22
 8006bae:	d11e      	bne.n	8006bee <__sflush_r+0xea>
 8006bb0:	602f      	str	r7, [r5, #0]
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	e022      	b.n	8006bfc <__sflush_r+0xf8>
 8006bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bba:	b21b      	sxth	r3, r3
 8006bbc:	e01b      	b.n	8006bf6 <__sflush_r+0xf2>
 8006bbe:	690f      	ldr	r7, [r1, #16]
 8006bc0:	2f00      	cmp	r7, #0
 8006bc2:	d0f6      	beq.n	8006bb2 <__sflush_r+0xae>
 8006bc4:	0793      	lsls	r3, r2, #30
 8006bc6:	680e      	ldr	r6, [r1, #0]
 8006bc8:	bf08      	it	eq
 8006bca:	694b      	ldreq	r3, [r1, #20]
 8006bcc:	600f      	str	r7, [r1, #0]
 8006bce:	bf18      	it	ne
 8006bd0:	2300      	movne	r3, #0
 8006bd2:	eba6 0807 	sub.w	r8, r6, r7
 8006bd6:	608b      	str	r3, [r1, #8]
 8006bd8:	f1b8 0f00 	cmp.w	r8, #0
 8006bdc:	dde9      	ble.n	8006bb2 <__sflush_r+0xae>
 8006bde:	6a21      	ldr	r1, [r4, #32]
 8006be0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006be2:	4643      	mov	r3, r8
 8006be4:	463a      	mov	r2, r7
 8006be6:	4628      	mov	r0, r5
 8006be8:	47b0      	blx	r6
 8006bea:	2800      	cmp	r0, #0
 8006bec:	dc08      	bgt.n	8006c00 <__sflush_r+0xfc>
 8006bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf6:	81a3      	strh	r3, [r4, #12]
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c00:	4407      	add	r7, r0
 8006c02:	eba8 0800 	sub.w	r8, r8, r0
 8006c06:	e7e7      	b.n	8006bd8 <__sflush_r+0xd4>
 8006c08:	dfbffffe 	.word	0xdfbffffe

08006c0c <_fflush_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	690b      	ldr	r3, [r1, #16]
 8006c10:	4605      	mov	r5, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	b913      	cbnz	r3, 8006c1c <_fflush_r+0x10>
 8006c16:	2500      	movs	r5, #0
 8006c18:	4628      	mov	r0, r5
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	b118      	cbz	r0, 8006c26 <_fflush_r+0x1a>
 8006c1e:	6a03      	ldr	r3, [r0, #32]
 8006c20:	b90b      	cbnz	r3, 8006c26 <_fflush_r+0x1a>
 8006c22:	f7fe f87b 	bl	8004d1c <__sinit>
 8006c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0f3      	beq.n	8006c16 <_fflush_r+0xa>
 8006c2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c30:	07d0      	lsls	r0, r2, #31
 8006c32:	d404      	bmi.n	8006c3e <_fflush_r+0x32>
 8006c34:	0599      	lsls	r1, r3, #22
 8006c36:	d402      	bmi.n	8006c3e <_fflush_r+0x32>
 8006c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c3a:	f7fe faae 	bl	800519a <__retarget_lock_acquire_recursive>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	4621      	mov	r1, r4
 8006c42:	f7ff ff5f 	bl	8006b04 <__sflush_r>
 8006c46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c48:	07da      	lsls	r2, r3, #31
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	d4e4      	bmi.n	8006c18 <_fflush_r+0xc>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	059b      	lsls	r3, r3, #22
 8006c52:	d4e1      	bmi.n	8006c18 <_fflush_r+0xc>
 8006c54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c56:	f7fe faa1 	bl	800519c <__retarget_lock_release_recursive>
 8006c5a:	e7dd      	b.n	8006c18 <_fflush_r+0xc>

08006c5c <__swhatbuf_r>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	460c      	mov	r4, r1
 8006c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c64:	2900      	cmp	r1, #0
 8006c66:	b096      	sub	sp, #88	@ 0x58
 8006c68:	4615      	mov	r5, r2
 8006c6a:	461e      	mov	r6, r3
 8006c6c:	da0d      	bge.n	8006c8a <__swhatbuf_r+0x2e>
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c74:	f04f 0100 	mov.w	r1, #0
 8006c78:	bf14      	ite	ne
 8006c7a:	2340      	movne	r3, #64	@ 0x40
 8006c7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c80:	2000      	movs	r0, #0
 8006c82:	6031      	str	r1, [r6, #0]
 8006c84:	602b      	str	r3, [r5, #0]
 8006c86:	b016      	add	sp, #88	@ 0x58
 8006c88:	bd70      	pop	{r4, r5, r6, pc}
 8006c8a:	466a      	mov	r2, sp
 8006c8c:	f000 f862 	bl	8006d54 <_fstat_r>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	dbec      	blt.n	8006c6e <__swhatbuf_r+0x12>
 8006c94:	9901      	ldr	r1, [sp, #4]
 8006c96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c9e:	4259      	negs	r1, r3
 8006ca0:	4159      	adcs	r1, r3
 8006ca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ca6:	e7eb      	b.n	8006c80 <__swhatbuf_r+0x24>

08006ca8 <__smakebuf_r>:
 8006ca8:	898b      	ldrh	r3, [r1, #12]
 8006caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cac:	079d      	lsls	r5, r3, #30
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	d507      	bpl.n	8006cc4 <__smakebuf_r+0x1c>
 8006cb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	6123      	str	r3, [r4, #16]
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	6163      	str	r3, [r4, #20]
 8006cc0:	b003      	add	sp, #12
 8006cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc4:	ab01      	add	r3, sp, #4
 8006cc6:	466a      	mov	r2, sp
 8006cc8:	f7ff ffc8 	bl	8006c5c <__swhatbuf_r>
 8006ccc:	9f00      	ldr	r7, [sp, #0]
 8006cce:	4605      	mov	r5, r0
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f7fd fab2 	bl	800423c <_malloc_r>
 8006cd8:	b948      	cbnz	r0, 8006cee <__smakebuf_r+0x46>
 8006cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cde:	059a      	lsls	r2, r3, #22
 8006ce0:	d4ee      	bmi.n	8006cc0 <__smakebuf_r+0x18>
 8006ce2:	f023 0303 	bic.w	r3, r3, #3
 8006ce6:	f043 0302 	orr.w	r3, r3, #2
 8006cea:	81a3      	strh	r3, [r4, #12]
 8006cec:	e7e2      	b.n	8006cb4 <__smakebuf_r+0xc>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	6020      	str	r0, [r4, #0]
 8006cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf6:	81a3      	strh	r3, [r4, #12]
 8006cf8:	9b01      	ldr	r3, [sp, #4]
 8006cfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006cfe:	b15b      	cbz	r3, 8006d18 <__smakebuf_r+0x70>
 8006d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d04:	4630      	mov	r0, r6
 8006d06:	f000 f837 	bl	8006d78 <_isatty_r>
 8006d0a:	b128      	cbz	r0, 8006d18 <__smakebuf_r+0x70>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	f023 0303 	bic.w	r3, r3, #3
 8006d12:	f043 0301 	orr.w	r3, r3, #1
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	431d      	orrs	r5, r3
 8006d1c:	81a5      	strh	r5, [r4, #12]
 8006d1e:	e7cf      	b.n	8006cc0 <__smakebuf_r+0x18>

08006d20 <memmove>:
 8006d20:	4288      	cmp	r0, r1
 8006d22:	b510      	push	{r4, lr}
 8006d24:	eb01 0402 	add.w	r4, r1, r2
 8006d28:	d902      	bls.n	8006d30 <memmove+0x10>
 8006d2a:	4284      	cmp	r4, r0
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	d807      	bhi.n	8006d40 <memmove+0x20>
 8006d30:	1e43      	subs	r3, r0, #1
 8006d32:	42a1      	cmp	r1, r4
 8006d34:	d008      	beq.n	8006d48 <memmove+0x28>
 8006d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d3e:	e7f8      	b.n	8006d32 <memmove+0x12>
 8006d40:	4402      	add	r2, r0
 8006d42:	4601      	mov	r1, r0
 8006d44:	428a      	cmp	r2, r1
 8006d46:	d100      	bne.n	8006d4a <memmove+0x2a>
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d52:	e7f7      	b.n	8006d44 <memmove+0x24>

08006d54 <_fstat_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d07      	ldr	r5, [pc, #28]	@ (8006d74 <_fstat_r+0x20>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	4611      	mov	r1, r2
 8006d60:	602b      	str	r3, [r5, #0]
 8006d62:	f7fb fb38 	bl	80023d6 <_fstat>
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	d102      	bne.n	8006d70 <_fstat_r+0x1c>
 8006d6a:	682b      	ldr	r3, [r5, #0]
 8006d6c:	b103      	cbz	r3, 8006d70 <_fstat_r+0x1c>
 8006d6e:	6023      	str	r3, [r4, #0]
 8006d70:	bd38      	pop	{r3, r4, r5, pc}
 8006d72:	bf00      	nop
 8006d74:	20000428 	.word	0x20000428

08006d78 <_isatty_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d06      	ldr	r5, [pc, #24]	@ (8006d94 <_isatty_r+0x1c>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7fb fb37 	bl	80023f6 <_isatty>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_isatty_r+0x1a>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_isatty_r+0x1a>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	20000428 	.word	0x20000428

08006d98 <memcpy>:
 8006d98:	440a      	add	r2, r1
 8006d9a:	4291      	cmp	r1, r2
 8006d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006da0:	d100      	bne.n	8006da4 <memcpy+0xc>
 8006da2:	4770      	bx	lr
 8006da4:	b510      	push	{r4, lr}
 8006da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dae:	4291      	cmp	r1, r2
 8006db0:	d1f9      	bne.n	8006da6 <memcpy+0xe>
 8006db2:	bd10      	pop	{r4, pc}

08006db4 <__assert_func>:
 8006db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006db6:	4614      	mov	r4, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	4b09      	ldr	r3, [pc, #36]	@ (8006de0 <__assert_func+0x2c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	68d8      	ldr	r0, [r3, #12]
 8006dc2:	b954      	cbnz	r4, 8006dda <__assert_func+0x26>
 8006dc4:	4b07      	ldr	r3, [pc, #28]	@ (8006de4 <__assert_func+0x30>)
 8006dc6:	461c      	mov	r4, r3
 8006dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dcc:	9100      	str	r1, [sp, #0]
 8006dce:	462b      	mov	r3, r5
 8006dd0:	4905      	ldr	r1, [pc, #20]	@ (8006de8 <__assert_func+0x34>)
 8006dd2:	f000 f86f 	bl	8006eb4 <fiprintf>
 8006dd6:	f000 f87f 	bl	8006ed8 <abort>
 8006dda:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <__assert_func+0x38>)
 8006ddc:	e7f4      	b.n	8006dc8 <__assert_func+0x14>
 8006dde:	bf00      	nop
 8006de0:	20000048 	.word	0x20000048
 8006de4:	08009136 	.word	0x08009136
 8006de8:	08009108 	.word	0x08009108
 8006dec:	080090fb 	.word	0x080090fb

08006df0 <_calloc_r>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	fba1 5402 	umull	r5, r4, r1, r2
 8006df6:	b93c      	cbnz	r4, 8006e08 <_calloc_r+0x18>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7fd fa1f 	bl	800423c <_malloc_r>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	b928      	cbnz	r0, 8006e0e <_calloc_r+0x1e>
 8006e02:	2600      	movs	r6, #0
 8006e04:	4630      	mov	r0, r6
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	220c      	movs	r2, #12
 8006e0a:	6002      	str	r2, [r0, #0]
 8006e0c:	e7f9      	b.n	8006e02 <_calloc_r+0x12>
 8006e0e:	462a      	mov	r2, r5
 8006e10:	4621      	mov	r1, r4
 8006e12:	f7fe f935 	bl	8005080 <memset>
 8006e16:	e7f5      	b.n	8006e04 <_calloc_r+0x14>

08006e18 <__ascii_mbtowc>:
 8006e18:	b082      	sub	sp, #8
 8006e1a:	b901      	cbnz	r1, 8006e1e <__ascii_mbtowc+0x6>
 8006e1c:	a901      	add	r1, sp, #4
 8006e1e:	b142      	cbz	r2, 8006e32 <__ascii_mbtowc+0x1a>
 8006e20:	b14b      	cbz	r3, 8006e36 <__ascii_mbtowc+0x1e>
 8006e22:	7813      	ldrb	r3, [r2, #0]
 8006e24:	600b      	str	r3, [r1, #0]
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	1e10      	subs	r0, r2, #0
 8006e2a:	bf18      	it	ne
 8006e2c:	2001      	movne	r0, #1
 8006e2e:	b002      	add	sp, #8
 8006e30:	4770      	bx	lr
 8006e32:	4610      	mov	r0, r2
 8006e34:	e7fb      	b.n	8006e2e <__ascii_mbtowc+0x16>
 8006e36:	f06f 0001 	mvn.w	r0, #1
 8006e3a:	e7f8      	b.n	8006e2e <__ascii_mbtowc+0x16>

08006e3c <_realloc_r>:
 8006e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e40:	4680      	mov	r8, r0
 8006e42:	4615      	mov	r5, r2
 8006e44:	460c      	mov	r4, r1
 8006e46:	b921      	cbnz	r1, 8006e52 <_realloc_r+0x16>
 8006e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	f7fd b9f5 	b.w	800423c <_malloc_r>
 8006e52:	b92a      	cbnz	r2, 8006e60 <_realloc_r+0x24>
 8006e54:	f7fe fff0 	bl	8005e38 <_free_r>
 8006e58:	2400      	movs	r4, #0
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e60:	f000 f841 	bl	8006ee6 <_malloc_usable_size_r>
 8006e64:	4285      	cmp	r5, r0
 8006e66:	4606      	mov	r6, r0
 8006e68:	d802      	bhi.n	8006e70 <_realloc_r+0x34>
 8006e6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006e6e:	d8f4      	bhi.n	8006e5a <_realloc_r+0x1e>
 8006e70:	4629      	mov	r1, r5
 8006e72:	4640      	mov	r0, r8
 8006e74:	f7fd f9e2 	bl	800423c <_malloc_r>
 8006e78:	4607      	mov	r7, r0
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d0ec      	beq.n	8006e58 <_realloc_r+0x1c>
 8006e7e:	42b5      	cmp	r5, r6
 8006e80:	462a      	mov	r2, r5
 8006e82:	4621      	mov	r1, r4
 8006e84:	bf28      	it	cs
 8006e86:	4632      	movcs	r2, r6
 8006e88:	f7ff ff86 	bl	8006d98 <memcpy>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4640      	mov	r0, r8
 8006e90:	f7fe ffd2 	bl	8005e38 <_free_r>
 8006e94:	463c      	mov	r4, r7
 8006e96:	e7e0      	b.n	8006e5a <_realloc_r+0x1e>

08006e98 <__ascii_wctomb>:
 8006e98:	4603      	mov	r3, r0
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	b141      	cbz	r1, 8006eb0 <__ascii_wctomb+0x18>
 8006e9e:	2aff      	cmp	r2, #255	@ 0xff
 8006ea0:	d904      	bls.n	8006eac <__ascii_wctomb+0x14>
 8006ea2:	228a      	movs	r2, #138	@ 0x8a
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	4770      	bx	lr
 8006eac:	700a      	strb	r2, [r1, #0]
 8006eae:	2001      	movs	r0, #1
 8006eb0:	4770      	bx	lr
	...

08006eb4 <fiprintf>:
 8006eb4:	b40e      	push	{r1, r2, r3}
 8006eb6:	b503      	push	{r0, r1, lr}
 8006eb8:	4601      	mov	r1, r0
 8006eba:	ab03      	add	r3, sp, #12
 8006ebc:	4805      	ldr	r0, [pc, #20]	@ (8006ed4 <fiprintf+0x20>)
 8006ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	f7ff fd05 	bl	80068d4 <_vfiprintf_r>
 8006eca:	b002      	add	sp, #8
 8006ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ed0:	b003      	add	sp, #12
 8006ed2:	4770      	bx	lr
 8006ed4:	20000048 	.word	0x20000048

08006ed8 <abort>:
 8006ed8:	b508      	push	{r3, lr}
 8006eda:	2006      	movs	r0, #6
 8006edc:	f000 f834 	bl	8006f48 <raise>
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	f7fb fa28 	bl	8002336 <_exit>

08006ee6 <_malloc_usable_size_r>:
 8006ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eea:	1f18      	subs	r0, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bfbc      	itt	lt
 8006ef0:	580b      	ldrlt	r3, [r1, r0]
 8006ef2:	18c0      	addlt	r0, r0, r3
 8006ef4:	4770      	bx	lr

08006ef6 <_raise_r>:
 8006ef6:	291f      	cmp	r1, #31
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4605      	mov	r5, r0
 8006efc:	460c      	mov	r4, r1
 8006efe:	d904      	bls.n	8006f0a <_raise_r+0x14>
 8006f00:	2316      	movs	r3, #22
 8006f02:	6003      	str	r3, [r0, #0]
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	bd38      	pop	{r3, r4, r5, pc}
 8006f0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f0c:	b112      	cbz	r2, 8006f14 <_raise_r+0x1e>
 8006f0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f12:	b94b      	cbnz	r3, 8006f28 <_raise_r+0x32>
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 f831 	bl	8006f7c <_getpid_r>
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	4601      	mov	r1, r0
 8006f1e:	4628      	mov	r0, r5
 8006f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f24:	f000 b818 	b.w	8006f58 <_kill_r>
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d00a      	beq.n	8006f42 <_raise_r+0x4c>
 8006f2c:	1c59      	adds	r1, r3, #1
 8006f2e:	d103      	bne.n	8006f38 <_raise_r+0x42>
 8006f30:	2316      	movs	r3, #22
 8006f32:	6003      	str	r3, [r0, #0]
 8006f34:	2001      	movs	r0, #1
 8006f36:	e7e7      	b.n	8006f08 <_raise_r+0x12>
 8006f38:	2100      	movs	r1, #0
 8006f3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f3e:	4620      	mov	r0, r4
 8006f40:	4798      	blx	r3
 8006f42:	2000      	movs	r0, #0
 8006f44:	e7e0      	b.n	8006f08 <_raise_r+0x12>
	...

08006f48 <raise>:
 8006f48:	4b02      	ldr	r3, [pc, #8]	@ (8006f54 <raise+0xc>)
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	f7ff bfd2 	b.w	8006ef6 <_raise_r>
 8006f52:	bf00      	nop
 8006f54:	20000048 	.word	0x20000048

08006f58 <_kill_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4d07      	ldr	r5, [pc, #28]	@ (8006f78 <_kill_r+0x20>)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	4611      	mov	r1, r2
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	f7fb f9d6 	bl	8002316 <_kill>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	d102      	bne.n	8006f74 <_kill_r+0x1c>
 8006f6e:	682b      	ldr	r3, [r5, #0]
 8006f70:	b103      	cbz	r3, 8006f74 <_kill_r+0x1c>
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	bd38      	pop	{r3, r4, r5, pc}
 8006f76:	bf00      	nop
 8006f78:	20000428 	.word	0x20000428

08006f7c <_getpid_r>:
 8006f7c:	f7fb b9c3 	b.w	8002306 <_getpid>

08006f80 <log10>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	ed2d 8b02 	vpush	{d8}
 8006f86:	ec55 4b10 	vmov	r4, r5, d0
 8006f8a:	f000 fa95 	bl	80074b8 <__ieee754_log10>
 8006f8e:	4622      	mov	r2, r4
 8006f90:	462b      	mov	r3, r5
 8006f92:	4620      	mov	r0, r4
 8006f94:	4629      	mov	r1, r5
 8006f96:	eeb0 8a40 	vmov.f32	s16, s0
 8006f9a:	eef0 8a60 	vmov.f32	s17, s1
 8006f9e:	f7f9 fdcd 	bl	8000b3c <__aeabi_dcmpun>
 8006fa2:	b998      	cbnz	r0, 8006fcc <log10+0x4c>
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	4620      	mov	r0, r4
 8006faa:	4629      	mov	r1, r5
 8006fac:	f7f9 fda8 	bl	8000b00 <__aeabi_dcmple>
 8006fb0:	b160      	cbz	r0, 8006fcc <log10+0x4c>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f7f9 fd8d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fbe:	b160      	cbz	r0, 8006fda <log10+0x5a>
 8006fc0:	f7fe f8c0 	bl	8005144 <__errno>
 8006fc4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8006ff0 <log10+0x70>
 8006fc8:	2322      	movs	r3, #34	@ 0x22
 8006fca:	6003      	str	r3, [r0, #0]
 8006fcc:	eeb0 0a48 	vmov.f32	s0, s16
 8006fd0:	eef0 0a68 	vmov.f32	s1, s17
 8006fd4:	ecbd 8b02 	vpop	{d8}
 8006fd8:	bd38      	pop	{r3, r4, r5, pc}
 8006fda:	f7fe f8b3 	bl	8005144 <__errno>
 8006fde:	ecbd 8b02 	vpop	{d8}
 8006fe2:	2321      	movs	r3, #33	@ 0x21
 8006fe4:	6003      	str	r3, [r0, #0]
 8006fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fea:	4803      	ldr	r0, [pc, #12]	@ (8006ff8 <log10+0x78>)
 8006fec:	f000 b8b0 	b.w	8007150 <nan>
 8006ff0:	00000000 	.word	0x00000000
 8006ff4:	fff00000 	.word	0xfff00000
 8006ff8:	08009136 	.word	0x08009136

08006ffc <pow>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	ed2d 8b02 	vpush	{d8}
 8007002:	eeb0 8a40 	vmov.f32	s16, s0
 8007006:	eef0 8a60 	vmov.f32	s17, s1
 800700a:	ec55 4b11 	vmov	r4, r5, d1
 800700e:	f000 fadf 	bl	80075d0 <__ieee754_pow>
 8007012:	4622      	mov	r2, r4
 8007014:	462b      	mov	r3, r5
 8007016:	4620      	mov	r0, r4
 8007018:	4629      	mov	r1, r5
 800701a:	ec57 6b10 	vmov	r6, r7, d0
 800701e:	f7f9 fd8d 	bl	8000b3c <__aeabi_dcmpun>
 8007022:	2800      	cmp	r0, #0
 8007024:	d13b      	bne.n	800709e <pow+0xa2>
 8007026:	ec51 0b18 	vmov	r0, r1, d8
 800702a:	2200      	movs	r2, #0
 800702c:	2300      	movs	r3, #0
 800702e:	f7f9 fd53 	bl	8000ad8 <__aeabi_dcmpeq>
 8007032:	b1b8      	cbz	r0, 8007064 <pow+0x68>
 8007034:	2200      	movs	r2, #0
 8007036:	2300      	movs	r3, #0
 8007038:	4620      	mov	r0, r4
 800703a:	4629      	mov	r1, r5
 800703c:	f7f9 fd4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007040:	2800      	cmp	r0, #0
 8007042:	d146      	bne.n	80070d2 <pow+0xd6>
 8007044:	ec45 4b10 	vmov	d0, r4, r5
 8007048:	f000 f874 	bl	8007134 <finite>
 800704c:	b338      	cbz	r0, 800709e <pow+0xa2>
 800704e:	2200      	movs	r2, #0
 8007050:	2300      	movs	r3, #0
 8007052:	4620      	mov	r0, r4
 8007054:	4629      	mov	r1, r5
 8007056:	f7f9 fd49 	bl	8000aec <__aeabi_dcmplt>
 800705a:	b300      	cbz	r0, 800709e <pow+0xa2>
 800705c:	f7fe f872 	bl	8005144 <__errno>
 8007060:	2322      	movs	r3, #34	@ 0x22
 8007062:	e01b      	b.n	800709c <pow+0xa0>
 8007064:	ec47 6b10 	vmov	d0, r6, r7
 8007068:	f000 f864 	bl	8007134 <finite>
 800706c:	b9e0      	cbnz	r0, 80070a8 <pow+0xac>
 800706e:	eeb0 0a48 	vmov.f32	s0, s16
 8007072:	eef0 0a68 	vmov.f32	s1, s17
 8007076:	f000 f85d 	bl	8007134 <finite>
 800707a:	b1a8      	cbz	r0, 80070a8 <pow+0xac>
 800707c:	ec45 4b10 	vmov	d0, r4, r5
 8007080:	f000 f858 	bl	8007134 <finite>
 8007084:	b180      	cbz	r0, 80070a8 <pow+0xac>
 8007086:	4632      	mov	r2, r6
 8007088:	463b      	mov	r3, r7
 800708a:	4630      	mov	r0, r6
 800708c:	4639      	mov	r1, r7
 800708e:	f7f9 fd55 	bl	8000b3c <__aeabi_dcmpun>
 8007092:	2800      	cmp	r0, #0
 8007094:	d0e2      	beq.n	800705c <pow+0x60>
 8007096:	f7fe f855 	bl	8005144 <__errno>
 800709a:	2321      	movs	r3, #33	@ 0x21
 800709c:	6003      	str	r3, [r0, #0]
 800709e:	ecbd 8b02 	vpop	{d8}
 80070a2:	ec47 6b10 	vmov	d0, r6, r7
 80070a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a8:	2200      	movs	r2, #0
 80070aa:	2300      	movs	r3, #0
 80070ac:	4630      	mov	r0, r6
 80070ae:	4639      	mov	r1, r7
 80070b0:	f7f9 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d0f2      	beq.n	800709e <pow+0xa2>
 80070b8:	eeb0 0a48 	vmov.f32	s0, s16
 80070bc:	eef0 0a68 	vmov.f32	s1, s17
 80070c0:	f000 f838 	bl	8007134 <finite>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d0ea      	beq.n	800709e <pow+0xa2>
 80070c8:	ec45 4b10 	vmov	d0, r4, r5
 80070cc:	f000 f832 	bl	8007134 <finite>
 80070d0:	e7c3      	b.n	800705a <pow+0x5e>
 80070d2:	4f01      	ldr	r7, [pc, #4]	@ (80070d8 <pow+0xdc>)
 80070d4:	2600      	movs	r6, #0
 80070d6:	e7e2      	b.n	800709e <pow+0xa2>
 80070d8:	3ff00000 	.word	0x3ff00000

080070dc <sqrt>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	ed2d 8b02 	vpush	{d8}
 80070e2:	ec55 4b10 	vmov	r4, r5, d0
 80070e6:	f000 f88f 	bl	8007208 <__ieee754_sqrt>
 80070ea:	4622      	mov	r2, r4
 80070ec:	462b      	mov	r3, r5
 80070ee:	4620      	mov	r0, r4
 80070f0:	4629      	mov	r1, r5
 80070f2:	eeb0 8a40 	vmov.f32	s16, s0
 80070f6:	eef0 8a60 	vmov.f32	s17, s1
 80070fa:	f7f9 fd1f 	bl	8000b3c <__aeabi_dcmpun>
 80070fe:	b990      	cbnz	r0, 8007126 <sqrt+0x4a>
 8007100:	2200      	movs	r2, #0
 8007102:	2300      	movs	r3, #0
 8007104:	4620      	mov	r0, r4
 8007106:	4629      	mov	r1, r5
 8007108:	f7f9 fcf0 	bl	8000aec <__aeabi_dcmplt>
 800710c:	b158      	cbz	r0, 8007126 <sqrt+0x4a>
 800710e:	f7fe f819 	bl	8005144 <__errno>
 8007112:	2321      	movs	r3, #33	@ 0x21
 8007114:	6003      	str	r3, [r0, #0]
 8007116:	2200      	movs	r2, #0
 8007118:	2300      	movs	r3, #0
 800711a:	4610      	mov	r0, r2
 800711c:	4619      	mov	r1, r3
 800711e:	f7f9 fb9d 	bl	800085c <__aeabi_ddiv>
 8007122:	ec41 0b18 	vmov	d8, r0, r1
 8007126:	eeb0 0a48 	vmov.f32	s0, s16
 800712a:	eef0 0a68 	vmov.f32	s1, s17
 800712e:	ecbd 8b02 	vpop	{d8}
 8007132:	bd38      	pop	{r3, r4, r5, pc}

08007134 <finite>:
 8007134:	b082      	sub	sp, #8
 8007136:	ed8d 0b00 	vstr	d0, [sp]
 800713a:	9801      	ldr	r0, [sp, #4]
 800713c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007140:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007144:	0fc0      	lsrs	r0, r0, #31
 8007146:	b002      	add	sp, #8
 8007148:	4770      	bx	lr
 800714a:	0000      	movs	r0, r0
 800714c:	0000      	movs	r0, r0
	...

08007150 <nan>:
 8007150:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007158 <nan+0x8>
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	00000000 	.word	0x00000000
 800715c:	7ff80000 	.word	0x7ff80000

08007160 <fmax>:
 8007160:	b508      	push	{r3, lr}
 8007162:	ed2d 8b04 	vpush	{d8-d9}
 8007166:	eeb0 8a40 	vmov.f32	s16, s0
 800716a:	eef0 8a60 	vmov.f32	s17, s1
 800716e:	eeb0 9a41 	vmov.f32	s18, s2
 8007172:	eef0 9a61 	vmov.f32	s19, s3
 8007176:	f000 f81d 	bl	80071b4 <__fpclassifyd>
 800717a:	b950      	cbnz	r0, 8007192 <fmax+0x32>
 800717c:	eeb0 8a49 	vmov.f32	s16, s18
 8007180:	eef0 8a69 	vmov.f32	s17, s19
 8007184:	eeb0 0a48 	vmov.f32	s0, s16
 8007188:	eef0 0a68 	vmov.f32	s1, s17
 800718c:	ecbd 8b04 	vpop	{d8-d9}
 8007190:	bd08      	pop	{r3, pc}
 8007192:	eeb0 0a49 	vmov.f32	s0, s18
 8007196:	eef0 0a69 	vmov.f32	s1, s19
 800719a:	f000 f80b 	bl	80071b4 <__fpclassifyd>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d0f0      	beq.n	8007184 <fmax+0x24>
 80071a2:	ec53 2b19 	vmov	r2, r3, d9
 80071a6:	ec51 0b18 	vmov	r0, r1, d8
 80071aa:	f7f9 fcbd 	bl	8000b28 <__aeabi_dcmpgt>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d0e4      	beq.n	800717c <fmax+0x1c>
 80071b2:	e7e7      	b.n	8007184 <fmax+0x24>

080071b4 <__fpclassifyd>:
 80071b4:	ec51 0b10 	vmov	r0, r1, d0
 80071b8:	b510      	push	{r4, lr}
 80071ba:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80071be:	460b      	mov	r3, r1
 80071c0:	d019      	beq.n	80071f6 <__fpclassifyd+0x42>
 80071c2:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80071c6:	490e      	ldr	r1, [pc, #56]	@ (8007200 <__fpclassifyd+0x4c>)
 80071c8:	428a      	cmp	r2, r1
 80071ca:	d90e      	bls.n	80071ea <__fpclassifyd+0x36>
 80071cc:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80071d0:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80071d4:	428a      	cmp	r2, r1
 80071d6:	d908      	bls.n	80071ea <__fpclassifyd+0x36>
 80071d8:	4a0a      	ldr	r2, [pc, #40]	@ (8007204 <__fpclassifyd+0x50>)
 80071da:	4213      	tst	r3, r2
 80071dc:	d007      	beq.n	80071ee <__fpclassifyd+0x3a>
 80071de:	4294      	cmp	r4, r2
 80071e0:	d107      	bne.n	80071f2 <__fpclassifyd+0x3e>
 80071e2:	fab0 f080 	clz	r0, r0
 80071e6:	0940      	lsrs	r0, r0, #5
 80071e8:	bd10      	pop	{r4, pc}
 80071ea:	2004      	movs	r0, #4
 80071ec:	e7fc      	b.n	80071e8 <__fpclassifyd+0x34>
 80071ee:	2003      	movs	r0, #3
 80071f0:	e7fa      	b.n	80071e8 <__fpclassifyd+0x34>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e7f8      	b.n	80071e8 <__fpclassifyd+0x34>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d1ee      	bne.n	80071d8 <__fpclassifyd+0x24>
 80071fa:	2002      	movs	r0, #2
 80071fc:	e7f4      	b.n	80071e8 <__fpclassifyd+0x34>
 80071fe:	bf00      	nop
 8007200:	7fdfffff 	.word	0x7fdfffff
 8007204:	7ff00000 	.word	0x7ff00000

08007208 <__ieee754_sqrt>:
 8007208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	4a68      	ldr	r2, [pc, #416]	@ (80073b0 <__ieee754_sqrt+0x1a8>)
 800720e:	ec55 4b10 	vmov	r4, r5, d0
 8007212:	43aa      	bics	r2, r5
 8007214:	462b      	mov	r3, r5
 8007216:	4621      	mov	r1, r4
 8007218:	d110      	bne.n	800723c <__ieee754_sqrt+0x34>
 800721a:	4622      	mov	r2, r4
 800721c:	4620      	mov	r0, r4
 800721e:	4629      	mov	r1, r5
 8007220:	f7f9 f9f2 	bl	8000608 <__aeabi_dmul>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4620      	mov	r0, r4
 800722a:	4629      	mov	r1, r5
 800722c:	f7f9 f836 	bl	800029c <__adddf3>
 8007230:	4604      	mov	r4, r0
 8007232:	460d      	mov	r5, r1
 8007234:	ec45 4b10 	vmov	d0, r4, r5
 8007238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723c:	2d00      	cmp	r5, #0
 800723e:	dc0e      	bgt.n	800725e <__ieee754_sqrt+0x56>
 8007240:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007244:	4322      	orrs	r2, r4
 8007246:	d0f5      	beq.n	8007234 <__ieee754_sqrt+0x2c>
 8007248:	b19d      	cbz	r5, 8007272 <__ieee754_sqrt+0x6a>
 800724a:	4622      	mov	r2, r4
 800724c:	4620      	mov	r0, r4
 800724e:	4629      	mov	r1, r5
 8007250:	f7f9 f822 	bl	8000298 <__aeabi_dsub>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	f7f9 fb00 	bl	800085c <__aeabi_ddiv>
 800725c:	e7e8      	b.n	8007230 <__ieee754_sqrt+0x28>
 800725e:	152a      	asrs	r2, r5, #20
 8007260:	d115      	bne.n	800728e <__ieee754_sqrt+0x86>
 8007262:	2000      	movs	r0, #0
 8007264:	e009      	b.n	800727a <__ieee754_sqrt+0x72>
 8007266:	0acb      	lsrs	r3, r1, #11
 8007268:	3a15      	subs	r2, #21
 800726a:	0549      	lsls	r1, r1, #21
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0fa      	beq.n	8007266 <__ieee754_sqrt+0x5e>
 8007270:	e7f7      	b.n	8007262 <__ieee754_sqrt+0x5a>
 8007272:	462a      	mov	r2, r5
 8007274:	e7fa      	b.n	800726c <__ieee754_sqrt+0x64>
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	3001      	adds	r0, #1
 800727a:	02dc      	lsls	r4, r3, #11
 800727c:	d5fb      	bpl.n	8007276 <__ieee754_sqrt+0x6e>
 800727e:	1e44      	subs	r4, r0, #1
 8007280:	1b12      	subs	r2, r2, r4
 8007282:	f1c0 0420 	rsb	r4, r0, #32
 8007286:	fa21 f404 	lsr.w	r4, r1, r4
 800728a:	4323      	orrs	r3, r4
 800728c:	4081      	lsls	r1, r0
 800728e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007292:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800729a:	07d2      	lsls	r2, r2, #31
 800729c:	bf5c      	itt	pl
 800729e:	005b      	lslpl	r3, r3, #1
 80072a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80072a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072a8:	bf58      	it	pl
 80072aa:	0049      	lslpl	r1, r1, #1
 80072ac:	2600      	movs	r6, #0
 80072ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80072b2:	106d      	asrs	r5, r5, #1
 80072b4:	0049      	lsls	r1, r1, #1
 80072b6:	2016      	movs	r0, #22
 80072b8:	4632      	mov	r2, r6
 80072ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80072be:	1917      	adds	r7, r2, r4
 80072c0:	429f      	cmp	r7, r3
 80072c2:	bfde      	ittt	le
 80072c4:	193a      	addle	r2, r7, r4
 80072c6:	1bdb      	suble	r3, r3, r7
 80072c8:	1936      	addle	r6, r6, r4
 80072ca:	0fcf      	lsrs	r7, r1, #31
 80072cc:	3801      	subs	r0, #1
 80072ce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80072d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80072d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80072da:	d1f0      	bne.n	80072be <__ieee754_sqrt+0xb6>
 80072dc:	4604      	mov	r4, r0
 80072de:	2720      	movs	r7, #32
 80072e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80072e4:	429a      	cmp	r2, r3
 80072e6:	eb00 0e0c 	add.w	lr, r0, ip
 80072ea:	db02      	blt.n	80072f2 <__ieee754_sqrt+0xea>
 80072ec:	d113      	bne.n	8007316 <__ieee754_sqrt+0x10e>
 80072ee:	458e      	cmp	lr, r1
 80072f0:	d811      	bhi.n	8007316 <__ieee754_sqrt+0x10e>
 80072f2:	f1be 0f00 	cmp.w	lr, #0
 80072f6:	eb0e 000c 	add.w	r0, lr, ip
 80072fa:	da42      	bge.n	8007382 <__ieee754_sqrt+0x17a>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	db40      	blt.n	8007382 <__ieee754_sqrt+0x17a>
 8007300:	f102 0801 	add.w	r8, r2, #1
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	458e      	cmp	lr, r1
 8007308:	bf88      	it	hi
 800730a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800730e:	eba1 010e 	sub.w	r1, r1, lr
 8007312:	4464      	add	r4, ip
 8007314:	4642      	mov	r2, r8
 8007316:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800731a:	3f01      	subs	r7, #1
 800731c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007320:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007324:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007328:	d1dc      	bne.n	80072e4 <__ieee754_sqrt+0xdc>
 800732a:	4319      	orrs	r1, r3
 800732c:	d01b      	beq.n	8007366 <__ieee754_sqrt+0x15e>
 800732e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80073b4 <__ieee754_sqrt+0x1ac>
 8007332:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80073b8 <__ieee754_sqrt+0x1b0>
 8007336:	e9da 0100 	ldrd	r0, r1, [sl]
 800733a:	e9db 2300 	ldrd	r2, r3, [fp]
 800733e:	f7f8 ffab 	bl	8000298 <__aeabi_dsub>
 8007342:	e9da 8900 	ldrd	r8, r9, [sl]
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4640      	mov	r0, r8
 800734c:	4649      	mov	r1, r9
 800734e:	f7f9 fbd7 	bl	8000b00 <__aeabi_dcmple>
 8007352:	b140      	cbz	r0, 8007366 <__ieee754_sqrt+0x15e>
 8007354:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007358:	e9da 0100 	ldrd	r0, r1, [sl]
 800735c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007360:	d111      	bne.n	8007386 <__ieee754_sqrt+0x17e>
 8007362:	3601      	adds	r6, #1
 8007364:	463c      	mov	r4, r7
 8007366:	1072      	asrs	r2, r6, #1
 8007368:	0863      	lsrs	r3, r4, #1
 800736a:	07f1      	lsls	r1, r6, #31
 800736c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007370:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007374:	bf48      	it	mi
 8007376:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800737a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800737e:	4618      	mov	r0, r3
 8007380:	e756      	b.n	8007230 <__ieee754_sqrt+0x28>
 8007382:	4690      	mov	r8, r2
 8007384:	e7be      	b.n	8007304 <__ieee754_sqrt+0xfc>
 8007386:	f7f8 ff89 	bl	800029c <__adddf3>
 800738a:	e9da 8900 	ldrd	r8, r9, [sl]
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4640      	mov	r0, r8
 8007394:	4649      	mov	r1, r9
 8007396:	f7f9 fba9 	bl	8000aec <__aeabi_dcmplt>
 800739a:	b120      	cbz	r0, 80073a6 <__ieee754_sqrt+0x19e>
 800739c:	1ca0      	adds	r0, r4, #2
 800739e:	bf08      	it	eq
 80073a0:	3601      	addeq	r6, #1
 80073a2:	3402      	adds	r4, #2
 80073a4:	e7df      	b.n	8007366 <__ieee754_sqrt+0x15e>
 80073a6:	1c63      	adds	r3, r4, #1
 80073a8:	f023 0401 	bic.w	r4, r3, #1
 80073ac:	e7db      	b.n	8007366 <__ieee754_sqrt+0x15e>
 80073ae:	bf00      	nop
 80073b0:	7ff00000 	.word	0x7ff00000
 80073b4:	20000210 	.word	0x20000210
 80073b8:	20000208 	.word	0x20000208
 80073bc:	00000000 	.word	0x00000000

080073c0 <floor>:
 80073c0:	ec51 0b10 	vmov	r0, r1, d0
 80073c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80073c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80073d0:	2e13      	cmp	r6, #19
 80073d2:	460c      	mov	r4, r1
 80073d4:	4605      	mov	r5, r0
 80073d6:	4680      	mov	r8, r0
 80073d8:	dc34      	bgt.n	8007444 <floor+0x84>
 80073da:	2e00      	cmp	r6, #0
 80073dc:	da17      	bge.n	800740e <floor+0x4e>
 80073de:	a332      	add	r3, pc, #200	@ (adr r3, 80074a8 <floor+0xe8>)
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f7f8 ff5a 	bl	800029c <__adddf3>
 80073e8:	2200      	movs	r2, #0
 80073ea:	2300      	movs	r3, #0
 80073ec:	f7f9 fb9c 	bl	8000b28 <__aeabi_dcmpgt>
 80073f0:	b150      	cbz	r0, 8007408 <floor+0x48>
 80073f2:	2c00      	cmp	r4, #0
 80073f4:	da55      	bge.n	80074a2 <floor+0xe2>
 80073f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80073fa:	432c      	orrs	r4, r5
 80073fc:	2500      	movs	r5, #0
 80073fe:	42ac      	cmp	r4, r5
 8007400:	4c2b      	ldr	r4, [pc, #172]	@ (80074b0 <floor+0xf0>)
 8007402:	bf08      	it	eq
 8007404:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007408:	4621      	mov	r1, r4
 800740a:	4628      	mov	r0, r5
 800740c:	e023      	b.n	8007456 <floor+0x96>
 800740e:	4f29      	ldr	r7, [pc, #164]	@ (80074b4 <floor+0xf4>)
 8007410:	4137      	asrs	r7, r6
 8007412:	ea01 0307 	and.w	r3, r1, r7
 8007416:	4303      	orrs	r3, r0
 8007418:	d01d      	beq.n	8007456 <floor+0x96>
 800741a:	a323      	add	r3, pc, #140	@ (adr r3, 80074a8 <floor+0xe8>)
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	f7f8 ff3c 	bl	800029c <__adddf3>
 8007424:	2200      	movs	r2, #0
 8007426:	2300      	movs	r3, #0
 8007428:	f7f9 fb7e 	bl	8000b28 <__aeabi_dcmpgt>
 800742c:	2800      	cmp	r0, #0
 800742e:	d0eb      	beq.n	8007408 <floor+0x48>
 8007430:	2c00      	cmp	r4, #0
 8007432:	bfbe      	ittt	lt
 8007434:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007438:	4133      	asrlt	r3, r6
 800743a:	18e4      	addlt	r4, r4, r3
 800743c:	ea24 0407 	bic.w	r4, r4, r7
 8007440:	2500      	movs	r5, #0
 8007442:	e7e1      	b.n	8007408 <floor+0x48>
 8007444:	2e33      	cmp	r6, #51	@ 0x33
 8007446:	dd0a      	ble.n	800745e <floor+0x9e>
 8007448:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800744c:	d103      	bne.n	8007456 <floor+0x96>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	f7f8 ff23 	bl	800029c <__adddf3>
 8007456:	ec41 0b10 	vmov	d0, r0, r1
 800745a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800745e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007462:	f04f 37ff 	mov.w	r7, #4294967295
 8007466:	40df      	lsrs	r7, r3
 8007468:	4207      	tst	r7, r0
 800746a:	d0f4      	beq.n	8007456 <floor+0x96>
 800746c:	a30e      	add	r3, pc, #56	@ (adr r3, 80074a8 <floor+0xe8>)
 800746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007472:	f7f8 ff13 	bl	800029c <__adddf3>
 8007476:	2200      	movs	r2, #0
 8007478:	2300      	movs	r3, #0
 800747a:	f7f9 fb55 	bl	8000b28 <__aeabi_dcmpgt>
 800747e:	2800      	cmp	r0, #0
 8007480:	d0c2      	beq.n	8007408 <floor+0x48>
 8007482:	2c00      	cmp	r4, #0
 8007484:	da0a      	bge.n	800749c <floor+0xdc>
 8007486:	2e14      	cmp	r6, #20
 8007488:	d101      	bne.n	800748e <floor+0xce>
 800748a:	3401      	adds	r4, #1
 800748c:	e006      	b.n	800749c <floor+0xdc>
 800748e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007492:	2301      	movs	r3, #1
 8007494:	40b3      	lsls	r3, r6
 8007496:	441d      	add	r5, r3
 8007498:	4545      	cmp	r5, r8
 800749a:	d3f6      	bcc.n	800748a <floor+0xca>
 800749c:	ea25 0507 	bic.w	r5, r5, r7
 80074a0:	e7b2      	b.n	8007408 <floor+0x48>
 80074a2:	2500      	movs	r5, #0
 80074a4:	462c      	mov	r4, r5
 80074a6:	e7af      	b.n	8007408 <floor+0x48>
 80074a8:	8800759c 	.word	0x8800759c
 80074ac:	7e37e43c 	.word	0x7e37e43c
 80074b0:	bff00000 	.word	0xbff00000
 80074b4:	000fffff 	.word	0x000fffff

080074b8 <__ieee754_log10>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	ec55 4b10 	vmov	r4, r5, d0
 80074c0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80074c4:	ed2d 8b02 	vpush	{d8}
 80074c8:	462b      	mov	r3, r5
 80074ca:	da2e      	bge.n	800752a <__ieee754_log10+0x72>
 80074cc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80074d0:	4322      	orrs	r2, r4
 80074d2:	d10b      	bne.n	80074ec <__ieee754_log10+0x34>
 80074d4:	493a      	ldr	r1, [pc, #232]	@ (80075c0 <__ieee754_log10+0x108>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	2300      	movs	r3, #0
 80074da:	2000      	movs	r0, #0
 80074dc:	f7f9 f9be 	bl	800085c <__aeabi_ddiv>
 80074e0:	ecbd 8b02 	vpop	{d8}
 80074e4:	ec41 0b10 	vmov	d0, r0, r1
 80074e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ec:	2d00      	cmp	r5, #0
 80074ee:	da07      	bge.n	8007500 <__ieee754_log10+0x48>
 80074f0:	4622      	mov	r2, r4
 80074f2:	4620      	mov	r0, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f8 fecf 	bl	8000298 <__aeabi_dsub>
 80074fa:	2200      	movs	r2, #0
 80074fc:	2300      	movs	r3, #0
 80074fe:	e7ed      	b.n	80074dc <__ieee754_log10+0x24>
 8007500:	4b30      	ldr	r3, [pc, #192]	@ (80075c4 <__ieee754_log10+0x10c>)
 8007502:	2200      	movs	r2, #0
 8007504:	4620      	mov	r0, r4
 8007506:	4629      	mov	r1, r5
 8007508:	f7f9 f87e 	bl	8000608 <__aeabi_dmul>
 800750c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8007510:	4604      	mov	r4, r0
 8007512:	460d      	mov	r5, r1
 8007514:	460b      	mov	r3, r1
 8007516:	492c      	ldr	r1, [pc, #176]	@ (80075c8 <__ieee754_log10+0x110>)
 8007518:	428b      	cmp	r3, r1
 800751a:	dd08      	ble.n	800752e <__ieee754_log10+0x76>
 800751c:	4622      	mov	r2, r4
 800751e:	462b      	mov	r3, r5
 8007520:	4620      	mov	r0, r4
 8007522:	4629      	mov	r1, r5
 8007524:	f7f8 feba 	bl	800029c <__adddf3>
 8007528:	e7da      	b.n	80074e0 <__ieee754_log10+0x28>
 800752a:	2200      	movs	r2, #0
 800752c:	e7f3      	b.n	8007516 <__ieee754_log10+0x5e>
 800752e:	1518      	asrs	r0, r3, #20
 8007530:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8007534:	4410      	add	r0, r2
 8007536:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800753a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800753e:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8007542:	f7f8 fff7 	bl	8000534 <__aeabi_i2d>
 8007546:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800754a:	3303      	adds	r3, #3
 800754c:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8007550:	a315      	add	r3, pc, #84	@ (adr r3, 80075a8 <__ieee754_log10+0xf0>)
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	ec45 4b18 	vmov	d8, r4, r5
 800755a:	4606      	mov	r6, r0
 800755c:	460f      	mov	r7, r1
 800755e:	f7f9 f853 	bl	8000608 <__aeabi_dmul>
 8007562:	eeb0 0a48 	vmov.f32	s0, s16
 8007566:	eef0 0a68 	vmov.f32	s1, s17
 800756a:	4604      	mov	r4, r0
 800756c:	460d      	mov	r5, r1
 800756e:	f000 fe37 	bl	80081e0 <__ieee754_log>
 8007572:	a30f      	add	r3, pc, #60	@ (adr r3, 80075b0 <__ieee754_log10+0xf8>)
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	ec51 0b10 	vmov	r0, r1, d0
 800757c:	f7f9 f844 	bl	8000608 <__aeabi_dmul>
 8007580:	4622      	mov	r2, r4
 8007582:	462b      	mov	r3, r5
 8007584:	f7f8 fe8a 	bl	800029c <__adddf3>
 8007588:	a30b      	add	r3, pc, #44	@ (adr r3, 80075b8 <__ieee754_log10+0x100>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	4604      	mov	r4, r0
 8007590:	460d      	mov	r5, r1
 8007592:	4630      	mov	r0, r6
 8007594:	4639      	mov	r1, r7
 8007596:	f7f9 f837 	bl	8000608 <__aeabi_dmul>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	e7bf      	b.n	8007524 <__ieee754_log10+0x6c>
 80075a4:	f3af 8000 	nop.w
 80075a8:	11f12b36 	.word	0x11f12b36
 80075ac:	3d59fef3 	.word	0x3d59fef3
 80075b0:	1526e50e 	.word	0x1526e50e
 80075b4:	3fdbcb7b 	.word	0x3fdbcb7b
 80075b8:	509f6000 	.word	0x509f6000
 80075bc:	3fd34413 	.word	0x3fd34413
 80075c0:	c3500000 	.word	0xc3500000
 80075c4:	43500000 	.word	0x43500000
 80075c8:	7fefffff 	.word	0x7fefffff
 80075cc:	00000000 	.word	0x00000000

080075d0 <__ieee754_pow>:
 80075d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	b091      	sub	sp, #68	@ 0x44
 80075d6:	ed8d 1b00 	vstr	d1, [sp]
 80075da:	e9dd 1900 	ldrd	r1, r9, [sp]
 80075de:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80075e2:	ea5a 0001 	orrs.w	r0, sl, r1
 80075e6:	ec57 6b10 	vmov	r6, r7, d0
 80075ea:	d113      	bne.n	8007614 <__ieee754_pow+0x44>
 80075ec:	19b3      	adds	r3, r6, r6
 80075ee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80075f2:	4152      	adcs	r2, r2
 80075f4:	4298      	cmp	r0, r3
 80075f6:	4b98      	ldr	r3, [pc, #608]	@ (8007858 <__ieee754_pow+0x288>)
 80075f8:	4193      	sbcs	r3, r2
 80075fa:	f080 84ea 	bcs.w	8007fd2 <__ieee754_pow+0xa02>
 80075fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007602:	4630      	mov	r0, r6
 8007604:	4639      	mov	r1, r7
 8007606:	f7f8 fe49 	bl	800029c <__adddf3>
 800760a:	ec41 0b10 	vmov	d0, r0, r1
 800760e:	b011      	add	sp, #68	@ 0x44
 8007610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007614:	4a91      	ldr	r2, [pc, #580]	@ (800785c <__ieee754_pow+0x28c>)
 8007616:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800761a:	4590      	cmp	r8, r2
 800761c:	463d      	mov	r5, r7
 800761e:	4633      	mov	r3, r6
 8007620:	d806      	bhi.n	8007630 <__ieee754_pow+0x60>
 8007622:	d101      	bne.n	8007628 <__ieee754_pow+0x58>
 8007624:	2e00      	cmp	r6, #0
 8007626:	d1ea      	bne.n	80075fe <__ieee754_pow+0x2e>
 8007628:	4592      	cmp	sl, r2
 800762a:	d801      	bhi.n	8007630 <__ieee754_pow+0x60>
 800762c:	d10e      	bne.n	800764c <__ieee754_pow+0x7c>
 800762e:	b169      	cbz	r1, 800764c <__ieee754_pow+0x7c>
 8007630:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007634:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007638:	431d      	orrs	r5, r3
 800763a:	d1e0      	bne.n	80075fe <__ieee754_pow+0x2e>
 800763c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007640:	18db      	adds	r3, r3, r3
 8007642:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007646:	4152      	adcs	r2, r2
 8007648:	429d      	cmp	r5, r3
 800764a:	e7d4      	b.n	80075f6 <__ieee754_pow+0x26>
 800764c:	2d00      	cmp	r5, #0
 800764e:	46c3      	mov	fp, r8
 8007650:	da3a      	bge.n	80076c8 <__ieee754_pow+0xf8>
 8007652:	4a83      	ldr	r2, [pc, #524]	@ (8007860 <__ieee754_pow+0x290>)
 8007654:	4592      	cmp	sl, r2
 8007656:	d84d      	bhi.n	80076f4 <__ieee754_pow+0x124>
 8007658:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800765c:	4592      	cmp	sl, r2
 800765e:	f240 84c7 	bls.w	8007ff0 <__ieee754_pow+0xa20>
 8007662:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007666:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800766a:	2a14      	cmp	r2, #20
 800766c:	dd0f      	ble.n	800768e <__ieee754_pow+0xbe>
 800766e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007672:	fa21 f402 	lsr.w	r4, r1, r2
 8007676:	fa04 f202 	lsl.w	r2, r4, r2
 800767a:	428a      	cmp	r2, r1
 800767c:	f040 84b8 	bne.w	8007ff0 <__ieee754_pow+0xa20>
 8007680:	f004 0401 	and.w	r4, r4, #1
 8007684:	f1c4 0402 	rsb	r4, r4, #2
 8007688:	2900      	cmp	r1, #0
 800768a:	d158      	bne.n	800773e <__ieee754_pow+0x16e>
 800768c:	e00e      	b.n	80076ac <__ieee754_pow+0xdc>
 800768e:	2900      	cmp	r1, #0
 8007690:	d154      	bne.n	800773c <__ieee754_pow+0x16c>
 8007692:	f1c2 0214 	rsb	r2, r2, #20
 8007696:	fa4a f402 	asr.w	r4, sl, r2
 800769a:	fa04 f202 	lsl.w	r2, r4, r2
 800769e:	4552      	cmp	r2, sl
 80076a0:	f040 84a3 	bne.w	8007fea <__ieee754_pow+0xa1a>
 80076a4:	f004 0401 	and.w	r4, r4, #1
 80076a8:	f1c4 0402 	rsb	r4, r4, #2
 80076ac:	4a6d      	ldr	r2, [pc, #436]	@ (8007864 <__ieee754_pow+0x294>)
 80076ae:	4592      	cmp	sl, r2
 80076b0:	d12e      	bne.n	8007710 <__ieee754_pow+0x140>
 80076b2:	f1b9 0f00 	cmp.w	r9, #0
 80076b6:	f280 8494 	bge.w	8007fe2 <__ieee754_pow+0xa12>
 80076ba:	496a      	ldr	r1, [pc, #424]	@ (8007864 <__ieee754_pow+0x294>)
 80076bc:	4632      	mov	r2, r6
 80076be:	463b      	mov	r3, r7
 80076c0:	2000      	movs	r0, #0
 80076c2:	f7f9 f8cb 	bl	800085c <__aeabi_ddiv>
 80076c6:	e7a0      	b.n	800760a <__ieee754_pow+0x3a>
 80076c8:	2400      	movs	r4, #0
 80076ca:	bbc1      	cbnz	r1, 800773e <__ieee754_pow+0x16e>
 80076cc:	4a63      	ldr	r2, [pc, #396]	@ (800785c <__ieee754_pow+0x28c>)
 80076ce:	4592      	cmp	sl, r2
 80076d0:	d1ec      	bne.n	80076ac <__ieee754_pow+0xdc>
 80076d2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80076d6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80076da:	431a      	orrs	r2, r3
 80076dc:	f000 8479 	beq.w	8007fd2 <__ieee754_pow+0xa02>
 80076e0:	4b61      	ldr	r3, [pc, #388]	@ (8007868 <__ieee754_pow+0x298>)
 80076e2:	4598      	cmp	r8, r3
 80076e4:	d908      	bls.n	80076f8 <__ieee754_pow+0x128>
 80076e6:	f1b9 0f00 	cmp.w	r9, #0
 80076ea:	f2c0 8476 	blt.w	8007fda <__ieee754_pow+0xa0a>
 80076ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076f2:	e78a      	b.n	800760a <__ieee754_pow+0x3a>
 80076f4:	2402      	movs	r4, #2
 80076f6:	e7e8      	b.n	80076ca <__ieee754_pow+0xfa>
 80076f8:	f1b9 0f00 	cmp.w	r9, #0
 80076fc:	f04f 0000 	mov.w	r0, #0
 8007700:	f04f 0100 	mov.w	r1, #0
 8007704:	da81      	bge.n	800760a <__ieee754_pow+0x3a>
 8007706:	e9dd 0300 	ldrd	r0, r3, [sp]
 800770a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800770e:	e77c      	b.n	800760a <__ieee754_pow+0x3a>
 8007710:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007714:	d106      	bne.n	8007724 <__ieee754_pow+0x154>
 8007716:	4632      	mov	r2, r6
 8007718:	463b      	mov	r3, r7
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f8 ff73 	bl	8000608 <__aeabi_dmul>
 8007722:	e772      	b.n	800760a <__ieee754_pow+0x3a>
 8007724:	4a51      	ldr	r2, [pc, #324]	@ (800786c <__ieee754_pow+0x29c>)
 8007726:	4591      	cmp	r9, r2
 8007728:	d109      	bne.n	800773e <__ieee754_pow+0x16e>
 800772a:	2d00      	cmp	r5, #0
 800772c:	db07      	blt.n	800773e <__ieee754_pow+0x16e>
 800772e:	ec47 6b10 	vmov	d0, r6, r7
 8007732:	b011      	add	sp, #68	@ 0x44
 8007734:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007738:	f7ff bd66 	b.w	8007208 <__ieee754_sqrt>
 800773c:	2400      	movs	r4, #0
 800773e:	ec47 6b10 	vmov	d0, r6, r7
 8007742:	9302      	str	r3, [sp, #8]
 8007744:	f000 fc88 	bl	8008058 <fabs>
 8007748:	9b02      	ldr	r3, [sp, #8]
 800774a:	ec51 0b10 	vmov	r0, r1, d0
 800774e:	bb53      	cbnz	r3, 80077a6 <__ieee754_pow+0x1d6>
 8007750:	4b44      	ldr	r3, [pc, #272]	@ (8007864 <__ieee754_pow+0x294>)
 8007752:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007756:	429a      	cmp	r2, r3
 8007758:	d002      	beq.n	8007760 <__ieee754_pow+0x190>
 800775a:	f1b8 0f00 	cmp.w	r8, #0
 800775e:	d122      	bne.n	80077a6 <__ieee754_pow+0x1d6>
 8007760:	f1b9 0f00 	cmp.w	r9, #0
 8007764:	da05      	bge.n	8007772 <__ieee754_pow+0x1a2>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	2000      	movs	r0, #0
 800776c:	493d      	ldr	r1, [pc, #244]	@ (8007864 <__ieee754_pow+0x294>)
 800776e:	f7f9 f875 	bl	800085c <__aeabi_ddiv>
 8007772:	2d00      	cmp	r5, #0
 8007774:	f6bf af49 	bge.w	800760a <__ieee754_pow+0x3a>
 8007778:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800777c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007780:	ea58 0804 	orrs.w	r8, r8, r4
 8007784:	d108      	bne.n	8007798 <__ieee754_pow+0x1c8>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4610      	mov	r0, r2
 800778c:	4619      	mov	r1, r3
 800778e:	f7f8 fd83 	bl	8000298 <__aeabi_dsub>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	e794      	b.n	80076c2 <__ieee754_pow+0xf2>
 8007798:	2c01      	cmp	r4, #1
 800779a:	f47f af36 	bne.w	800760a <__ieee754_pow+0x3a>
 800779e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80077a2:	4619      	mov	r1, r3
 80077a4:	e731      	b.n	800760a <__ieee754_pow+0x3a>
 80077a6:	0feb      	lsrs	r3, r5, #31
 80077a8:	3b01      	subs	r3, #1
 80077aa:	ea53 0204 	orrs.w	r2, r3, r4
 80077ae:	d102      	bne.n	80077b6 <__ieee754_pow+0x1e6>
 80077b0:	4632      	mov	r2, r6
 80077b2:	463b      	mov	r3, r7
 80077b4:	e7e9      	b.n	800778a <__ieee754_pow+0x1ba>
 80077b6:	3c01      	subs	r4, #1
 80077b8:	431c      	orrs	r4, r3
 80077ba:	d016      	beq.n	80077ea <__ieee754_pow+0x21a>
 80077bc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007848 <__ieee754_pow+0x278>
 80077c0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80077c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80077c8:	f240 8112 	bls.w	80079f0 <__ieee754_pow+0x420>
 80077cc:	4b28      	ldr	r3, [pc, #160]	@ (8007870 <__ieee754_pow+0x2a0>)
 80077ce:	459a      	cmp	sl, r3
 80077d0:	4b25      	ldr	r3, [pc, #148]	@ (8007868 <__ieee754_pow+0x298>)
 80077d2:	d916      	bls.n	8007802 <__ieee754_pow+0x232>
 80077d4:	4598      	cmp	r8, r3
 80077d6:	d80b      	bhi.n	80077f0 <__ieee754_pow+0x220>
 80077d8:	f1b9 0f00 	cmp.w	r9, #0
 80077dc:	da0b      	bge.n	80077f6 <__ieee754_pow+0x226>
 80077de:	2000      	movs	r0, #0
 80077e0:	b011      	add	sp, #68	@ 0x44
 80077e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e6:	f000 bcf3 	b.w	80081d0 <__math_oflow>
 80077ea:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007850 <__ieee754_pow+0x280>
 80077ee:	e7e7      	b.n	80077c0 <__ieee754_pow+0x1f0>
 80077f0:	f1b9 0f00 	cmp.w	r9, #0
 80077f4:	dcf3      	bgt.n	80077de <__ieee754_pow+0x20e>
 80077f6:	2000      	movs	r0, #0
 80077f8:	b011      	add	sp, #68	@ 0x44
 80077fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fe:	f000 bcdf 	b.w	80081c0 <__math_uflow>
 8007802:	4598      	cmp	r8, r3
 8007804:	d20c      	bcs.n	8007820 <__ieee754_pow+0x250>
 8007806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	f7f9 f96d 	bl	8000aec <__aeabi_dcmplt>
 8007812:	3800      	subs	r0, #0
 8007814:	bf18      	it	ne
 8007816:	2001      	movne	r0, #1
 8007818:	f1b9 0f00 	cmp.w	r9, #0
 800781c:	daec      	bge.n	80077f8 <__ieee754_pow+0x228>
 800781e:	e7df      	b.n	80077e0 <__ieee754_pow+0x210>
 8007820:	4b10      	ldr	r3, [pc, #64]	@ (8007864 <__ieee754_pow+0x294>)
 8007822:	4598      	cmp	r8, r3
 8007824:	f04f 0200 	mov.w	r2, #0
 8007828:	d924      	bls.n	8007874 <__ieee754_pow+0x2a4>
 800782a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800782e:	2300      	movs	r3, #0
 8007830:	f7f9 f95c 	bl	8000aec <__aeabi_dcmplt>
 8007834:	3800      	subs	r0, #0
 8007836:	bf18      	it	ne
 8007838:	2001      	movne	r0, #1
 800783a:	f1b9 0f00 	cmp.w	r9, #0
 800783e:	dccf      	bgt.n	80077e0 <__ieee754_pow+0x210>
 8007840:	e7da      	b.n	80077f8 <__ieee754_pow+0x228>
 8007842:	bf00      	nop
 8007844:	f3af 8000 	nop.w
 8007848:	00000000 	.word	0x00000000
 800784c:	3ff00000 	.word	0x3ff00000
 8007850:	00000000 	.word	0x00000000
 8007854:	bff00000 	.word	0xbff00000
 8007858:	fff00000 	.word	0xfff00000
 800785c:	7ff00000 	.word	0x7ff00000
 8007860:	433fffff 	.word	0x433fffff
 8007864:	3ff00000 	.word	0x3ff00000
 8007868:	3fefffff 	.word	0x3fefffff
 800786c:	3fe00000 	.word	0x3fe00000
 8007870:	43f00000 	.word	0x43f00000
 8007874:	4b5a      	ldr	r3, [pc, #360]	@ (80079e0 <__ieee754_pow+0x410>)
 8007876:	f7f8 fd0f 	bl	8000298 <__aeabi_dsub>
 800787a:	a351      	add	r3, pc, #324	@ (adr r3, 80079c0 <__ieee754_pow+0x3f0>)
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	4604      	mov	r4, r0
 8007882:	460d      	mov	r5, r1
 8007884:	f7f8 fec0 	bl	8000608 <__aeabi_dmul>
 8007888:	a34f      	add	r3, pc, #316	@ (adr r3, 80079c8 <__ieee754_pow+0x3f8>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	4606      	mov	r6, r0
 8007890:	460f      	mov	r7, r1
 8007892:	4620      	mov	r0, r4
 8007894:	4629      	mov	r1, r5
 8007896:	f7f8 feb7 	bl	8000608 <__aeabi_dmul>
 800789a:	4b52      	ldr	r3, [pc, #328]	@ (80079e4 <__ieee754_pow+0x414>)
 800789c:	4682      	mov	sl, r0
 800789e:	468b      	mov	fp, r1
 80078a0:	2200      	movs	r2, #0
 80078a2:	4620      	mov	r0, r4
 80078a4:	4629      	mov	r1, r5
 80078a6:	f7f8 feaf 	bl	8000608 <__aeabi_dmul>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	a148      	add	r1, pc, #288	@ (adr r1, 80079d0 <__ieee754_pow+0x400>)
 80078b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078b4:	f7f8 fcf0 	bl	8000298 <__aeabi_dsub>
 80078b8:	4622      	mov	r2, r4
 80078ba:	462b      	mov	r3, r5
 80078bc:	f7f8 fea4 	bl	8000608 <__aeabi_dmul>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	2000      	movs	r0, #0
 80078c6:	4948      	ldr	r1, [pc, #288]	@ (80079e8 <__ieee754_pow+0x418>)
 80078c8:	f7f8 fce6 	bl	8000298 <__aeabi_dsub>
 80078cc:	4622      	mov	r2, r4
 80078ce:	4680      	mov	r8, r0
 80078d0:	4689      	mov	r9, r1
 80078d2:	462b      	mov	r3, r5
 80078d4:	4620      	mov	r0, r4
 80078d6:	4629      	mov	r1, r5
 80078d8:	f7f8 fe96 	bl	8000608 <__aeabi_dmul>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4640      	mov	r0, r8
 80078e2:	4649      	mov	r1, r9
 80078e4:	f7f8 fe90 	bl	8000608 <__aeabi_dmul>
 80078e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80079d8 <__ieee754_pow+0x408>)
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	f7f8 fe8b 	bl	8000608 <__aeabi_dmul>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4650      	mov	r0, sl
 80078f8:	4659      	mov	r1, fp
 80078fa:	f7f8 fccd 	bl	8000298 <__aeabi_dsub>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4680      	mov	r8, r0
 8007904:	4689      	mov	r9, r1
 8007906:	4630      	mov	r0, r6
 8007908:	4639      	mov	r1, r7
 800790a:	f7f8 fcc7 	bl	800029c <__adddf3>
 800790e:	2400      	movs	r4, #0
 8007910:	4632      	mov	r2, r6
 8007912:	463b      	mov	r3, r7
 8007914:	4620      	mov	r0, r4
 8007916:	460d      	mov	r5, r1
 8007918:	f7f8 fcbe 	bl	8000298 <__aeabi_dsub>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4640      	mov	r0, r8
 8007922:	4649      	mov	r1, r9
 8007924:	f7f8 fcb8 	bl	8000298 <__aeabi_dsub>
 8007928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800792c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007930:	2300      	movs	r3, #0
 8007932:	9304      	str	r3, [sp, #16]
 8007934:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007938:	4606      	mov	r6, r0
 800793a:	460f      	mov	r7, r1
 800793c:	4652      	mov	r2, sl
 800793e:	465b      	mov	r3, fp
 8007940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007944:	f7f8 fca8 	bl	8000298 <__aeabi_dsub>
 8007948:	4622      	mov	r2, r4
 800794a:	462b      	mov	r3, r5
 800794c:	f7f8 fe5c 	bl	8000608 <__aeabi_dmul>
 8007950:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007954:	4680      	mov	r8, r0
 8007956:	4689      	mov	r9, r1
 8007958:	4630      	mov	r0, r6
 800795a:	4639      	mov	r1, r7
 800795c:	f7f8 fe54 	bl	8000608 <__aeabi_dmul>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	4640      	mov	r0, r8
 8007966:	4649      	mov	r1, r9
 8007968:	f7f8 fc98 	bl	800029c <__adddf3>
 800796c:	4652      	mov	r2, sl
 800796e:	465b      	mov	r3, fp
 8007970:	4606      	mov	r6, r0
 8007972:	460f      	mov	r7, r1
 8007974:	4620      	mov	r0, r4
 8007976:	4629      	mov	r1, r5
 8007978:	f7f8 fe46 	bl	8000608 <__aeabi_dmul>
 800797c:	460b      	mov	r3, r1
 800797e:	4602      	mov	r2, r0
 8007980:	4680      	mov	r8, r0
 8007982:	4689      	mov	r9, r1
 8007984:	4630      	mov	r0, r6
 8007986:	4639      	mov	r1, r7
 8007988:	f7f8 fc88 	bl	800029c <__adddf3>
 800798c:	4b17      	ldr	r3, [pc, #92]	@ (80079ec <__ieee754_pow+0x41c>)
 800798e:	4299      	cmp	r1, r3
 8007990:	4604      	mov	r4, r0
 8007992:	460d      	mov	r5, r1
 8007994:	468a      	mov	sl, r1
 8007996:	468b      	mov	fp, r1
 8007998:	f340 82ef 	ble.w	8007f7a <__ieee754_pow+0x9aa>
 800799c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80079a0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80079a4:	4303      	orrs	r3, r0
 80079a6:	f000 81e8 	beq.w	8007d7a <__ieee754_pow+0x7aa>
 80079aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ae:	2200      	movs	r2, #0
 80079b0:	2300      	movs	r3, #0
 80079b2:	f7f9 f89b 	bl	8000aec <__aeabi_dcmplt>
 80079b6:	3800      	subs	r0, #0
 80079b8:	bf18      	it	ne
 80079ba:	2001      	movne	r0, #1
 80079bc:	e710      	b.n	80077e0 <__ieee754_pow+0x210>
 80079be:	bf00      	nop
 80079c0:	60000000 	.word	0x60000000
 80079c4:	3ff71547 	.word	0x3ff71547
 80079c8:	f85ddf44 	.word	0xf85ddf44
 80079cc:	3e54ae0b 	.word	0x3e54ae0b
 80079d0:	55555555 	.word	0x55555555
 80079d4:	3fd55555 	.word	0x3fd55555
 80079d8:	652b82fe 	.word	0x652b82fe
 80079dc:	3ff71547 	.word	0x3ff71547
 80079e0:	3ff00000 	.word	0x3ff00000
 80079e4:	3fd00000 	.word	0x3fd00000
 80079e8:	3fe00000 	.word	0x3fe00000
 80079ec:	408fffff 	.word	0x408fffff
 80079f0:	4bd5      	ldr	r3, [pc, #852]	@ (8007d48 <__ieee754_pow+0x778>)
 80079f2:	402b      	ands	r3, r5
 80079f4:	2200      	movs	r2, #0
 80079f6:	b92b      	cbnz	r3, 8007a04 <__ieee754_pow+0x434>
 80079f8:	4bd4      	ldr	r3, [pc, #848]	@ (8007d4c <__ieee754_pow+0x77c>)
 80079fa:	f7f8 fe05 	bl	8000608 <__aeabi_dmul>
 80079fe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007a02:	468b      	mov	fp, r1
 8007a04:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007a08:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007a0c:	4413      	add	r3, r2
 8007a0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a10:	4bcf      	ldr	r3, [pc, #828]	@ (8007d50 <__ieee754_pow+0x780>)
 8007a12:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007a16:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007a1a:	459b      	cmp	fp, r3
 8007a1c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007a20:	dd08      	ble.n	8007a34 <__ieee754_pow+0x464>
 8007a22:	4bcc      	ldr	r3, [pc, #816]	@ (8007d54 <__ieee754_pow+0x784>)
 8007a24:	459b      	cmp	fp, r3
 8007a26:	f340 81a5 	ble.w	8007d74 <__ieee754_pow+0x7a4>
 8007a2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a30:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007a34:	f04f 0a00 	mov.w	sl, #0
 8007a38:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007a3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a3e:	4bc6      	ldr	r3, [pc, #792]	@ (8007d58 <__ieee754_pow+0x788>)
 8007a40:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a44:	ed93 7b00 	vldr	d7, [r3]
 8007a48:	4629      	mov	r1, r5
 8007a4a:	ec53 2b17 	vmov	r2, r3, d7
 8007a4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a52:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a56:	f7f8 fc1f 	bl	8000298 <__aeabi_dsub>
 8007a5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a5e:	4606      	mov	r6, r0
 8007a60:	460f      	mov	r7, r1
 8007a62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a66:	f7f8 fc19 	bl	800029c <__adddf3>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	2000      	movs	r0, #0
 8007a70:	49ba      	ldr	r1, [pc, #744]	@ (8007d5c <__ieee754_pow+0x78c>)
 8007a72:	f7f8 fef3 	bl	800085c <__aeabi_ddiv>
 8007a76:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4630      	mov	r0, r6
 8007a80:	4639      	mov	r1, r7
 8007a82:	f7f8 fdc1 	bl	8000608 <__aeabi_dmul>
 8007a86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a8a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007a8e:	106d      	asrs	r5, r5, #1
 8007a90:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007a94:	f04f 0b00 	mov.w	fp, #0
 8007a98:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007a9c:	4661      	mov	r1, ip
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007aa4:	4658      	mov	r0, fp
 8007aa6:	46e1      	mov	r9, ip
 8007aa8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007aac:	4614      	mov	r4, r2
 8007aae:	461d      	mov	r5, r3
 8007ab0:	f7f8 fdaa 	bl	8000608 <__aeabi_dmul>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4630      	mov	r0, r6
 8007aba:	4639      	mov	r1, r7
 8007abc:	f7f8 fbec 	bl	8000298 <__aeabi_dsub>
 8007ac0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	460f      	mov	r7, r1
 8007ac8:	4620      	mov	r0, r4
 8007aca:	4629      	mov	r1, r5
 8007acc:	f7f8 fbe4 	bl	8000298 <__aeabi_dsub>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ad8:	f7f8 fbde 	bl	8000298 <__aeabi_dsub>
 8007adc:	465a      	mov	r2, fp
 8007ade:	464b      	mov	r3, r9
 8007ae0:	f7f8 fd92 	bl	8000608 <__aeabi_dmul>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f8 fbd4 	bl	8000298 <__aeabi_dsub>
 8007af0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007af4:	f7f8 fd88 	bl	8000608 <__aeabi_dmul>
 8007af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007afc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b00:	4610      	mov	r0, r2
 8007b02:	4619      	mov	r1, r3
 8007b04:	f7f8 fd80 	bl	8000608 <__aeabi_dmul>
 8007b08:	a37d      	add	r3, pc, #500	@ (adr r3, 8007d00 <__ieee754_pow+0x730>)
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	4604      	mov	r4, r0
 8007b10:	460d      	mov	r5, r1
 8007b12:	f7f8 fd79 	bl	8000608 <__aeabi_dmul>
 8007b16:	a37c      	add	r3, pc, #496	@ (adr r3, 8007d08 <__ieee754_pow+0x738>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	f7f8 fbbe 	bl	800029c <__adddf3>
 8007b20:	4622      	mov	r2, r4
 8007b22:	462b      	mov	r3, r5
 8007b24:	f7f8 fd70 	bl	8000608 <__aeabi_dmul>
 8007b28:	a379      	add	r3, pc, #484	@ (adr r3, 8007d10 <__ieee754_pow+0x740>)
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f7f8 fbb5 	bl	800029c <__adddf3>
 8007b32:	4622      	mov	r2, r4
 8007b34:	462b      	mov	r3, r5
 8007b36:	f7f8 fd67 	bl	8000608 <__aeabi_dmul>
 8007b3a:	a377      	add	r3, pc, #476	@ (adr r3, 8007d18 <__ieee754_pow+0x748>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fbac 	bl	800029c <__adddf3>
 8007b44:	4622      	mov	r2, r4
 8007b46:	462b      	mov	r3, r5
 8007b48:	f7f8 fd5e 	bl	8000608 <__aeabi_dmul>
 8007b4c:	a374      	add	r3, pc, #464	@ (adr r3, 8007d20 <__ieee754_pow+0x750>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 fba3 	bl	800029c <__adddf3>
 8007b56:	4622      	mov	r2, r4
 8007b58:	462b      	mov	r3, r5
 8007b5a:	f7f8 fd55 	bl	8000608 <__aeabi_dmul>
 8007b5e:	a372      	add	r3, pc, #456	@ (adr r3, 8007d28 <__ieee754_pow+0x758>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fb9a 	bl	800029c <__adddf3>
 8007b68:	4622      	mov	r2, r4
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460f      	mov	r7, r1
 8007b6e:	462b      	mov	r3, r5
 8007b70:	4620      	mov	r0, r4
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7f8 fd48 	bl	8000608 <__aeabi_dmul>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	4639      	mov	r1, r7
 8007b80:	f7f8 fd42 	bl	8000608 <__aeabi_dmul>
 8007b84:	465a      	mov	r2, fp
 8007b86:	4604      	mov	r4, r0
 8007b88:	460d      	mov	r5, r1
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b90:	f7f8 fb84 	bl	800029c <__adddf3>
 8007b94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b98:	f7f8 fd36 	bl	8000608 <__aeabi_dmul>
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	462b      	mov	r3, r5
 8007ba0:	f7f8 fb7c 	bl	800029c <__adddf3>
 8007ba4:	465a      	mov	r2, fp
 8007ba6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007baa:	464b      	mov	r3, r9
 8007bac:	4658      	mov	r0, fp
 8007bae:	4649      	mov	r1, r9
 8007bb0:	f7f8 fd2a 	bl	8000608 <__aeabi_dmul>
 8007bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8007d60 <__ieee754_pow+0x790>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	4606      	mov	r6, r0
 8007bba:	460f      	mov	r7, r1
 8007bbc:	f7f8 fb6e 	bl	800029c <__adddf3>
 8007bc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007bc4:	f7f8 fb6a 	bl	800029c <__adddf3>
 8007bc8:	46d8      	mov	r8, fp
 8007bca:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007bce:	460d      	mov	r5, r1
 8007bd0:	465a      	mov	r2, fp
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007bdc:	f7f8 fd14 	bl	8000608 <__aeabi_dmul>
 8007be0:	465c      	mov	r4, fp
 8007be2:	4680      	mov	r8, r0
 8007be4:	4689      	mov	r9, r1
 8007be6:	4b5e      	ldr	r3, [pc, #376]	@ (8007d60 <__ieee754_pow+0x790>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	4620      	mov	r0, r4
 8007bec:	4629      	mov	r1, r5
 8007bee:	f7f8 fb53 	bl	8000298 <__aeabi_dsub>
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	f7f8 fb4f 	bl	8000298 <__aeabi_dsub>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c02:	f7f8 fb49 	bl	8000298 <__aeabi_dsub>
 8007c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c0a:	f7f8 fcfd 	bl	8000608 <__aeabi_dmul>
 8007c0e:	4622      	mov	r2, r4
 8007c10:	4606      	mov	r6, r0
 8007c12:	460f      	mov	r7, r1
 8007c14:	462b      	mov	r3, r5
 8007c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c1a:	f7f8 fcf5 	bl	8000608 <__aeabi_dmul>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4630      	mov	r0, r6
 8007c24:	4639      	mov	r1, r7
 8007c26:	f7f8 fb39 	bl	800029c <__adddf3>
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4640      	mov	r0, r8
 8007c34:	4649      	mov	r1, r9
 8007c36:	f7f8 fb31 	bl	800029c <__adddf3>
 8007c3a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007c3e:	a33c      	add	r3, pc, #240	@ (adr r3, 8007d30 <__ieee754_pow+0x760>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	4658      	mov	r0, fp
 8007c46:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007c4a:	460d      	mov	r5, r1
 8007c4c:	f7f8 fcdc 	bl	8000608 <__aeabi_dmul>
 8007c50:	465c      	mov	r4, fp
 8007c52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c56:	4642      	mov	r2, r8
 8007c58:	464b      	mov	r3, r9
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	f7f8 fb1b 	bl	8000298 <__aeabi_dsub>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4630      	mov	r0, r6
 8007c68:	4639      	mov	r1, r7
 8007c6a:	f7f8 fb15 	bl	8000298 <__aeabi_dsub>
 8007c6e:	a332      	add	r3, pc, #200	@ (adr r3, 8007d38 <__ieee754_pow+0x768>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f7f8 fcc8 	bl	8000608 <__aeabi_dmul>
 8007c78:	a331      	add	r3, pc, #196	@ (adr r3, 8007d40 <__ieee754_pow+0x770>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460f      	mov	r7, r1
 8007c82:	4620      	mov	r0, r4
 8007c84:	4629      	mov	r1, r5
 8007c86:	f7f8 fcbf 	bl	8000608 <__aeabi_dmul>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4630      	mov	r0, r6
 8007c90:	4639      	mov	r1, r7
 8007c92:	f7f8 fb03 	bl	800029c <__adddf3>
 8007c96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c98:	4b32      	ldr	r3, [pc, #200]	@ (8007d64 <__ieee754_pow+0x794>)
 8007c9a:	4413      	add	r3, r2
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f7f8 fafc 	bl	800029c <__adddf3>
 8007ca4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ca8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007caa:	f7f8 fc43 	bl	8000534 <__aeabi_i2d>
 8007cae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8007d68 <__ieee754_pow+0x798>)
 8007cb2:	4413      	add	r3, r2
 8007cb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cb8:	4606      	mov	r6, r0
 8007cba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cbe:	460f      	mov	r7, r1
 8007cc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cc4:	f7f8 faea 	bl	800029c <__adddf3>
 8007cc8:	4642      	mov	r2, r8
 8007cca:	464b      	mov	r3, r9
 8007ccc:	f7f8 fae6 	bl	800029c <__adddf3>
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	463b      	mov	r3, r7
 8007cd4:	f7f8 fae2 	bl	800029c <__adddf3>
 8007cd8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007cdc:	4632      	mov	r2, r6
 8007cde:	463b      	mov	r3, r7
 8007ce0:	4658      	mov	r0, fp
 8007ce2:	460d      	mov	r5, r1
 8007ce4:	f7f8 fad8 	bl	8000298 <__aeabi_dsub>
 8007ce8:	4642      	mov	r2, r8
 8007cea:	464b      	mov	r3, r9
 8007cec:	f7f8 fad4 	bl	8000298 <__aeabi_dsub>
 8007cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cf4:	f7f8 fad0 	bl	8000298 <__aeabi_dsub>
 8007cf8:	465c      	mov	r4, fp
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	e036      	b.n	8007d6c <__ieee754_pow+0x79c>
 8007cfe:	bf00      	nop
 8007d00:	4a454eef 	.word	0x4a454eef
 8007d04:	3fca7e28 	.word	0x3fca7e28
 8007d08:	93c9db65 	.word	0x93c9db65
 8007d0c:	3fcd864a 	.word	0x3fcd864a
 8007d10:	a91d4101 	.word	0xa91d4101
 8007d14:	3fd17460 	.word	0x3fd17460
 8007d18:	518f264d 	.word	0x518f264d
 8007d1c:	3fd55555 	.word	0x3fd55555
 8007d20:	db6fabff 	.word	0xdb6fabff
 8007d24:	3fdb6db6 	.word	0x3fdb6db6
 8007d28:	33333303 	.word	0x33333303
 8007d2c:	3fe33333 	.word	0x3fe33333
 8007d30:	e0000000 	.word	0xe0000000
 8007d34:	3feec709 	.word	0x3feec709
 8007d38:	dc3a03fd 	.word	0xdc3a03fd
 8007d3c:	3feec709 	.word	0x3feec709
 8007d40:	145b01f5 	.word	0x145b01f5
 8007d44:	be3e2fe0 	.word	0xbe3e2fe0
 8007d48:	7ff00000 	.word	0x7ff00000
 8007d4c:	43400000 	.word	0x43400000
 8007d50:	0003988e 	.word	0x0003988e
 8007d54:	000bb679 	.word	0x000bb679
 8007d58:	08009258 	.word	0x08009258
 8007d5c:	3ff00000 	.word	0x3ff00000
 8007d60:	40080000 	.word	0x40080000
 8007d64:	08009238 	.word	0x08009238
 8007d68:	08009248 	.word	0x08009248
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d72:	e5d7      	b.n	8007924 <__ieee754_pow+0x354>
 8007d74:	f04f 0a01 	mov.w	sl, #1
 8007d78:	e65e      	b.n	8007a38 <__ieee754_pow+0x468>
 8007d7a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800804c <__ieee754_pow+0xa7c>)
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	4630      	mov	r0, r6
 8007d82:	4639      	mov	r1, r7
 8007d84:	f7f8 fa8a 	bl	800029c <__adddf3>
 8007d88:	4642      	mov	r2, r8
 8007d8a:	e9cd 0100 	strd	r0, r1, [sp]
 8007d8e:	464b      	mov	r3, r9
 8007d90:	4620      	mov	r0, r4
 8007d92:	4629      	mov	r1, r5
 8007d94:	f7f8 fa80 	bl	8000298 <__aeabi_dsub>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007da0:	f7f8 fec2 	bl	8000b28 <__aeabi_dcmpgt>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	f47f ae00 	bne.w	80079aa <__ieee754_pow+0x3da>
 8007daa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007dae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007db2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007db6:	fa43 fa0a 	asr.w	sl, r3, sl
 8007dba:	44da      	add	sl, fp
 8007dbc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007dc0:	489d      	ldr	r0, [pc, #628]	@ (8008038 <__ieee754_pow+0xa68>)
 8007dc2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007dc6:	4108      	asrs	r0, r1
 8007dc8:	ea00 030a 	and.w	r3, r0, sl
 8007dcc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007dd0:	f1c1 0114 	rsb	r1, r1, #20
 8007dd4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007dd8:	fa4a fa01 	asr.w	sl, sl, r1
 8007ddc:	f1bb 0f00 	cmp.w	fp, #0
 8007de0:	4640      	mov	r0, r8
 8007de2:	4649      	mov	r1, r9
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	bfb8      	it	lt
 8007dea:	f1ca 0a00 	rsblt	sl, sl, #0
 8007dee:	f7f8 fa53 	bl	8000298 <__aeabi_dsub>
 8007df2:	4680      	mov	r8, r0
 8007df4:	4689      	mov	r9, r1
 8007df6:	4632      	mov	r2, r6
 8007df8:	463b      	mov	r3, r7
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	f7f8 fa4d 	bl	800029c <__adddf3>
 8007e02:	2400      	movs	r4, #0
 8007e04:	a37c      	add	r3, pc, #496	@ (adr r3, 8007ff8 <__ieee754_pow+0xa28>)
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	460d      	mov	r5, r1
 8007e0e:	f7f8 fbfb 	bl	8000608 <__aeabi_dmul>
 8007e12:	4642      	mov	r2, r8
 8007e14:	e9cd 0100 	strd	r0, r1, [sp]
 8007e18:	464b      	mov	r3, r9
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f7f8 fa3b 	bl	8000298 <__aeabi_dsub>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4630      	mov	r0, r6
 8007e28:	4639      	mov	r1, r7
 8007e2a:	f7f8 fa35 	bl	8000298 <__aeabi_dsub>
 8007e2e:	a374      	add	r3, pc, #464	@ (adr r3, 8008000 <__ieee754_pow+0xa30>)
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f7f8 fbe8 	bl	8000608 <__aeabi_dmul>
 8007e38:	a373      	add	r3, pc, #460	@ (adr r3, 8008008 <__ieee754_pow+0xa38>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	4680      	mov	r8, r0
 8007e40:	4689      	mov	r9, r1
 8007e42:	4620      	mov	r0, r4
 8007e44:	4629      	mov	r1, r5
 8007e46:	f7f8 fbdf 	bl	8000608 <__aeabi_dmul>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4640      	mov	r0, r8
 8007e50:	4649      	mov	r1, r9
 8007e52:	f7f8 fa23 	bl	800029c <__adddf3>
 8007e56:	4604      	mov	r4, r0
 8007e58:	460d      	mov	r5, r1
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e62:	f7f8 fa1b 	bl	800029c <__adddf3>
 8007e66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	4689      	mov	r9, r1
 8007e6e:	f7f8 fa13 	bl	8000298 <__aeabi_dsub>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4620      	mov	r0, r4
 8007e78:	4629      	mov	r1, r5
 8007e7a:	f7f8 fa0d 	bl	8000298 <__aeabi_dsub>
 8007e7e:	4642      	mov	r2, r8
 8007e80:	4606      	mov	r6, r0
 8007e82:	460f      	mov	r7, r1
 8007e84:	464b      	mov	r3, r9
 8007e86:	4640      	mov	r0, r8
 8007e88:	4649      	mov	r1, r9
 8007e8a:	f7f8 fbbd 	bl	8000608 <__aeabi_dmul>
 8007e8e:	a360      	add	r3, pc, #384	@ (adr r3, 8008010 <__ieee754_pow+0xa40>)
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	4604      	mov	r4, r0
 8007e96:	460d      	mov	r5, r1
 8007e98:	f7f8 fbb6 	bl	8000608 <__aeabi_dmul>
 8007e9c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008018 <__ieee754_pow+0xa48>)
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	f7f8 f9f9 	bl	8000298 <__aeabi_dsub>
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	462b      	mov	r3, r5
 8007eaa:	f7f8 fbad 	bl	8000608 <__aeabi_dmul>
 8007eae:	a35c      	add	r3, pc, #368	@ (adr r3, 8008020 <__ieee754_pow+0xa50>)
 8007eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb4:	f7f8 f9f2 	bl	800029c <__adddf3>
 8007eb8:	4622      	mov	r2, r4
 8007eba:	462b      	mov	r3, r5
 8007ebc:	f7f8 fba4 	bl	8000608 <__aeabi_dmul>
 8007ec0:	a359      	add	r3, pc, #356	@ (adr r3, 8008028 <__ieee754_pow+0xa58>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 f9e7 	bl	8000298 <__aeabi_dsub>
 8007eca:	4622      	mov	r2, r4
 8007ecc:	462b      	mov	r3, r5
 8007ece:	f7f8 fb9b 	bl	8000608 <__aeabi_dmul>
 8007ed2:	a357      	add	r3, pc, #348	@ (adr r3, 8008030 <__ieee754_pow+0xa60>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f7f8 f9e0 	bl	800029c <__adddf3>
 8007edc:	4622      	mov	r2, r4
 8007ede:	462b      	mov	r3, r5
 8007ee0:	f7f8 fb92 	bl	8000608 <__aeabi_dmul>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4640      	mov	r0, r8
 8007eea:	4649      	mov	r1, r9
 8007eec:	f7f8 f9d4 	bl	8000298 <__aeabi_dsub>
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	460d      	mov	r5, r1
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4640      	mov	r0, r8
 8007efa:	4649      	mov	r1, r9
 8007efc:	f7f8 fb84 	bl	8000608 <__aeabi_dmul>
 8007f00:	2200      	movs	r2, #0
 8007f02:	e9cd 0100 	strd	r0, r1, [sp]
 8007f06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	f7f8 f9c3 	bl	8000298 <__aeabi_dsub>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f1a:	f7f8 fc9f 	bl	800085c <__aeabi_ddiv>
 8007f1e:	4632      	mov	r2, r6
 8007f20:	4604      	mov	r4, r0
 8007f22:	460d      	mov	r5, r1
 8007f24:	463b      	mov	r3, r7
 8007f26:	4640      	mov	r0, r8
 8007f28:	4649      	mov	r1, r9
 8007f2a:	f7f8 fb6d 	bl	8000608 <__aeabi_dmul>
 8007f2e:	4632      	mov	r2, r6
 8007f30:	463b      	mov	r3, r7
 8007f32:	f7f8 f9b3 	bl	800029c <__adddf3>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	f7f8 f9ab 	bl	8000298 <__aeabi_dsub>
 8007f42:	4642      	mov	r2, r8
 8007f44:	464b      	mov	r3, r9
 8007f46:	f7f8 f9a7 	bl	8000298 <__aeabi_dsub>
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	493b      	ldr	r1, [pc, #236]	@ (800803c <__ieee754_pow+0xa6c>)
 8007f50:	2000      	movs	r0, #0
 8007f52:	f7f8 f9a1 	bl	8000298 <__aeabi_dsub>
 8007f56:	ec41 0b10 	vmov	d0, r0, r1
 8007f5a:	ee10 3a90 	vmov	r3, s1
 8007f5e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f66:	da30      	bge.n	8007fca <__ieee754_pow+0x9fa>
 8007f68:	4650      	mov	r0, sl
 8007f6a:	f000 f87d 	bl	8008068 <scalbn>
 8007f6e:	ec51 0b10 	vmov	r0, r1, d0
 8007f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f76:	f7ff bbd2 	b.w	800771e <__ieee754_pow+0x14e>
 8007f7a:	4c31      	ldr	r4, [pc, #196]	@ (8008040 <__ieee754_pow+0xa70>)
 8007f7c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d91a      	bls.n	8007fba <__ieee754_pow+0x9ea>
 8007f84:	4b2f      	ldr	r3, [pc, #188]	@ (8008044 <__ieee754_pow+0xa74>)
 8007f86:	440b      	add	r3, r1
 8007f88:	4303      	orrs	r3, r0
 8007f8a:	d009      	beq.n	8007fa0 <__ieee754_pow+0x9d0>
 8007f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f90:	2200      	movs	r2, #0
 8007f92:	2300      	movs	r3, #0
 8007f94:	f7f8 fdaa 	bl	8000aec <__aeabi_dcmplt>
 8007f98:	3800      	subs	r0, #0
 8007f9a:	bf18      	it	ne
 8007f9c:	2001      	movne	r0, #1
 8007f9e:	e42b      	b.n	80077f8 <__ieee754_pow+0x228>
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	f7f8 f978 	bl	8000298 <__aeabi_dsub>
 8007fa8:	4632      	mov	r2, r6
 8007faa:	463b      	mov	r3, r7
 8007fac:	f7f8 fdb2 	bl	8000b14 <__aeabi_dcmpge>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d1eb      	bne.n	8007f8c <__ieee754_pow+0x9bc>
 8007fb4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008054 <__ieee754_pow+0xa84>
 8007fb8:	e6f7      	b.n	8007daa <__ieee754_pow+0x7da>
 8007fba:	469a      	mov	sl, r3
 8007fbc:	4b22      	ldr	r3, [pc, #136]	@ (8008048 <__ieee754_pow+0xa78>)
 8007fbe:	459a      	cmp	sl, r3
 8007fc0:	f63f aef3 	bhi.w	8007daa <__ieee754_pow+0x7da>
 8007fc4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007fc8:	e715      	b.n	8007df6 <__ieee754_pow+0x826>
 8007fca:	ec51 0b10 	vmov	r0, r1, d0
 8007fce:	4619      	mov	r1, r3
 8007fd0:	e7cf      	b.n	8007f72 <__ieee754_pow+0x9a2>
 8007fd2:	491a      	ldr	r1, [pc, #104]	@ (800803c <__ieee754_pow+0xa6c>)
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	f7ff bb18 	b.w	800760a <__ieee754_pow+0x3a>
 8007fda:	2000      	movs	r0, #0
 8007fdc:	2100      	movs	r1, #0
 8007fde:	f7ff bb14 	b.w	800760a <__ieee754_pow+0x3a>
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7ff bb10 	b.w	800760a <__ieee754_pow+0x3a>
 8007fea:	460c      	mov	r4, r1
 8007fec:	f7ff bb5e 	b.w	80076ac <__ieee754_pow+0xdc>
 8007ff0:	2400      	movs	r4, #0
 8007ff2:	f7ff bb49 	b.w	8007688 <__ieee754_pow+0xb8>
 8007ff6:	bf00      	nop
 8007ff8:	00000000 	.word	0x00000000
 8007ffc:	3fe62e43 	.word	0x3fe62e43
 8008000:	fefa39ef 	.word	0xfefa39ef
 8008004:	3fe62e42 	.word	0x3fe62e42
 8008008:	0ca86c39 	.word	0x0ca86c39
 800800c:	be205c61 	.word	0xbe205c61
 8008010:	72bea4d0 	.word	0x72bea4d0
 8008014:	3e663769 	.word	0x3e663769
 8008018:	c5d26bf1 	.word	0xc5d26bf1
 800801c:	3ebbbd41 	.word	0x3ebbbd41
 8008020:	af25de2c 	.word	0xaf25de2c
 8008024:	3f11566a 	.word	0x3f11566a
 8008028:	16bebd93 	.word	0x16bebd93
 800802c:	3f66c16c 	.word	0x3f66c16c
 8008030:	5555553e 	.word	0x5555553e
 8008034:	3fc55555 	.word	0x3fc55555
 8008038:	fff00000 	.word	0xfff00000
 800803c:	3ff00000 	.word	0x3ff00000
 8008040:	4090cbff 	.word	0x4090cbff
 8008044:	3f6f3400 	.word	0x3f6f3400
 8008048:	3fe00000 	.word	0x3fe00000
 800804c:	652b82fe 	.word	0x652b82fe
 8008050:	3c971547 	.word	0x3c971547
 8008054:	4090cc00 	.word	0x4090cc00

08008058 <fabs>:
 8008058:	ec51 0b10 	vmov	r0, r1, d0
 800805c:	4602      	mov	r2, r0
 800805e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008062:	ec43 2b10 	vmov	d0, r2, r3
 8008066:	4770      	bx	lr

08008068 <scalbn>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	ec55 4b10 	vmov	r4, r5, d0
 800806e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008072:	4606      	mov	r6, r0
 8008074:	462b      	mov	r3, r5
 8008076:	b991      	cbnz	r1, 800809e <scalbn+0x36>
 8008078:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800807c:	4323      	orrs	r3, r4
 800807e:	d03d      	beq.n	80080fc <scalbn+0x94>
 8008080:	4b35      	ldr	r3, [pc, #212]	@ (8008158 <scalbn+0xf0>)
 8008082:	4620      	mov	r0, r4
 8008084:	4629      	mov	r1, r5
 8008086:	2200      	movs	r2, #0
 8008088:	f7f8 fabe 	bl	8000608 <__aeabi_dmul>
 800808c:	4b33      	ldr	r3, [pc, #204]	@ (800815c <scalbn+0xf4>)
 800808e:	429e      	cmp	r6, r3
 8008090:	4604      	mov	r4, r0
 8008092:	460d      	mov	r5, r1
 8008094:	da0f      	bge.n	80080b6 <scalbn+0x4e>
 8008096:	a328      	add	r3, pc, #160	@ (adr r3, 8008138 <scalbn+0xd0>)
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	e01e      	b.n	80080dc <scalbn+0x74>
 800809e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80080a2:	4291      	cmp	r1, r2
 80080a4:	d10b      	bne.n	80080be <scalbn+0x56>
 80080a6:	4622      	mov	r2, r4
 80080a8:	4620      	mov	r0, r4
 80080aa:	4629      	mov	r1, r5
 80080ac:	f7f8 f8f6 	bl	800029c <__adddf3>
 80080b0:	4604      	mov	r4, r0
 80080b2:	460d      	mov	r5, r1
 80080b4:	e022      	b.n	80080fc <scalbn+0x94>
 80080b6:	460b      	mov	r3, r1
 80080b8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80080bc:	3936      	subs	r1, #54	@ 0x36
 80080be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80080c2:	4296      	cmp	r6, r2
 80080c4:	dd0d      	ble.n	80080e2 <scalbn+0x7a>
 80080c6:	2d00      	cmp	r5, #0
 80080c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008140 <scalbn+0xd8>)
 80080ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ce:	da02      	bge.n	80080d6 <scalbn+0x6e>
 80080d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008148 <scalbn+0xe0>)
 80080d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008140 <scalbn+0xd8>)
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	f7f8 fa94 	bl	8000608 <__aeabi_dmul>
 80080e0:	e7e6      	b.n	80080b0 <scalbn+0x48>
 80080e2:	1872      	adds	r2, r6, r1
 80080e4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80080e8:	428a      	cmp	r2, r1
 80080ea:	dcec      	bgt.n	80080c6 <scalbn+0x5e>
 80080ec:	2a00      	cmp	r2, #0
 80080ee:	dd08      	ble.n	8008102 <scalbn+0x9a>
 80080f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80080f4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80080f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80080fc:	ec45 4b10 	vmov	d0, r4, r5
 8008100:	bd70      	pop	{r4, r5, r6, pc}
 8008102:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008106:	da08      	bge.n	800811a <scalbn+0xb2>
 8008108:	2d00      	cmp	r5, #0
 800810a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008138 <scalbn+0xd0>)
 800810c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008110:	dac1      	bge.n	8008096 <scalbn+0x2e>
 8008112:	a10f      	add	r1, pc, #60	@ (adr r1, 8008150 <scalbn+0xe8>)
 8008114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008118:	e7bd      	b.n	8008096 <scalbn+0x2e>
 800811a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800811e:	3236      	adds	r2, #54	@ 0x36
 8008120:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008124:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008128:	4620      	mov	r0, r4
 800812a:	4b0d      	ldr	r3, [pc, #52]	@ (8008160 <scalbn+0xf8>)
 800812c:	4629      	mov	r1, r5
 800812e:	2200      	movs	r2, #0
 8008130:	e7d4      	b.n	80080dc <scalbn+0x74>
 8008132:	bf00      	nop
 8008134:	f3af 8000 	nop.w
 8008138:	c2f8f359 	.word	0xc2f8f359
 800813c:	01a56e1f 	.word	0x01a56e1f
 8008140:	8800759c 	.word	0x8800759c
 8008144:	7e37e43c 	.word	0x7e37e43c
 8008148:	8800759c 	.word	0x8800759c
 800814c:	fe37e43c 	.word	0xfe37e43c
 8008150:	c2f8f359 	.word	0xc2f8f359
 8008154:	81a56e1f 	.word	0x81a56e1f
 8008158:	43500000 	.word	0x43500000
 800815c:	ffff3cb0 	.word	0xffff3cb0
 8008160:	3c900000 	.word	0x3c900000

08008164 <with_errno>:
 8008164:	b510      	push	{r4, lr}
 8008166:	ed2d 8b02 	vpush	{d8}
 800816a:	eeb0 8a40 	vmov.f32	s16, s0
 800816e:	eef0 8a60 	vmov.f32	s17, s1
 8008172:	4604      	mov	r4, r0
 8008174:	f7fc ffe6 	bl	8005144 <__errno>
 8008178:	eeb0 0a48 	vmov.f32	s0, s16
 800817c:	eef0 0a68 	vmov.f32	s1, s17
 8008180:	ecbd 8b02 	vpop	{d8}
 8008184:	6004      	str	r4, [r0, #0]
 8008186:	bd10      	pop	{r4, pc}

08008188 <xflow>:
 8008188:	4603      	mov	r3, r0
 800818a:	b507      	push	{r0, r1, r2, lr}
 800818c:	ec51 0b10 	vmov	r0, r1, d0
 8008190:	b183      	cbz	r3, 80081b4 <xflow+0x2c>
 8008192:	4602      	mov	r2, r0
 8008194:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008198:	e9cd 2300 	strd	r2, r3, [sp]
 800819c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081a0:	f7f8 fa32 	bl	8000608 <__aeabi_dmul>
 80081a4:	ec41 0b10 	vmov	d0, r0, r1
 80081a8:	2022      	movs	r0, #34	@ 0x22
 80081aa:	b003      	add	sp, #12
 80081ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80081b0:	f7ff bfd8 	b.w	8008164 <with_errno>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	e7ee      	b.n	8008198 <xflow+0x10>
 80081ba:	0000      	movs	r0, r0
 80081bc:	0000      	movs	r0, r0
	...

080081c0 <__math_uflow>:
 80081c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80081c8 <__math_uflow+0x8>
 80081c4:	f7ff bfe0 	b.w	8008188 <xflow>
 80081c8:	00000000 	.word	0x00000000
 80081cc:	10000000 	.word	0x10000000

080081d0 <__math_oflow>:
 80081d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80081d8 <__math_oflow+0x8>
 80081d4:	f7ff bfd8 	b.w	8008188 <xflow>
 80081d8:	00000000 	.word	0x00000000
 80081dc:	70000000 	.word	0x70000000

080081e0 <__ieee754_log>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	ec51 0b10 	vmov	r0, r1, d0
 80081e8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80081ec:	b087      	sub	sp, #28
 80081ee:	460d      	mov	r5, r1
 80081f0:	da26      	bge.n	8008240 <__ieee754_log+0x60>
 80081f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80081f6:	4303      	orrs	r3, r0
 80081f8:	4602      	mov	r2, r0
 80081fa:	d10a      	bne.n	8008212 <__ieee754_log+0x32>
 80081fc:	49ce      	ldr	r1, [pc, #824]	@ (8008538 <__ieee754_log+0x358>)
 80081fe:	2200      	movs	r2, #0
 8008200:	2300      	movs	r3, #0
 8008202:	2000      	movs	r0, #0
 8008204:	f7f8 fb2a 	bl	800085c <__aeabi_ddiv>
 8008208:	ec41 0b10 	vmov	d0, r0, r1
 800820c:	b007      	add	sp, #28
 800820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008212:	2900      	cmp	r1, #0
 8008214:	da05      	bge.n	8008222 <__ieee754_log+0x42>
 8008216:	460b      	mov	r3, r1
 8008218:	f7f8 f83e 	bl	8000298 <__aeabi_dsub>
 800821c:	2200      	movs	r2, #0
 800821e:	2300      	movs	r3, #0
 8008220:	e7f0      	b.n	8008204 <__ieee754_log+0x24>
 8008222:	4bc6      	ldr	r3, [pc, #792]	@ (800853c <__ieee754_log+0x35c>)
 8008224:	2200      	movs	r2, #0
 8008226:	f7f8 f9ef 	bl	8000608 <__aeabi_dmul>
 800822a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800822e:	460d      	mov	r5, r1
 8008230:	4ac3      	ldr	r2, [pc, #780]	@ (8008540 <__ieee754_log+0x360>)
 8008232:	4295      	cmp	r5, r2
 8008234:	dd06      	ble.n	8008244 <__ieee754_log+0x64>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	f7f8 f82f 	bl	800029c <__adddf3>
 800823e:	e7e3      	b.n	8008208 <__ieee754_log+0x28>
 8008240:	2300      	movs	r3, #0
 8008242:	e7f5      	b.n	8008230 <__ieee754_log+0x50>
 8008244:	152c      	asrs	r4, r5, #20
 8008246:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800824a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800824e:	441c      	add	r4, r3
 8008250:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8008254:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8008258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800825c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8008260:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8008264:	ea42 0105 	orr.w	r1, r2, r5
 8008268:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800826c:	2200      	movs	r2, #0
 800826e:	4bb5      	ldr	r3, [pc, #724]	@ (8008544 <__ieee754_log+0x364>)
 8008270:	f7f8 f812 	bl	8000298 <__aeabi_dsub>
 8008274:	1cab      	adds	r3, r5, #2
 8008276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800827a:	2b02      	cmp	r3, #2
 800827c:	4682      	mov	sl, r0
 800827e:	468b      	mov	fp, r1
 8008280:	f04f 0200 	mov.w	r2, #0
 8008284:	dc53      	bgt.n	800832e <__ieee754_log+0x14e>
 8008286:	2300      	movs	r3, #0
 8008288:	f7f8 fc26 	bl	8000ad8 <__aeabi_dcmpeq>
 800828c:	b1d0      	cbz	r0, 80082c4 <__ieee754_log+0xe4>
 800828e:	2c00      	cmp	r4, #0
 8008290:	f000 8120 	beq.w	80084d4 <__ieee754_log+0x2f4>
 8008294:	4620      	mov	r0, r4
 8008296:	f7f8 f94d 	bl	8000534 <__aeabi_i2d>
 800829a:	a391      	add	r3, pc, #580	@ (adr r3, 80084e0 <__ieee754_log+0x300>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	4606      	mov	r6, r0
 80082a2:	460f      	mov	r7, r1
 80082a4:	f7f8 f9b0 	bl	8000608 <__aeabi_dmul>
 80082a8:	a38f      	add	r3, pc, #572	@ (adr r3, 80084e8 <__ieee754_log+0x308>)
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	4604      	mov	r4, r0
 80082b0:	460d      	mov	r5, r1
 80082b2:	4630      	mov	r0, r6
 80082b4:	4639      	mov	r1, r7
 80082b6:	f7f8 f9a7 	bl	8000608 <__aeabi_dmul>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4620      	mov	r0, r4
 80082c0:	4629      	mov	r1, r5
 80082c2:	e7ba      	b.n	800823a <__ieee754_log+0x5a>
 80082c4:	a38a      	add	r3, pc, #552	@ (adr r3, 80084f0 <__ieee754_log+0x310>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	4650      	mov	r0, sl
 80082cc:	4659      	mov	r1, fp
 80082ce:	f7f8 f99b 	bl	8000608 <__aeabi_dmul>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	2000      	movs	r0, #0
 80082d8:	499b      	ldr	r1, [pc, #620]	@ (8008548 <__ieee754_log+0x368>)
 80082da:	f7f7 ffdd 	bl	8000298 <__aeabi_dsub>
 80082de:	4652      	mov	r2, sl
 80082e0:	4606      	mov	r6, r0
 80082e2:	460f      	mov	r7, r1
 80082e4:	465b      	mov	r3, fp
 80082e6:	4650      	mov	r0, sl
 80082e8:	4659      	mov	r1, fp
 80082ea:	f7f8 f98d 	bl	8000608 <__aeabi_dmul>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4630      	mov	r0, r6
 80082f4:	4639      	mov	r1, r7
 80082f6:	f7f8 f987 	bl	8000608 <__aeabi_dmul>
 80082fa:	4606      	mov	r6, r0
 80082fc:	460f      	mov	r7, r1
 80082fe:	b914      	cbnz	r4, 8008306 <__ieee754_log+0x126>
 8008300:	4632      	mov	r2, r6
 8008302:	463b      	mov	r3, r7
 8008304:	e0a0      	b.n	8008448 <__ieee754_log+0x268>
 8008306:	4620      	mov	r0, r4
 8008308:	f7f8 f914 	bl	8000534 <__aeabi_i2d>
 800830c:	a374      	add	r3, pc, #464	@ (adr r3, 80084e0 <__ieee754_log+0x300>)
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	4680      	mov	r8, r0
 8008314:	4689      	mov	r9, r1
 8008316:	f7f8 f977 	bl	8000608 <__aeabi_dmul>
 800831a:	a373      	add	r3, pc, #460	@ (adr r3, 80084e8 <__ieee754_log+0x308>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	4604      	mov	r4, r0
 8008322:	460d      	mov	r5, r1
 8008324:	4640      	mov	r0, r8
 8008326:	4649      	mov	r1, r9
 8008328:	f7f8 f96e 	bl	8000608 <__aeabi_dmul>
 800832c:	e0a5      	b.n	800847a <__ieee754_log+0x29a>
 800832e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008332:	f7f7 ffb3 	bl	800029c <__adddf3>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	4650      	mov	r0, sl
 800833c:	4659      	mov	r1, fp
 800833e:	f7f8 fa8d 	bl	800085c <__aeabi_ddiv>
 8008342:	e9cd 0100 	strd	r0, r1, [sp]
 8008346:	4620      	mov	r0, r4
 8008348:	f7f8 f8f4 	bl	8000534 <__aeabi_i2d>
 800834c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008354:	4610      	mov	r0, r2
 8008356:	4619      	mov	r1, r3
 8008358:	f7f8 f956 	bl	8000608 <__aeabi_dmul>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008364:	f7f8 f950 	bl	8000608 <__aeabi_dmul>
 8008368:	a363      	add	r3, pc, #396	@ (adr r3, 80084f8 <__ieee754_log+0x318>)
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	4680      	mov	r8, r0
 8008370:	4689      	mov	r9, r1
 8008372:	f7f8 f949 	bl	8000608 <__aeabi_dmul>
 8008376:	a362      	add	r3, pc, #392	@ (adr r3, 8008500 <__ieee754_log+0x320>)
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f7f7 ff8e 	bl	800029c <__adddf3>
 8008380:	4642      	mov	r2, r8
 8008382:	464b      	mov	r3, r9
 8008384:	f7f8 f940 	bl	8000608 <__aeabi_dmul>
 8008388:	a35f      	add	r3, pc, #380	@ (adr r3, 8008508 <__ieee754_log+0x328>)
 800838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838e:	f7f7 ff85 	bl	800029c <__adddf3>
 8008392:	4642      	mov	r2, r8
 8008394:	464b      	mov	r3, r9
 8008396:	f7f8 f937 	bl	8000608 <__aeabi_dmul>
 800839a:	a35d      	add	r3, pc, #372	@ (adr r3, 8008510 <__ieee754_log+0x330>)
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f7f7 ff7c 	bl	800029c <__adddf3>
 80083a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083a8:	f7f8 f92e 	bl	8000608 <__aeabi_dmul>
 80083ac:	a35a      	add	r3, pc, #360	@ (adr r3, 8008518 <__ieee754_log+0x338>)
 80083ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083b6:	4640      	mov	r0, r8
 80083b8:	4649      	mov	r1, r9
 80083ba:	f7f8 f925 	bl	8000608 <__aeabi_dmul>
 80083be:	a358      	add	r3, pc, #352	@ (adr r3, 8008520 <__ieee754_log+0x340>)
 80083c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c4:	f7f7 ff6a 	bl	800029c <__adddf3>
 80083c8:	4642      	mov	r2, r8
 80083ca:	464b      	mov	r3, r9
 80083cc:	f7f8 f91c 	bl	8000608 <__aeabi_dmul>
 80083d0:	a355      	add	r3, pc, #340	@ (adr r3, 8008528 <__ieee754_log+0x348>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	f7f7 ff61 	bl	800029c <__adddf3>
 80083da:	4642      	mov	r2, r8
 80083dc:	464b      	mov	r3, r9
 80083de:	f7f8 f913 	bl	8000608 <__aeabi_dmul>
 80083e2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80083ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083f2:	f7f7 ff53 	bl	800029c <__adddf3>
 80083f6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80083fa:	3551      	adds	r5, #81	@ 0x51
 80083fc:	4335      	orrs	r5, r6
 80083fe:	2d00      	cmp	r5, #0
 8008400:	4680      	mov	r8, r0
 8008402:	4689      	mov	r9, r1
 8008404:	dd48      	ble.n	8008498 <__ieee754_log+0x2b8>
 8008406:	4b50      	ldr	r3, [pc, #320]	@ (8008548 <__ieee754_log+0x368>)
 8008408:	2200      	movs	r2, #0
 800840a:	4650      	mov	r0, sl
 800840c:	4659      	mov	r1, fp
 800840e:	f7f8 f8fb 	bl	8000608 <__aeabi_dmul>
 8008412:	4652      	mov	r2, sl
 8008414:	465b      	mov	r3, fp
 8008416:	f7f8 f8f7 	bl	8000608 <__aeabi_dmul>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4606      	mov	r6, r0
 8008420:	460f      	mov	r7, r1
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f7 ff39 	bl	800029c <__adddf3>
 800842a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800842e:	f7f8 f8eb 	bl	8000608 <__aeabi_dmul>
 8008432:	4680      	mov	r8, r0
 8008434:	4689      	mov	r9, r1
 8008436:	b964      	cbnz	r4, 8008452 <__ieee754_log+0x272>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4630      	mov	r0, r6
 800843e:	4639      	mov	r1, r7
 8008440:	f7f7 ff2a 	bl	8000298 <__aeabi_dsub>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4650      	mov	r0, sl
 800844a:	4659      	mov	r1, fp
 800844c:	f7f7 ff24 	bl	8000298 <__aeabi_dsub>
 8008450:	e6da      	b.n	8008208 <__ieee754_log+0x28>
 8008452:	a323      	add	r3, pc, #140	@ (adr r3, 80084e0 <__ieee754_log+0x300>)
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800845c:	f7f8 f8d4 	bl	8000608 <__aeabi_dmul>
 8008460:	a321      	add	r3, pc, #132	@ (adr r3, 80084e8 <__ieee754_log+0x308>)
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	4604      	mov	r4, r0
 8008468:	460d      	mov	r5, r1
 800846a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800846e:	f7f8 f8cb 	bl	8000608 <__aeabi_dmul>
 8008472:	4642      	mov	r2, r8
 8008474:	464b      	mov	r3, r9
 8008476:	f7f7 ff11 	bl	800029c <__adddf3>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4630      	mov	r0, r6
 8008480:	4639      	mov	r1, r7
 8008482:	f7f7 ff09 	bl	8000298 <__aeabi_dsub>
 8008486:	4652      	mov	r2, sl
 8008488:	465b      	mov	r3, fp
 800848a:	f7f7 ff05 	bl	8000298 <__aeabi_dsub>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4620      	mov	r0, r4
 8008494:	4629      	mov	r1, r5
 8008496:	e7d9      	b.n	800844c <__ieee754_log+0x26c>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	4650      	mov	r0, sl
 800849e:	4659      	mov	r1, fp
 80084a0:	f7f7 fefa 	bl	8000298 <__aeabi_dsub>
 80084a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084a8:	f7f8 f8ae 	bl	8000608 <__aeabi_dmul>
 80084ac:	4606      	mov	r6, r0
 80084ae:	460f      	mov	r7, r1
 80084b0:	2c00      	cmp	r4, #0
 80084b2:	f43f af25 	beq.w	8008300 <__ieee754_log+0x120>
 80084b6:	a30a      	add	r3, pc, #40	@ (adr r3, 80084e0 <__ieee754_log+0x300>)
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084c0:	f7f8 f8a2 	bl	8000608 <__aeabi_dmul>
 80084c4:	a308      	add	r3, pc, #32	@ (adr r3, 80084e8 <__ieee754_log+0x308>)
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	4604      	mov	r4, r0
 80084cc:	460d      	mov	r5, r1
 80084ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084d2:	e729      	b.n	8008328 <__ieee754_log+0x148>
 80084d4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8008530 <__ieee754_log+0x350>
 80084d8:	e698      	b.n	800820c <__ieee754_log+0x2c>
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w
 80084e0:	fee00000 	.word	0xfee00000
 80084e4:	3fe62e42 	.word	0x3fe62e42
 80084e8:	35793c76 	.word	0x35793c76
 80084ec:	3dea39ef 	.word	0x3dea39ef
 80084f0:	55555555 	.word	0x55555555
 80084f4:	3fd55555 	.word	0x3fd55555
 80084f8:	df3e5244 	.word	0xdf3e5244
 80084fc:	3fc2f112 	.word	0x3fc2f112
 8008500:	96cb03de 	.word	0x96cb03de
 8008504:	3fc74664 	.word	0x3fc74664
 8008508:	94229359 	.word	0x94229359
 800850c:	3fd24924 	.word	0x3fd24924
 8008510:	55555593 	.word	0x55555593
 8008514:	3fe55555 	.word	0x3fe55555
 8008518:	d078c69f 	.word	0xd078c69f
 800851c:	3fc39a09 	.word	0x3fc39a09
 8008520:	1d8e78af 	.word	0x1d8e78af
 8008524:	3fcc71c5 	.word	0x3fcc71c5
 8008528:	9997fa04 	.word	0x9997fa04
 800852c:	3fd99999 	.word	0x3fd99999
	...
 8008538:	c3500000 	.word	0xc3500000
 800853c:	43500000 	.word	0x43500000
 8008540:	7fefffff 	.word	0x7fefffff
 8008544:	3ff00000 	.word	0x3ff00000
 8008548:	3fe00000 	.word	0x3fe00000

0800854c <_init>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr

08008558 <_fini>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr
