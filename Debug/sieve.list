
sieve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004088  08004088  00005088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800419c  0800419c  00006078  2**0
                  CONTENTS
  4 .ARM          00000008  0800419c  0800419c  0000519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041a4  080041a4  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a4  080041a4  000051a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041a8  080041a8  000051a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080041ac  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000078  08004224  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004224  00006230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cd8  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001717  00000000  00000000  0000dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0000f498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000567  00000000  00000000  0000fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001677e  00000000  00000000  00010127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fc2  00000000  00000000  000268a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087eb0  00000000  00000000  0002f867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  000b775c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b9e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004070 	.word	0x08004070

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004070 	.word	0x08004070

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <convertTime>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to convert milliseconds to a human-readable time format
void convertTime(int milliseconds) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    if (milliseconds < 0) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	da03      	bge.n	8000eae <convertTime+0x16>
        printf("Invalid time value.\n");
 8000ea6:	4829      	ldr	r0, [pc, #164]	@ (8000f4c <convertTime+0xb4>)
 8000ea8:	f002 f9d2 	bl	8003250 <puts>
        return;
 8000eac:	e04a      	b.n	8000f44 <convertTime+0xac>
    }

    // Convert milliseconds to seconds
    int seconds = milliseconds / 1000;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <convertTime+0xb8>)
 8000eb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb6:	1192      	asrs	r2, r2, #6
 8000eb8:	17db      	asrs	r3, r3, #31
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]

    // Convert seconds to hours, minutes, and remaining seconds
    int hours = seconds / 3600;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	4a24      	ldr	r2, [pc, #144]	@ (8000f54 <convertTime+0xbc>)
 8000ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec6:	441a      	add	r2, r3
 8000ec8:	12d2      	asrs	r2, r2, #11
 8000eca:	17db      	asrs	r3, r3, #31
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	613b      	str	r3, [r7, #16]
    int minutes = (seconds % 3600) / 60;
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	4b20      	ldr	r3, [pc, #128]	@ (8000f54 <convertTime+0xbc>)
 8000ed4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ed8:	4413      	add	r3, r2
 8000eda:	12d9      	asrs	r1, r3, #11
 8000edc:	17d3      	asrs	r3, r2, #31
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8000ee4:	fb01 f303 	mul.w	r3, r1, r3
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	4a1b      	ldr	r2, [pc, #108]	@ (8000f58 <convertTime+0xc0>)
 8000eec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef0:	441a      	add	r2, r3
 8000ef2:	1152      	asrs	r2, r2, #5
 8000ef4:	17db      	asrs	r3, r3, #31
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	60fb      	str	r3, [r7, #12]
    seconds = seconds % 60;
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <convertTime+0xc0>)
 8000efe:	fb83 1302 	smull	r1, r3, r3, r2
 8000f02:	4413      	add	r3, r2
 8000f04:	1159      	asrs	r1, r3, #5
 8000f06:	17d3      	asrs	r3, r2, #31
 8000f08:	1ac9      	subs	r1, r1, r3
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	1a5b      	subs	r3, r3, r1
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]

    // Print the result in a formatted manner
    if (hours > 0) {
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	dd06      	ble.n	8000f2a <convertTime+0x92>
        printf("%d hours, %d minutes, and %d seconds\n", hours, minutes, seconds);
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	6939      	ldr	r1, [r7, #16]
 8000f22:	480e      	ldr	r0, [pc, #56]	@ (8000f5c <convertTime+0xc4>)
 8000f24:	f002 f92c 	bl	8003180 <iprintf>
 8000f28:	e00c      	b.n	8000f44 <convertTime+0xac>
    } else if (minutes > 0) {
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	dd05      	ble.n	8000f3c <convertTime+0xa4>
        printf("%d minutes and %d seconds\n", minutes, seconds);
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	480a      	ldr	r0, [pc, #40]	@ (8000f60 <convertTime+0xc8>)
 8000f36:	f002 f923 	bl	8003180 <iprintf>
 8000f3a:	e003      	b.n	8000f44 <convertTime+0xac>
    } else {
        printf("%d seconds\n", seconds);
 8000f3c:	6979      	ldr	r1, [r7, #20]
 8000f3e:	4809      	ldr	r0, [pc, #36]	@ (8000f64 <convertTime+0xcc>)
 8000f40:	f002 f91e 	bl	8003180 <iprintf>
    }
}
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	08004088 	.word	0x08004088
 8000f50:	10624dd3 	.word	0x10624dd3
 8000f54:	91a2b3c5 	.word	0x91a2b3c5
 8000f58:	88888889 	.word	0x88888889
 8000f5c:	0800409c 	.word	0x0800409c
 8000f60:	080040c4 	.word	0x080040c4
 8000f64:	080040e0 	.word	0x080040e0

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f000 fbed 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f819 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f000 f8ab 	bl	80010d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f7a:	f000 f87f 	bl	800107c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int millis1 = HAL_GetTick();
 8000f7e:	f000 fc4b 	bl	8001818 <HAL_GetTick>
 8000f82:	4603      	mov	r3, r0
 8000f84:	60fb      	str	r3, [r7, #12]
  π(10000);
 8000f86:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000f8a:	f000 fa4f 	bl	800142c <π>
  int millis2 = HAL_GetTick();
 8000f8e:	f000 fc43 	bl	8001818 <HAL_GetTick>
 8000f92:	4603      	mov	r3, r0
 8000f94:	60bb      	str	r3, [r7, #8]
  int timeInMillis=millis2 - millis1;
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	607b      	str	r3, [r7, #4]
  convertTime(timeInMillis);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff7a 	bl	8000e98 <convertTime>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <main+0x3c>

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	@ 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	@ 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fa2a 	bl	8003410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	4a27      	ldr	r2, [pc, #156]	@ (8001074 <SystemClock_Config+0xcc>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fdc:	4b25      	ldr	r3, [pc, #148]	@ (8001074 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a21      	ldr	r2, [pc, #132]	@ (8001078 <SystemClock_Config+0xd0>)
 8000ff2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	2310      	movs	r3, #16
 800100e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001010:	2302      	movs	r3, #2
 8001012:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001014:	2300      	movs	r3, #0
 8001016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001018:	2310      	movs	r3, #16
 800101a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800101c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001020:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001022:	2304      	movs	r3, #4
 8001024:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001026:	2304      	movs	r3, #4
 8001028:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fe82 	bl	8001d38 <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800103a:	f000 f8c9 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2102      	movs	r1, #2
 800105a:	4618      	mov	r0, r3
 800105c:	f001 f8e4 	bl	8002228 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001066:	f000 f8b3 	bl	80011d0 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3750      	adds	r7, #80	@ 0x50
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <MX_USART2_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010b4:	f001 fad8 	bl	8002668 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010be:	f000 f887 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000094 	.word	0x20000094
 80010cc:	40004400 	.word	0x40004400

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a2c      	ldr	r2, [pc, #176]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a25      	ldr	r2, [pc, #148]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a1e      	ldr	r2, [pc, #120]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <MX_GPIO_Init+0xd0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2120      	movs	r1, #32
 800115a:	4812      	ldr	r0, [pc, #72]	@ (80011a4 <MX_GPIO_Init+0xd4>)
 800115c:	f000 fdd2 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001160:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001166:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <MX_GPIO_Init+0xd8>)
 8001178:	f000 fc40 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800117c:	2320      	movs	r3, #32
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <MX_GPIO_Init+0xd4>)
 8001194:	f000 fc32 	bl	80019fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	@ 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020800 	.word	0x40020800

080011ac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80011b4:	1d39      	adds	r1, r7, #4
 80011b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011ba:	2201      	movs	r2, #1
 80011bc:	4803      	ldr	r0, [pc, #12]	@ (80011cc <__io_putchar+0x20>)
 80011be:	f001 faa3 	bl	8002708 <HAL_UART_Transmit>

  return ch;
 80011c2:	687b      	ldr	r3, [r7, #4]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000094 	.word	0x20000094

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <Error_Handler+0x8>

080011dc <simpleSieve>:
			printf("%d \n\r", i);
		}
	}
}

void simpleSieve(int limit, bool prime[]) {
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
    for (int p = 2; p * p <= limit; p++) {
 80011e6:	2302      	movs	r3, #2
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	e01a      	b.n	8001222 <simpleSieve+0x46>
        if (prime[p]) {
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d011      	beq.n	800121c <simpleSieve+0x40>
            for (int i = p * p; i <= limit; i += p)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	fb03 f303 	mul.w	r3, r3, r3
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	e008      	b.n	8001214 <simpleSieve+0x38>
                prime[i] = false;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4413      	add	r3, r2
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
            for (int i = p * p; i <= limit; i += p)
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	ddf2      	ble.n	8001202 <simpleSieve+0x26>
    for (int p = 2; p * p <= limit; p++) {
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	fb03 f303 	mul.w	r3, r3, r3
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	dade      	bge.n	80011ec <simpleSieve+0x10>
        }
    }
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <segmentedSieve>:

// Segmented Sieve Algorithm
void segmentedSieve(int n) {
 800123c:	b5b0      	push	{r4, r5, r7, lr}
 800123e:	b090      	sub	sp, #64	@ 0x40
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    int segmentSize = 100000; // Segment size
 8001244:	4b76      	ldr	r3, [pc, #472]	@ (8001420 <segmentedSieve+0x1e4>)
 8001246:	61bb      	str	r3, [r7, #24]
    int sqrtN = (int)sqrt(n);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff f96b 	bl	8000524 <__aeabi_i2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	ec43 2b10 	vmov	d0, r2, r3
 8001256:	f002 fdb1 	bl	8003dbc <sqrt>
 800125a:	ec53 2b10 	vmov	r2, r3, d0
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fc79 	bl	8000b58 <__aeabi_d2iz>
 8001266:	4603      	mov	r3, r0
 8001268:	617b      	str	r3, [r7, #20]

    // Array to store primes up to sqrtN
    bool* prime = malloc((sqrtN + 1) * sizeof(bool));
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fe06 	bl	8002e80 <malloc>
 8001274:	4603      	mov	r3, r0
 8001276:	613b      	str	r3, [r7, #16]
    for (int i = 0; i <= sqrtN; i++) prime[i] = true;
 8001278:	2300      	movs	r3, #0
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800127c:	e007      	b.n	800128e <segmentedSieve+0x52>
 800127e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4413      	add	r3, r2
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800128a:	3301      	adds	r3, #1
 800128c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800128e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	429a      	cmp	r2, r3
 8001294:	ddf3      	ble.n	800127e <segmentedSieve+0x42>
    simpleSieve(sqrtN, prime);
 8001296:	6939      	ldr	r1, [r7, #16]
 8001298:	6978      	ldr	r0, [r7, #20]
 800129a:	f7ff ff9f 	bl	80011dc <simpleSieve>

    // Array to mark non-primes in the current segment
    bool* isPrime = malloc(segmentSize * sizeof(bool));
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fded 	bl	8002e80 <malloc>
 80012a6:	4603      	mov	r3, r0
 80012a8:	60fb      	str	r3, [r7, #12]

    // Count of primes
    int count = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Process each segment
    for (int low = 1; low <= n; low += segmentSize) {
 80012ae:	2301      	movs	r3, #1
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80012b2:	e0a0      	b.n	80013f6 <segmentedSieve+0x1ba>
        int high = low + segmentSize;
 80012b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4413      	add	r3, r2
 80012ba:	633b      	str	r3, [r7, #48]	@ 0x30
        if (high > n + 1) high = n + 1;  // Adjust high for the last segment
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3301      	adds	r3, #1
 80012c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dd02      	ble.n	80012cc <segmentedSieve+0x90>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3301      	adds	r3, #1
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30

        // Initialize the segment as all primes
        for (int i = 0; i < segmentSize && low + i <= n; i++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012d0:	e007      	b.n	80012e2 <segmentedSieve+0xa6>
            isPrime[i] = true;
 80012d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < segmentSize && low + i <= n; i++) {
 80012dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012de:	3301      	adds	r3, #1
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	da05      	bge.n	80012f6 <segmentedSieve+0xba>
 80012ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ee:	4413      	add	r3, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	daed      	bge.n	80012d2 <segmentedSieve+0x96>
        }

        // Mark non-primes in the current segment
        for (int i = 2; i <= sqrtN; i++) {
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012fa:	e04a      	b.n	8001392 <segmentedSieve+0x156>
            if (prime[i]) {
 80012fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d041      	beq.n	800138c <segmentedSieve+0x150>
                // Find the minimum number in the current segment that is a multiple of i
                int loLim = fmax(i * i, (low + i - 1) / i * i);
 8001308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800130a:	fb03 f303 	mul.w	r3, r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f908 	bl	8000524 <__aeabi_i2d>
 8001314:	4604      	mov	r4, r0
 8001316:	460d      	mov	r5, r1
 8001318:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800131a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800131c:	4413      	add	r3, r2
 800131e:	1e5a      	subs	r2, r3, #1
 8001320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001322:	fb92 f3f3 	sdiv	r3, r2, r3
 8001326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f8f9 	bl	8000524 <__aeabi_i2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	ec43 2b11 	vmov	d1, r2, r3
 800133a:	ec45 4b10 	vmov	d0, r4, r5
 800133e:	f002 fd69 	bl	8003e14 <fmax>
 8001342:	ec53 2b10 	vmov	r2, r3, d0
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fc05 	bl	8000b58 <__aeabi_d2iz>
 800134e:	4603      	mov	r3, r0
 8001350:	60bb      	str	r3, [r7, #8]
                if (loLim >= high) continue;
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001356:	429a      	cmp	r2, r3
 8001358:	da17      	bge.n	800138a <segmentedSieve+0x14e>
                for (int j = loLim; j < high; j += i) {
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
 800135e:	e00f      	b.n	8001380 <segmentedSieve+0x144>
                    if (j >= low) {
 8001360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001364:	429a      	cmp	r2, r3
 8001366:	db07      	blt.n	8001378 <segmentedSieve+0x13c>
                        isPrime[j - low] = false;
 8001368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800136a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
                for (int j = loLim; j < high; j += i) {
 8001378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800137c:	4413      	add	r3, r2
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001384:	429a      	cmp	r2, r3
 8001386:	dbeb      	blt.n	8001360 <segmentedSieve+0x124>
 8001388:	e000      	b.n	800138c <segmentedSieve+0x150>
                if (loLim >= high) continue;
 800138a:	bf00      	nop
        for (int i = 2; i <= sqrtN; i++) {
 800138c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800138e:	3301      	adds	r3, #1
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	429a      	cmp	r2, r3
 8001398:	ddb0      	ble.n	80012fc <segmentedSieve+0xc0>
                }
            }
        }

        // Count primes in the current segment
        int segmentCount = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
        for (int i = 0; i < segmentSize && low + i <= n; i++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e013      	b.n	80013cc <segmentedSieve+0x190>
            if (isPrime[i] && (low + i) > 1) {  // Avoid counting 1 which is not a prime
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00a      	beq.n	80013c6 <segmentedSieve+0x18a>
 80013b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	dd05      	ble.n	80013c6 <segmentedSieve+0x18a>
                segmentCount++;
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	3301      	adds	r3, #1
 80013be:	623b      	str	r3, [r7, #32]
                count++;
 80013c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013c2:	3301      	adds	r3, #1
 80013c4:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (int i = 0; i < segmentSize && low + i <= n; i++) {
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	da05      	bge.n	80013e0 <segmentedSieve+0x1a4>
 80013d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	4413      	add	r3, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dae1      	bge.n	80013a4 <segmentedSieve+0x168>
            }
        }

        // Print the segment range and total primes so far
        printf("%d,%d\n\r", high - 1, count);
 80013e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013e6:	4619      	mov	r1, r3
 80013e8:	480e      	ldr	r0, [pc, #56]	@ (8001424 <segmentedSieve+0x1e8>)
 80013ea:	f001 fec9 	bl	8003180 <iprintf>
    for (int low = 1; low <= n; low += segmentSize) {
 80013ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	4413      	add	r3, r2
 80013f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80013f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f77f af5a 	ble.w	80012b4 <segmentedSieve+0x78>
    }

    free(prime);
 8001400:	6938      	ldr	r0, [r7, #16]
 8001402:	f001 fd45 	bl	8002e90 <free>
    free(isPrime);
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f001 fd42 	bl	8002e90 <free>
    printf("Total number of primes less than %d: %d\n\r", n, count);
 800140c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <segmentedSieve+0x1ec>)
 8001412:	f001 feb5 	bl	8003180 <iprintf>
}
 8001416:	bf00      	nop
 8001418:	3740      	adds	r7, #64	@ 0x40
 800141a:	46bd      	mov	sp, r7
 800141c:	bdb0      	pop	{r4, r5, r7, pc}
 800141e:	bf00      	nop
 8001420:	000186a0 	.word	0x000186a0
 8001424:	0800410c 	.word	0x0800410c
 8001428:	08004114 	.word	0x08004114

0800142c <π>:



void π(int n) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

    printf("\n\r - up to %d\n\r", n);
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <π+0x20>)
 8001438:	f001 fea2 	bl	8003180 <iprintf>
    segmentedSieve(n);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fefd 	bl	800123c <segmentedSieve>
    // return 0;
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	08004140 	.word	0x08004140

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	4a0f      	ldr	r2, [pc, #60]	@ (800149c <HAL_MspInit+0x4c>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001464:	6453      	str	r3, [r2, #68]	@ 0x44
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	4a08      	ldr	r2, [pc, #32]	@ (800149c <HAL_MspInit+0x4c>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	@ 0x40
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800148e:	2007      	movs	r0, #7
 8001490:	f000 fa80 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a19      	ldr	r2, [pc, #100]	@ (8001524 <HAL_UART_MspInit+0x84>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12b      	bne.n	800151a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a10      	ldr	r2, [pc, #64]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <HAL_UART_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014fa:	230c      	movs	r3, #12
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150a:	2307      	movs	r3, #7
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <HAL_UART_MspInit+0x8c>)
 8001516:	f000 fa71 	bl	80019fc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	@ 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40004400 	.word	0x40004400
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <NMI_Handler+0x4>

08001538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <MemManage_Handler+0x4>

08001548 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <UsageFault_Handler+0x4>

08001558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001586:	f000 f933 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}

0800158e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e00a      	b.n	80015b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015a0:	f3af 8000 	nop.w
 80015a4:	4601      	mov	r1, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	60ba      	str	r2, [r7, #8]
 80015ac:	b2ca      	uxtb	r2, r1
 80015ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dbf0      	blt.n	80015a0 <_read+0x12>
  }

  return len;
 80015be:	687b      	ldr	r3, [r7, #4]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e009      	b.n	80015ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	60ba      	str	r2, [r7, #8]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fde2 	bl	80011ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	dbf1      	blt.n	80015da <_write+0x12>
  }
  return len;
 80015f6:	687b      	ldr	r3, [r7, #4]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_close>:

int _close(int file)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001628:	605a      	str	r2, [r3, #4]
  return 0;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_isatty>:

int _isatty(int file)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001640:	2301      	movs	r3, #1
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001698:	f001 ff18 	bl	80034cc <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	e009      	b.n	80016bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20020000 	.word	0x20020000
 80016c8:	00000400 	.word	0x00000400
 80016cc:	200000dc 	.word	0x200000dc
 80016d0:	20000230 	.word	0x20000230

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001730 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016fc:	f7ff ffea 	bl	80016d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001702:	490d      	ldr	r1, [pc, #52]	@ (8001738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001718:	4c0a      	ldr	r4, [pc, #40]	@ (8001744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001726:	f001 fed7 	bl	80034d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172a:	f7ff fc1d 	bl	8000f68 <main>
  bx  lr    
 800172e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001730:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800173c:	080041ac 	.word	0x080041ac
  ldr r2, =_sbss
 8001740:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001744:	20000230 	.word	0x20000230

08001748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC_IRQHandler>
	...

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <HAL_Init+0x40>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800175a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800175c:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <HAL_Init+0x40>)
 8001762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	@ (800178c <HAL_Init+0x40>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 f90d 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fe66 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023c00 	.word	0x40023c00

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f917 	bl	80019e2 <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f8ed 	bl	80019aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	@ (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	200000e0 	.word	0x200000e0

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	200000e0 	.word	0x200000e0

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001858:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800185c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	@ (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	@ (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	@ 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
         );
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	@ 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001960:	d301      	bcc.n	8001966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001962:	2301      	movs	r3, #1
 8001964:	e00f      	b.n	8001986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001966:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <SysTick_Config+0x40>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196e:	210f      	movs	r1, #15
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f7ff ff8e 	bl	8001894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <SysTick_Config+0x40>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <SysTick_Config+0x40>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff47 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019bc:	f7ff ff5c 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f7ff ff8e 	bl	80018e8 <NVIC_EncodePriority>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff5d 	bl	8001894 <__NVIC_SetPriority>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffb0 	bl	8001950 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	e159      	b.n	8001ccc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	f040 8148 	bne.w	8001cc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d005      	beq.n	8001a4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d130      	bne.n	8001ab0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 0201 	and.w	r2, r3, #1
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d017      	beq.n	8001aec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d123      	bne.n	8001b40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	08da      	lsrs	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3208      	adds	r2, #8
 8001b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	08da      	lsrs	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	69b9      	ldr	r1, [r7, #24]
 8001b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0203 	and.w	r2, r3, #3
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80a2 	beq.w	8001cc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b57      	ldr	r3, [pc, #348]	@ (8001ce4 <HAL_GPIO_Init+0x2e8>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a56      	ldr	r2, [pc, #344]	@ (8001ce4 <HAL_GPIO_Init+0x2e8>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b54      	ldr	r3, [pc, #336]	@ (8001ce4 <HAL_GPIO_Init+0x2e8>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9e:	4a52      	ldr	r2, [pc, #328]	@ (8001ce8 <HAL_GPIO_Init+0x2ec>)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a49      	ldr	r2, [pc, #292]	@ (8001cec <HAL_GPIO_Init+0x2f0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d019      	beq.n	8001bfe <HAL_GPIO_Init+0x202>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a48      	ldr	r2, [pc, #288]	@ (8001cf0 <HAL_GPIO_Init+0x2f4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0x1fe>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a47      	ldr	r2, [pc, #284]	@ (8001cf4 <HAL_GPIO_Init+0x2f8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_GPIO_Init+0x1fa>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a46      	ldr	r2, [pc, #280]	@ (8001cf8 <HAL_GPIO_Init+0x2fc>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0x1f6>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a45      	ldr	r2, [pc, #276]	@ (8001cfc <HAL_GPIO_Init+0x300>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_GPIO_Init+0x1f2>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e008      	b.n	8001c00 <HAL_GPIO_Init+0x204>
 8001bee:	2307      	movs	r3, #7
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x204>
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e004      	b.n	8001c00 <HAL_GPIO_Init+0x204>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e002      	b.n	8001c00 <HAL_GPIO_Init+0x204>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_GPIO_Init+0x204>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	f002 0203 	and.w	r2, r2, #3
 8001c06:	0092      	lsls	r2, r2, #2
 8001c08:	4093      	lsls	r3, r2
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c10:	4935      	ldr	r1, [pc, #212]	@ (8001ce8 <HAL_GPIO_Init+0x2ec>)
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1e:	4b38      	ldr	r3, [pc, #224]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c42:	4a2f      	ldr	r2, [pc, #188]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c48:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c6c:	4a24      	ldr	r2, [pc, #144]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c72:	4b23      	ldr	r3, [pc, #140]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c96:	4a1a      	ldr	r2, [pc, #104]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	2b0f      	cmp	r3, #15
 8001cd0:	f67f aea2 	bls.w	8001a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3724      	adds	r7, #36	@ 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40013800 	.word	0x40013800
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	619a      	str	r2, [r3, #24]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e267      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d075      	beq.n	8001e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d56:	4b88      	ldr	r3, [pc, #544]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d00c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d62:	4b85      	ldr	r3, [pc, #532]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d112      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6e:	4b82      	ldr	r3, [pc, #520]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d7a:	d10b      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d05b      	beq.n	8001e40 <HAL_RCC_OscConfig+0x108>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d157      	bne.n	8001e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e242      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d9c:	d106      	bne.n	8001dac <HAL_RCC_OscConfig+0x74>
 8001d9e:	4b76      	ldr	r3, [pc, #472]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a75      	ldr	r2, [pc, #468]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e01d      	b.n	8001de8 <HAL_RCC_OscConfig+0xb0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x98>
 8001db6:	4b70      	ldr	r3, [pc, #448]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a6f      	ldr	r2, [pc, #444]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a6c      	ldr	r2, [pc, #432]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0xb0>
 8001dd0:	4b69      	ldr	r3, [pc, #420]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a68      	ldr	r2, [pc, #416]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b66      	ldr	r3, [pc, #408]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a65      	ldr	r2, [pc, #404]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fd12 	bl	8001818 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fd0e 	bl	8001818 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	@ 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e207      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0xc0>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fcfe 	bl	8001818 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fcfa 	bl	8001818 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	@ 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e1f3      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	4b51      	ldr	r3, [pc, #324]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0xe8>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d063      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00b      	beq.n	8001e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5a:	4b47      	ldr	r3, [pc, #284]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d11c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e66:	4b44      	ldr	r3, [pc, #272]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d116      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d005      	beq.n	8001e8a <HAL_RCC_OscConfig+0x152>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e1c7      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4937      	ldr	r1, [pc, #220]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	e03a      	b.n	8001f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d020      	beq.n	8001eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea8:	4b34      	ldr	r3, [pc, #208]	@ (8001f7c <HAL_RCC_OscConfig+0x244>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff fcb3 	bl	8001818 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fcaf 	bl	8001818 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1a8      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b28      	ldr	r3, [pc, #160]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4925      	ldr	r1, [pc, #148]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
 8001ee8:	e015      	b.n	8001f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eea:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <HAL_RCC_OscConfig+0x244>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fc92 	bl	8001818 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fc8e 	bl	8001818 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e187      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d036      	beq.n	8001f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d016      	beq.n	8001f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <HAL_RCC_OscConfig+0x248>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f30:	f7ff fc72 	bl	8001818 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f38:	f7ff fc6e 	bl	8001818 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e167      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x200>
 8001f56:	e01b      	b.n	8001f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f58:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <HAL_RCC_OscConfig+0x248>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fc5b 	bl	8001818 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	e00e      	b.n	8001f84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f66:	f7ff fc57 	bl	8001818 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d907      	bls.n	8001f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e150      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	42470000 	.word	0x42470000
 8001f80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	4b88      	ldr	r3, [pc, #544]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8001f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ea      	bne.n	8001f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8097 	beq.w	80020cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa2:	4b81      	ldr	r3, [pc, #516]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10f      	bne.n	8001fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fbe:	4b7a      	ldr	r3, [pc, #488]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fce:	4b77      	ldr	r3, [pc, #476]	@ (80021ac <HAL_RCC_OscConfig+0x474>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d118      	bne.n	800200c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fda:	4b74      	ldr	r3, [pc, #464]	@ (80021ac <HAL_RCC_OscConfig+0x474>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a73      	ldr	r2, [pc, #460]	@ (80021ac <HAL_RCC_OscConfig+0x474>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff fc17 	bl	8001818 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fee:	f7ff fc13 	bl	8001818 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e10c      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	4b6a      	ldr	r3, [pc, #424]	@ (80021ac <HAL_RCC_OscConfig+0x474>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x2ea>
 8002014:	4b64      	ldr	r3, [pc, #400]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002018:	4a63      	ldr	r2, [pc, #396]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002020:	e01c      	b.n	800205c <HAL_RCC_OscConfig+0x324>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b05      	cmp	r3, #5
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x30c>
 800202a:	4b5f      	ldr	r3, [pc, #380]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202e:	4a5e      	ldr	r2, [pc, #376]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	6713      	str	r3, [r2, #112]	@ 0x70
 8002036:	4b5c      	ldr	r3, [pc, #368]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203a:	4a5b      	ldr	r2, [pc, #364]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6713      	str	r3, [r2, #112]	@ 0x70
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0x324>
 8002044:	4b58      	ldr	r3, [pc, #352]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002048:	4a57      	ldr	r2, [pc, #348]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002050:	4b55      	ldr	r3, [pc, #340]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002054:	4a54      	ldr	r2, [pc, #336]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002056:	f023 0304 	bic.w	r3, r3, #4
 800205a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d015      	beq.n	8002090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7ff fbd8 	bl	8001818 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7ff fbd4 	bl	8001818 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e0cb      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002082:	4b49      	ldr	r3, [pc, #292]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0ee      	beq.n	800206c <HAL_RCC_OscConfig+0x334>
 800208e:	e014      	b.n	80020ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7ff fbc2 	bl	8001818 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7ff fbbe 	bl	8001818 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0b5      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ae:	4b3e      	ldr	r3, [pc, #248]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1ee      	bne.n	8002098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c0:	4b39      	ldr	r3, [pc, #228]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	4a38      	ldr	r2, [pc, #224]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 80020c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80a1 	beq.w	8002218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020d6:	4b34      	ldr	r3, [pc, #208]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d05c      	beq.n	800219c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d141      	bne.n	800216e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ea:	4b31      	ldr	r3, [pc, #196]	@ (80021b0 <HAL_RCC_OscConfig+0x478>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fb92 	bl	8001818 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f8:	f7ff fb8e 	bl	8001818 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e087      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	4b27      	ldr	r3, [pc, #156]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212c:	085b      	lsrs	r3, r3, #1
 800212e:	3b01      	subs	r3, #1
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	491b      	ldr	r1, [pc, #108]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002140:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <HAL_RCC_OscConfig+0x478>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff fb67 	bl	8001818 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214e:	f7ff fb63 	bl	8001818 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e05c      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x416>
 800216c:	e054      	b.n	8002218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <HAL_RCC_OscConfig+0x478>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fb50 	bl	8001818 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff fb4c 	bl	8001818 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e045      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x444>
 800219a:	e03d      	b.n	8002218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e038      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40007000 	.word	0x40007000
 80021b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <HAL_RCC_OscConfig+0x4ec>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d028      	beq.n	8002214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d121      	bne.n	8002214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d11a      	bne.n	8002214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d111      	bne.n	8002214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	085b      	lsrs	r3, r3, #1
 80021fc:	3b01      	subs	r3, #1
 80021fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d107      	bne.n	8002214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800

08002228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0cc      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800223c:	4b68      	ldr	r3, [pc, #416]	@ (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d90c      	bls.n	8002264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b65      	ldr	r3, [pc, #404]	@ (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b63      	ldr	r3, [pc, #396]	@ (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b8      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800227c:	4b59      	ldr	r3, [pc, #356]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a58      	ldr	r2, [pc, #352]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002294:	4b53      	ldr	r3, [pc, #332]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a52      	ldr	r2, [pc, #328]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800229e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b50      	ldr	r3, [pc, #320]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	494d      	ldr	r1, [pc, #308]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d044      	beq.n	8002348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b47      	ldr	r3, [pc, #284]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d119      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e07f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b3f      	ldr	r3, [pc, #252]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e06f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b3b      	ldr	r3, [pc, #236]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e067      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b37      	ldr	r3, [pc, #220]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4934      	ldr	r1, [pc, #208]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002318:	f7ff fa7e 	bl	8001818 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7ff fa7a 	bl	8001818 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e04f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b2b      	ldr	r3, [pc, #172]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b25      	ldr	r3, [pc, #148]	@ (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d20c      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b22      	ldr	r3, [pc, #136]	@ (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b20      	ldr	r3, [pc, #128]	@ (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e032      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4916      	ldr	r1, [pc, #88]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239a:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	490e      	ldr	r1, [pc, #56]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ae:	f000 f821 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	490a      	ldr	r1, [pc, #40]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	4a09      	ldr	r2, [pc, #36]	@ (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f9de 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023c00 	.word	0x40023c00
 80023e4:	40023800 	.word	0x40023800
 80023e8:	08004150 	.word	0x08004150
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000004 	.word	0x20000004

080023f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f8:	b094      	sub	sp, #80	@ 0x50
 80023fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002400:	2300      	movs	r3, #0
 8002402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002404:	2300      	movs	r3, #0
 8002406:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800240c:	4b79      	ldr	r3, [pc, #484]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b08      	cmp	r3, #8
 8002416:	d00d      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x40>
 8002418:	2b08      	cmp	r3, #8
 800241a:	f200 80e1 	bhi.w	80025e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x34>
 8002422:	2b04      	cmp	r3, #4
 8002424:	d003      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x3a>
 8002426:	e0db      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002428:	4b73      	ldr	r3, [pc, #460]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800242a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800242c:	e0db      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800242e:	4b73      	ldr	r3, [pc, #460]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002430:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002432:	e0d8      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002434:	4b6f      	ldr	r3, [pc, #444]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800243c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800243e:	4b6d      	ldr	r3, [pc, #436]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d063      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800244a:	4b6a      	ldr	r3, [pc, #424]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	099b      	lsrs	r3, r3, #6
 8002450:	2200      	movs	r2, #0
 8002452:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002454:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245c:	633b      	str	r3, [r7, #48]	@ 0x30
 800245e:	2300      	movs	r3, #0
 8002460:	637b      	str	r3, [r7, #52]	@ 0x34
 8002462:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002466:	4622      	mov	r2, r4
 8002468:	462b      	mov	r3, r5
 800246a:	f04f 0000 	mov.w	r0, #0
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	0159      	lsls	r1, r3, #5
 8002474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002478:	0150      	lsls	r0, r2, #5
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4621      	mov	r1, r4
 8002480:	1a51      	subs	r1, r2, r1
 8002482:	6139      	str	r1, [r7, #16]
 8002484:	4629      	mov	r1, r5
 8002486:	eb63 0301 	sbc.w	r3, r3, r1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002498:	4659      	mov	r1, fp
 800249a:	018b      	lsls	r3, r1, #6
 800249c:	4651      	mov	r1, sl
 800249e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024a2:	4651      	mov	r1, sl
 80024a4:	018a      	lsls	r2, r1, #6
 80024a6:	4651      	mov	r1, sl
 80024a8:	ebb2 0801 	subs.w	r8, r2, r1
 80024ac:	4659      	mov	r1, fp
 80024ae:	eb63 0901 	sbc.w	r9, r3, r1
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024c6:	4690      	mov	r8, r2
 80024c8:	4699      	mov	r9, r3
 80024ca:	4623      	mov	r3, r4
 80024cc:	eb18 0303 	adds.w	r3, r8, r3
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	462b      	mov	r3, r5
 80024d4:	eb49 0303 	adc.w	r3, r9, r3
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024e6:	4629      	mov	r1, r5
 80024e8:	024b      	lsls	r3, r1, #9
 80024ea:	4621      	mov	r1, r4
 80024ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024f0:	4621      	mov	r1, r4
 80024f2:	024a      	lsls	r2, r1, #9
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024fa:	2200      	movs	r2, #0
 80024fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002504:	f7fe fb50 	bl	8000ba8 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4613      	mov	r3, r2
 800250e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002510:	e058      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002512:	4b38      	ldr	r3, [pc, #224]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	2200      	movs	r2, #0
 800251a:	4618      	mov	r0, r3
 800251c:	4611      	mov	r1, r2
 800251e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
 8002528:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800252c:	4642      	mov	r2, r8
 800252e:	464b      	mov	r3, r9
 8002530:	f04f 0000 	mov.w	r0, #0
 8002534:	f04f 0100 	mov.w	r1, #0
 8002538:	0159      	lsls	r1, r3, #5
 800253a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800253e:	0150      	lsls	r0, r2, #5
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4641      	mov	r1, r8
 8002546:	ebb2 0a01 	subs.w	sl, r2, r1
 800254a:	4649      	mov	r1, r9
 800254c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800255c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002560:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002564:	ebb2 040a 	subs.w	r4, r2, sl
 8002568:	eb63 050b 	sbc.w	r5, r3, fp
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	00eb      	lsls	r3, r5, #3
 8002576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800257a:	00e2      	lsls	r2, r4, #3
 800257c:	4614      	mov	r4, r2
 800257e:	461d      	mov	r5, r3
 8002580:	4643      	mov	r3, r8
 8002582:	18e3      	adds	r3, r4, r3
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	464b      	mov	r3, r9
 8002588:	eb45 0303 	adc.w	r3, r5, r3
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800259a:	4629      	mov	r1, r5
 800259c:	028b      	lsls	r3, r1, #10
 800259e:	4621      	mov	r1, r4
 80025a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025a4:	4621      	mov	r1, r4
 80025a6:	028a      	lsls	r2, r1, #10
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ae:	2200      	movs	r2, #0
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	61fa      	str	r2, [r7, #28]
 80025b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025b8:	f7fe faf6 	bl	8000ba8 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4613      	mov	r3, r2
 80025c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	3301      	adds	r3, #1
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80025d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025de:	e002      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e0:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3750      	adds	r7, #80	@ 0x50
 80025ec:	46bd      	mov	sp, r7
 80025ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	007a1200 	.word	0x007a1200

08002600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000000 	.word	0x20000000

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800261c:	f7ff fff0 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a9b      	lsrs	r3, r3, #10
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	@ (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	08004160 	.word	0x08004160

08002640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002644:	f7ff ffdc 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0b5b      	lsrs	r3, r3, #13
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	@ (8002664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	08004160 	.word	0x08004160

08002668 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e042      	b.n	8002700 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe ff06 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2224      	movs	r2, #36	@ 0x24
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f973 	bl	8002998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	@ 0x28
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b20      	cmp	r3, #32
 8002726:	d175      	bne.n	8002814 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_UART_Transmit+0x2c>
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e06e      	b.n	8002816 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2221      	movs	r2, #33	@ 0x21
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002746:	f7ff f867 	bl	8001818 <HAL_GetTick>
 800274a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	88fa      	ldrh	r2, [r7, #6]
 8002756:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002760:	d108      	bne.n	8002774 <HAL_UART_Transmit+0x6c>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e003      	b.n	800277c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800277c:	e02e      	b.n	80027dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	2180      	movs	r1, #128	@ 0x80
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f848 	bl	800281e <UART_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e03a      	b.n	8002816 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	3302      	adds	r3, #2
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	e007      	b.n	80027ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	3301      	adds	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1cb      	bne.n	800277e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2140      	movs	r1, #64	@ 0x40
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f814 	bl	800281e <UART_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e006      	b.n	8002816 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800282e:	e03b      	b.n	80028a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d037      	beq.n	80028a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002838:	f7fe ffee 	bl	8001818 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	6a3a      	ldr	r2, [r7, #32]
 8002844:	429a      	cmp	r2, r3
 8002846:	d302      	bcc.n	800284e <UART_WaitOnFlagUntilTimeout+0x30>
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e03a      	b.n	80028c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d023      	beq.n	80028a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b80      	cmp	r3, #128	@ 0x80
 8002864:	d020      	beq.n	80028a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b40      	cmp	r3, #64	@ 0x40
 800286a:	d01d      	beq.n	80028a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b08      	cmp	r3, #8
 8002878:	d116      	bne.n	80028a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f81d 	bl	80028d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2208      	movs	r2, #8
 800289a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e00f      	b.n	80028c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4013      	ands	r3, r2
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d0b4      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b095      	sub	sp, #84	@ 0x54
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e2:	e853 3f00 	ldrex	r3, [r3]
 80028e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80028fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e5      	bne.n	80028d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3314      	adds	r3, #20
 8002912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	e853 3f00 	ldrex	r3, [r3]
 800291a:	61fb      	str	r3, [r7, #28]
   return(result);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800292c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002930:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002934:	e841 2300 	strex	r3, r2, [r1]
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e5      	bne.n	800290c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002944:	2b01      	cmp	r3, #1
 8002946:	d119      	bne.n	800297c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	e853 3f00 	ldrex	r3, [r3]
 8002956:	60bb      	str	r3, [r7, #8]
   return(result);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f023 0310 	bic.w	r3, r3, #16
 800295e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002968:	61ba      	str	r2, [r7, #24]
 800296a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	6979      	ldr	r1, [r7, #20]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	613b      	str	r3, [r7, #16]
   return(result);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e5      	bne.n	8002948 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800298a:	bf00      	nop
 800298c:	3754      	adds	r7, #84	@ 0x54
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800299c:	b0c0      	sub	sp, #256	@ 0x100
 800299e:	af00      	add	r7, sp, #0
 80029a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	ea40 0301 	orr.w	r3, r0, r1
 80029c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029f0:	f021 010c 	bic.w	r1, r1, #12
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029fe:	430b      	orrs	r3, r1
 8002a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a12:	6999      	ldr	r1, [r3, #24]
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	ea40 0301 	orr.w	r3, r0, r1
 8002a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b8f      	ldr	r3, [pc, #572]	@ (8002c64 <UART_SetConfig+0x2cc>)
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d005      	beq.n	8002a38 <UART_SetConfig+0xa0>
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b8d      	ldr	r3, [pc, #564]	@ (8002c68 <UART_SetConfig+0x2d0>)
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d104      	bne.n	8002a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a38:	f7ff fe02 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8002a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a40:	e003      	b.n	8002a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a42:	f7ff fde9 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8002a46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a54:	f040 810c 	bne.w	8002c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	462b      	mov	r3, r5
 8002a6e:	1891      	adds	r1, r2, r2
 8002a70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a72:	415b      	adcs	r3, r3
 8002a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	eb12 0801 	adds.w	r8, r2, r1
 8002a80:	4629      	mov	r1, r5
 8002a82:	eb43 0901 	adc.w	r9, r3, r1
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	eb18 0303 	adds.w	r3, r8, r3
 8002aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	eb49 0303 	adc.w	r3, r9, r3
 8002aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	18db      	adds	r3, r3, r3
 8002aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8002acc:	4613      	mov	r3, r2
 8002ace:	eb42 0303 	adc.w	r3, r2, r3
 8002ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002adc:	f7fe f864 	bl	8000ba8 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4b61      	ldr	r3, [pc, #388]	@ (8002c6c <UART_SetConfig+0x2d4>)
 8002ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	011c      	lsls	r4, r3, #4
 8002aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002af8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b10:	4641      	mov	r1, r8
 8002b12:	eb12 0a01 	adds.w	sl, r2, r1
 8002b16:	4649      	mov	r1, r9
 8002b18:	eb43 0b01 	adc.w	fp, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b30:	4692      	mov	sl, r2
 8002b32:	469b      	mov	fp, r3
 8002b34:	4643      	mov	r3, r8
 8002b36:	eb1a 0303 	adds.w	r3, sl, r3
 8002b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	eb4b 0303 	adc.w	r3, fp, r3
 8002b44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	18db      	adds	r3, r3, r3
 8002b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b62:	4613      	mov	r3, r2
 8002b64:	eb42 0303 	adc.w	r3, r2, r3
 8002b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b72:	f7fe f819 	bl	8000ba8 <__aeabi_uldivmod>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c6c <UART_SetConfig+0x2d4>)
 8002b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2264      	movs	r2, #100	@ 0x64
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	1acb      	subs	r3, r1, r3
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b92:	4b36      	ldr	r3, [pc, #216]	@ (8002c6c <UART_SetConfig+0x2d4>)
 8002b94:	fba3 2302 	umull	r2, r3, r3, r2
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ba0:	441c      	add	r4, r3
 8002ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	1891      	adds	r1, r2, r2
 8002bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002bbc:	415b      	adcs	r3, r3
 8002bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	1851      	adds	r1, r2, r1
 8002bc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bca:	4649      	mov	r1, r9
 8002bcc:	414b      	adcs	r3, r1
 8002bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002bdc:	4659      	mov	r1, fp
 8002bde:	00cb      	lsls	r3, r1, #3
 8002be0:	4651      	mov	r1, sl
 8002be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be6:	4651      	mov	r1, sl
 8002be8:	00ca      	lsls	r2, r1, #3
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bf8:	464b      	mov	r3, r9
 8002bfa:	460a      	mov	r2, r1
 8002bfc:	eb42 0303 	adc.w	r3, r2, r3
 8002c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c18:	460b      	mov	r3, r1
 8002c1a:	18db      	adds	r3, r3, r3
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c1e:	4613      	mov	r3, r2
 8002c20:	eb42 0303 	adc.w	r3, r2, r3
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c2e:	f7fd ffbb 	bl	8000ba8 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <UART_SetConfig+0x2d4>)
 8002c38:	fba3 1302 	umull	r1, r3, r3, r2
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	2164      	movs	r1, #100	@ 0x64
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	3332      	adds	r3, #50	@ 0x32
 8002c4a:	4a08      	ldr	r2, [pc, #32]	@ (8002c6c <UART_SetConfig+0x2d4>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	f003 0207 	and.w	r2, r3, #7
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4422      	add	r2, r4
 8002c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c60:	e106      	b.n	8002e70 <UART_SetConfig+0x4d8>
 8002c62:	bf00      	nop
 8002c64:	40011000 	.word	0x40011000
 8002c68:	40011400 	.word	0x40011400
 8002c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c82:	4642      	mov	r2, r8
 8002c84:	464b      	mov	r3, r9
 8002c86:	1891      	adds	r1, r2, r2
 8002c88:	6239      	str	r1, [r7, #32]
 8002c8a:	415b      	adcs	r3, r3
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c92:	4641      	mov	r1, r8
 8002c94:	1854      	adds	r4, r2, r1
 8002c96:	4649      	mov	r1, r9
 8002c98:	eb43 0501 	adc.w	r5, r3, r1
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	00eb      	lsls	r3, r5, #3
 8002ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002caa:	00e2      	lsls	r2, r4, #3
 8002cac:	4614      	mov	r4, r2
 8002cae:	461d      	mov	r5, r3
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	18e3      	adds	r3, r4, r3
 8002cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cb8:	464b      	mov	r3, r9
 8002cba:	eb45 0303 	adc.w	r3, r5, r3
 8002cbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cde:	4629      	mov	r1, r5
 8002ce0:	008b      	lsls	r3, r1, #2
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ce8:	4621      	mov	r1, r4
 8002cea:	008a      	lsls	r2, r1, #2
 8002cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002cf0:	f7fd ff5a 	bl	8000ba8 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4b60      	ldr	r3, [pc, #384]	@ (8002e7c <UART_SetConfig+0x4e4>)
 8002cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	011c      	lsls	r4, r3, #4
 8002d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	1891      	adds	r1, r2, r2
 8002d1a:	61b9      	str	r1, [r7, #24]
 8002d1c:	415b      	adcs	r3, r3
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d24:	4641      	mov	r1, r8
 8002d26:	1851      	adds	r1, r2, r1
 8002d28:	6139      	str	r1, [r7, #16]
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	414b      	adcs	r3, r1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	00cb      	lsls	r3, r1, #3
 8002d40:	4651      	mov	r1, sl
 8002d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d46:	4651      	mov	r1, sl
 8002d48:	00ca      	lsls	r2, r1, #3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4642      	mov	r2, r8
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d58:	464b      	mov	r3, r9
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	008b      	lsls	r3, r1, #2
 8002d80:	4641      	mov	r1, r8
 8002d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d86:	4641      	mov	r1, r8
 8002d88:	008a      	lsls	r2, r1, #2
 8002d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d8e:	f7fd ff0b 	bl	8000ba8 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	4b38      	ldr	r3, [pc, #224]	@ (8002e7c <UART_SetConfig+0x4e4>)
 8002d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	2264      	movs	r2, #100	@ 0x64
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	1acb      	subs	r3, r1, r3
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	3332      	adds	r3, #50	@ 0x32
 8002dac:	4a33      	ldr	r2, [pc, #204]	@ (8002e7c <UART_SetConfig+0x4e4>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002db8:	441c      	add	r4, r3
 8002dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002dc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002dc8:	4642      	mov	r2, r8
 8002dca:	464b      	mov	r3, r9
 8002dcc:	1891      	adds	r1, r2, r2
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	415b      	adcs	r3, r3
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd8:	4641      	mov	r1, r8
 8002dda:	1851      	adds	r1, r2, r1
 8002ddc:	6039      	str	r1, [r7, #0]
 8002dde:	4649      	mov	r1, r9
 8002de0:	414b      	adcs	r3, r1
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002df0:	4659      	mov	r1, fp
 8002df2:	00cb      	lsls	r3, r1, #3
 8002df4:	4651      	mov	r1, sl
 8002df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dfa:	4651      	mov	r1, sl
 8002dfc:	00ca      	lsls	r2, r1, #3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	4642      	mov	r2, r8
 8002e06:	189b      	adds	r3, r3, r2
 8002e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e0a:	464b      	mov	r3, r9
 8002e0c:	460a      	mov	r2, r1
 8002e0e:	eb42 0303 	adc.w	r3, r2, r3
 8002e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	008b      	lsls	r3, r1, #2
 8002e30:	4641      	mov	r1, r8
 8002e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e36:	4641      	mov	r1, r8
 8002e38:	008a      	lsls	r2, r1, #2
 8002e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e3e:	f7fd feb3 	bl	8000ba8 <__aeabi_uldivmod>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <UART_SetConfig+0x4e4>)
 8002e48:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	2164      	movs	r1, #100	@ 0x64
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	3332      	adds	r3, #50	@ 0x32
 8002e5a:	4a08      	ldr	r2, [pc, #32]	@ (8002e7c <UART_SetConfig+0x4e4>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4422      	add	r2, r4
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e76:	46bd      	mov	sp, r7
 8002e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7c:	51eb851f 	.word	0x51eb851f

08002e80 <malloc>:
 8002e80:	4b02      	ldr	r3, [pc, #8]	@ (8002e8c <malloc+0xc>)
 8002e82:	4601      	mov	r1, r0
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	f000 b82d 	b.w	8002ee4 <_malloc_r>
 8002e8a:	bf00      	nop
 8002e8c:	20000018 	.word	0x20000018

08002e90 <free>:
 8002e90:	4b02      	ldr	r3, [pc, #8]	@ (8002e9c <free+0xc>)
 8002e92:	4601      	mov	r1, r0
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	f000 bb47 	b.w	8003528 <_free_r>
 8002e9a:	bf00      	nop
 8002e9c:	20000018 	.word	0x20000018

08002ea0 <sbrk_aligned>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	4e0f      	ldr	r6, [pc, #60]	@ (8002ee0 <sbrk_aligned+0x40>)
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	6831      	ldr	r1, [r6, #0]
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	b911      	cbnz	r1, 8002eb2 <sbrk_aligned+0x12>
 8002eac:	f000 faec 	bl	8003488 <_sbrk_r>
 8002eb0:	6030      	str	r0, [r6, #0]
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	f000 fae7 	bl	8003488 <_sbrk_r>
 8002eba:	1c43      	adds	r3, r0, #1
 8002ebc:	d103      	bne.n	8002ec6 <sbrk_aligned+0x26>
 8002ebe:	f04f 34ff 	mov.w	r4, #4294967295
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	bd70      	pop	{r4, r5, r6, pc}
 8002ec6:	1cc4      	adds	r4, r0, #3
 8002ec8:	f024 0403 	bic.w	r4, r4, #3
 8002ecc:	42a0      	cmp	r0, r4
 8002ece:	d0f8      	beq.n	8002ec2 <sbrk_aligned+0x22>
 8002ed0:	1a21      	subs	r1, r4, r0
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f000 fad8 	bl	8003488 <_sbrk_r>
 8002ed8:	3001      	adds	r0, #1
 8002eda:	d1f2      	bne.n	8002ec2 <sbrk_aligned+0x22>
 8002edc:	e7ef      	b.n	8002ebe <sbrk_aligned+0x1e>
 8002ede:	bf00      	nop
 8002ee0:	200000e4 	.word	0x200000e4

08002ee4 <_malloc_r>:
 8002ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ee8:	1ccd      	adds	r5, r1, #3
 8002eea:	f025 0503 	bic.w	r5, r5, #3
 8002eee:	3508      	adds	r5, #8
 8002ef0:	2d0c      	cmp	r5, #12
 8002ef2:	bf38      	it	cc
 8002ef4:	250c      	movcc	r5, #12
 8002ef6:	2d00      	cmp	r5, #0
 8002ef8:	4606      	mov	r6, r0
 8002efa:	db01      	blt.n	8002f00 <_malloc_r+0x1c>
 8002efc:	42a9      	cmp	r1, r5
 8002efe:	d904      	bls.n	8002f0a <_malloc_r+0x26>
 8002f00:	230c      	movs	r3, #12
 8002f02:	6033      	str	r3, [r6, #0]
 8002f04:	2000      	movs	r0, #0
 8002f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fe0 <_malloc_r+0xfc>
 8002f0e:	f000 f869 	bl	8002fe4 <__malloc_lock>
 8002f12:	f8d8 3000 	ldr.w	r3, [r8]
 8002f16:	461c      	mov	r4, r3
 8002f18:	bb44      	cbnz	r4, 8002f6c <_malloc_r+0x88>
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	4630      	mov	r0, r6
 8002f1e:	f7ff ffbf 	bl	8002ea0 <sbrk_aligned>
 8002f22:	1c43      	adds	r3, r0, #1
 8002f24:	4604      	mov	r4, r0
 8002f26:	d158      	bne.n	8002fda <_malloc_r+0xf6>
 8002f28:	f8d8 4000 	ldr.w	r4, [r8]
 8002f2c:	4627      	mov	r7, r4
 8002f2e:	2f00      	cmp	r7, #0
 8002f30:	d143      	bne.n	8002fba <_malloc_r+0xd6>
 8002f32:	2c00      	cmp	r4, #0
 8002f34:	d04b      	beq.n	8002fce <_malloc_r+0xea>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	4639      	mov	r1, r7
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	eb04 0903 	add.w	r9, r4, r3
 8002f40:	f000 faa2 	bl	8003488 <_sbrk_r>
 8002f44:	4581      	cmp	r9, r0
 8002f46:	d142      	bne.n	8002fce <_malloc_r+0xea>
 8002f48:	6821      	ldr	r1, [r4, #0]
 8002f4a:	1a6d      	subs	r5, r5, r1
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	4630      	mov	r0, r6
 8002f50:	f7ff ffa6 	bl	8002ea0 <sbrk_aligned>
 8002f54:	3001      	adds	r0, #1
 8002f56:	d03a      	beq.n	8002fce <_malloc_r+0xea>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	442b      	add	r3, r5
 8002f5c:	6023      	str	r3, [r4, #0]
 8002f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	bb62      	cbnz	r2, 8002fc0 <_malloc_r+0xdc>
 8002f66:	f8c8 7000 	str.w	r7, [r8]
 8002f6a:	e00f      	b.n	8002f8c <_malloc_r+0xa8>
 8002f6c:	6822      	ldr	r2, [r4, #0]
 8002f6e:	1b52      	subs	r2, r2, r5
 8002f70:	d420      	bmi.n	8002fb4 <_malloc_r+0xd0>
 8002f72:	2a0b      	cmp	r2, #11
 8002f74:	d917      	bls.n	8002fa6 <_malloc_r+0xc2>
 8002f76:	1961      	adds	r1, r4, r5
 8002f78:	42a3      	cmp	r3, r4
 8002f7a:	6025      	str	r5, [r4, #0]
 8002f7c:	bf18      	it	ne
 8002f7e:	6059      	strne	r1, [r3, #4]
 8002f80:	6863      	ldr	r3, [r4, #4]
 8002f82:	bf08      	it	eq
 8002f84:	f8c8 1000 	streq.w	r1, [r8]
 8002f88:	5162      	str	r2, [r4, r5]
 8002f8a:	604b      	str	r3, [r1, #4]
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	f000 f82f 	bl	8002ff0 <__malloc_unlock>
 8002f92:	f104 000b 	add.w	r0, r4, #11
 8002f96:	1d23      	adds	r3, r4, #4
 8002f98:	f020 0007 	bic.w	r0, r0, #7
 8002f9c:	1ac2      	subs	r2, r0, r3
 8002f9e:	bf1c      	itt	ne
 8002fa0:	1a1b      	subne	r3, r3, r0
 8002fa2:	50a3      	strne	r3, [r4, r2]
 8002fa4:	e7af      	b.n	8002f06 <_malloc_r+0x22>
 8002fa6:	6862      	ldr	r2, [r4, #4]
 8002fa8:	42a3      	cmp	r3, r4
 8002faa:	bf0c      	ite	eq
 8002fac:	f8c8 2000 	streq.w	r2, [r8]
 8002fb0:	605a      	strne	r2, [r3, #4]
 8002fb2:	e7eb      	b.n	8002f8c <_malloc_r+0xa8>
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	6864      	ldr	r4, [r4, #4]
 8002fb8:	e7ae      	b.n	8002f18 <_malloc_r+0x34>
 8002fba:	463c      	mov	r4, r7
 8002fbc:	687f      	ldr	r7, [r7, #4]
 8002fbe:	e7b6      	b.n	8002f2e <_malloc_r+0x4a>
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	42a3      	cmp	r3, r4
 8002fc6:	d1fb      	bne.n	8002fc0 <_malloc_r+0xdc>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6053      	str	r3, [r2, #4]
 8002fcc:	e7de      	b.n	8002f8c <_malloc_r+0xa8>
 8002fce:	230c      	movs	r3, #12
 8002fd0:	6033      	str	r3, [r6, #0]
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	f000 f80c 	bl	8002ff0 <__malloc_unlock>
 8002fd8:	e794      	b.n	8002f04 <_malloc_r+0x20>
 8002fda:	6005      	str	r5, [r0, #0]
 8002fdc:	e7d6      	b.n	8002f8c <_malloc_r+0xa8>
 8002fde:	bf00      	nop
 8002fe0:	200000e8 	.word	0x200000e8

08002fe4 <__malloc_lock>:
 8002fe4:	4801      	ldr	r0, [pc, #4]	@ (8002fec <__malloc_lock+0x8>)
 8002fe6:	f000 ba9c 	b.w	8003522 <__retarget_lock_acquire_recursive>
 8002fea:	bf00      	nop
 8002fec:	2000022c 	.word	0x2000022c

08002ff0 <__malloc_unlock>:
 8002ff0:	4801      	ldr	r0, [pc, #4]	@ (8002ff8 <__malloc_unlock+0x8>)
 8002ff2:	f000 ba97 	b.w	8003524 <__retarget_lock_release_recursive>
 8002ff6:	bf00      	nop
 8002ff8:	2000022c 	.word	0x2000022c

08002ffc <std>:
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	b510      	push	{r4, lr}
 8003000:	4604      	mov	r4, r0
 8003002:	e9c0 3300 	strd	r3, r3, [r0]
 8003006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800300a:	6083      	str	r3, [r0, #8]
 800300c:	8181      	strh	r1, [r0, #12]
 800300e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003010:	81c2      	strh	r2, [r0, #14]
 8003012:	6183      	str	r3, [r0, #24]
 8003014:	4619      	mov	r1, r3
 8003016:	2208      	movs	r2, #8
 8003018:	305c      	adds	r0, #92	@ 0x5c
 800301a:	f000 f9f9 	bl	8003410 <memset>
 800301e:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <std+0x58>)
 8003020:	6263      	str	r3, [r4, #36]	@ 0x24
 8003022:	4b0d      	ldr	r3, [pc, #52]	@ (8003058 <std+0x5c>)
 8003024:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <std+0x60>)
 8003028:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800302a:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <std+0x64>)
 800302c:	6323      	str	r3, [r4, #48]	@ 0x30
 800302e:	4b0d      	ldr	r3, [pc, #52]	@ (8003064 <std+0x68>)
 8003030:	6224      	str	r4, [r4, #32]
 8003032:	429c      	cmp	r4, r3
 8003034:	d006      	beq.n	8003044 <std+0x48>
 8003036:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800303a:	4294      	cmp	r4, r2
 800303c:	d002      	beq.n	8003044 <std+0x48>
 800303e:	33d0      	adds	r3, #208	@ 0xd0
 8003040:	429c      	cmp	r4, r3
 8003042:	d105      	bne.n	8003050 <std+0x54>
 8003044:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800304c:	f000 ba68 	b.w	8003520 <__retarget_lock_init_recursive>
 8003050:	bd10      	pop	{r4, pc}
 8003052:	bf00      	nop
 8003054:	08003261 	.word	0x08003261
 8003058:	08003283 	.word	0x08003283
 800305c:	080032bb 	.word	0x080032bb
 8003060:	080032df 	.word	0x080032df
 8003064:	200000ec 	.word	0x200000ec

08003068 <stdio_exit_handler>:
 8003068:	4a02      	ldr	r2, [pc, #8]	@ (8003074 <stdio_exit_handler+0xc>)
 800306a:	4903      	ldr	r1, [pc, #12]	@ (8003078 <stdio_exit_handler+0x10>)
 800306c:	4803      	ldr	r0, [pc, #12]	@ (800307c <stdio_exit_handler+0x14>)
 800306e:	f000 b869 	b.w	8003144 <_fwalk_sglue>
 8003072:	bf00      	nop
 8003074:	2000000c 	.word	0x2000000c
 8003078:	08003c65 	.word	0x08003c65
 800307c:	2000001c 	.word	0x2000001c

08003080 <cleanup_stdio>:
 8003080:	6841      	ldr	r1, [r0, #4]
 8003082:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <cleanup_stdio+0x34>)
 8003084:	4299      	cmp	r1, r3
 8003086:	b510      	push	{r4, lr}
 8003088:	4604      	mov	r4, r0
 800308a:	d001      	beq.n	8003090 <cleanup_stdio+0x10>
 800308c:	f000 fdea 	bl	8003c64 <_fflush_r>
 8003090:	68a1      	ldr	r1, [r4, #8]
 8003092:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <cleanup_stdio+0x38>)
 8003094:	4299      	cmp	r1, r3
 8003096:	d002      	beq.n	800309e <cleanup_stdio+0x1e>
 8003098:	4620      	mov	r0, r4
 800309a:	f000 fde3 	bl	8003c64 <_fflush_r>
 800309e:	68e1      	ldr	r1, [r4, #12]
 80030a0:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <cleanup_stdio+0x3c>)
 80030a2:	4299      	cmp	r1, r3
 80030a4:	d004      	beq.n	80030b0 <cleanup_stdio+0x30>
 80030a6:	4620      	mov	r0, r4
 80030a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030ac:	f000 bdda 	b.w	8003c64 <_fflush_r>
 80030b0:	bd10      	pop	{r4, pc}
 80030b2:	bf00      	nop
 80030b4:	200000ec 	.word	0x200000ec
 80030b8:	20000154 	.word	0x20000154
 80030bc:	200001bc 	.word	0x200001bc

080030c0 <global_stdio_init.part.0>:
 80030c0:	b510      	push	{r4, lr}
 80030c2:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <global_stdio_init.part.0+0x30>)
 80030c4:	4c0b      	ldr	r4, [pc, #44]	@ (80030f4 <global_stdio_init.part.0+0x34>)
 80030c6:	4a0c      	ldr	r2, [pc, #48]	@ (80030f8 <global_stdio_init.part.0+0x38>)
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	4620      	mov	r0, r4
 80030cc:	2200      	movs	r2, #0
 80030ce:	2104      	movs	r1, #4
 80030d0:	f7ff ff94 	bl	8002ffc <std>
 80030d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80030d8:	2201      	movs	r2, #1
 80030da:	2109      	movs	r1, #9
 80030dc:	f7ff ff8e 	bl	8002ffc <std>
 80030e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80030e4:	2202      	movs	r2, #2
 80030e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030ea:	2112      	movs	r1, #18
 80030ec:	f7ff bf86 	b.w	8002ffc <std>
 80030f0:	20000224 	.word	0x20000224
 80030f4:	200000ec 	.word	0x200000ec
 80030f8:	08003069 	.word	0x08003069

080030fc <__sfp_lock_acquire>:
 80030fc:	4801      	ldr	r0, [pc, #4]	@ (8003104 <__sfp_lock_acquire+0x8>)
 80030fe:	f000 ba10 	b.w	8003522 <__retarget_lock_acquire_recursive>
 8003102:	bf00      	nop
 8003104:	2000022d 	.word	0x2000022d

08003108 <__sfp_lock_release>:
 8003108:	4801      	ldr	r0, [pc, #4]	@ (8003110 <__sfp_lock_release+0x8>)
 800310a:	f000 ba0b 	b.w	8003524 <__retarget_lock_release_recursive>
 800310e:	bf00      	nop
 8003110:	2000022d 	.word	0x2000022d

08003114 <__sinit>:
 8003114:	b510      	push	{r4, lr}
 8003116:	4604      	mov	r4, r0
 8003118:	f7ff fff0 	bl	80030fc <__sfp_lock_acquire>
 800311c:	6a23      	ldr	r3, [r4, #32]
 800311e:	b11b      	cbz	r3, 8003128 <__sinit+0x14>
 8003120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003124:	f7ff bff0 	b.w	8003108 <__sfp_lock_release>
 8003128:	4b04      	ldr	r3, [pc, #16]	@ (800313c <__sinit+0x28>)
 800312a:	6223      	str	r3, [r4, #32]
 800312c:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <__sinit+0x2c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f5      	bne.n	8003120 <__sinit+0xc>
 8003134:	f7ff ffc4 	bl	80030c0 <global_stdio_init.part.0>
 8003138:	e7f2      	b.n	8003120 <__sinit+0xc>
 800313a:	bf00      	nop
 800313c:	08003081 	.word	0x08003081
 8003140:	20000224 	.word	0x20000224

08003144 <_fwalk_sglue>:
 8003144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003148:	4607      	mov	r7, r0
 800314a:	4688      	mov	r8, r1
 800314c:	4614      	mov	r4, r2
 800314e:	2600      	movs	r6, #0
 8003150:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003154:	f1b9 0901 	subs.w	r9, r9, #1
 8003158:	d505      	bpl.n	8003166 <_fwalk_sglue+0x22>
 800315a:	6824      	ldr	r4, [r4, #0]
 800315c:	2c00      	cmp	r4, #0
 800315e:	d1f7      	bne.n	8003150 <_fwalk_sglue+0xc>
 8003160:	4630      	mov	r0, r6
 8003162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003166:	89ab      	ldrh	r3, [r5, #12]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d907      	bls.n	800317c <_fwalk_sglue+0x38>
 800316c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003170:	3301      	adds	r3, #1
 8003172:	d003      	beq.n	800317c <_fwalk_sglue+0x38>
 8003174:	4629      	mov	r1, r5
 8003176:	4638      	mov	r0, r7
 8003178:	47c0      	blx	r8
 800317a:	4306      	orrs	r6, r0
 800317c:	3568      	adds	r5, #104	@ 0x68
 800317e:	e7e9      	b.n	8003154 <_fwalk_sglue+0x10>

08003180 <iprintf>:
 8003180:	b40f      	push	{r0, r1, r2, r3}
 8003182:	b507      	push	{r0, r1, r2, lr}
 8003184:	4906      	ldr	r1, [pc, #24]	@ (80031a0 <iprintf+0x20>)
 8003186:	ab04      	add	r3, sp, #16
 8003188:	6808      	ldr	r0, [r1, #0]
 800318a:	f853 2b04 	ldr.w	r2, [r3], #4
 800318e:	6881      	ldr	r1, [r0, #8]
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	f000 fa3d 	bl	8003610 <_vfiprintf_r>
 8003196:	b003      	add	sp, #12
 8003198:	f85d eb04 	ldr.w	lr, [sp], #4
 800319c:	b004      	add	sp, #16
 800319e:	4770      	bx	lr
 80031a0:	20000018 	.word	0x20000018

080031a4 <_puts_r>:
 80031a4:	6a03      	ldr	r3, [r0, #32]
 80031a6:	b570      	push	{r4, r5, r6, lr}
 80031a8:	6884      	ldr	r4, [r0, #8]
 80031aa:	4605      	mov	r5, r0
 80031ac:	460e      	mov	r6, r1
 80031ae:	b90b      	cbnz	r3, 80031b4 <_puts_r+0x10>
 80031b0:	f7ff ffb0 	bl	8003114 <__sinit>
 80031b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031b6:	07db      	lsls	r3, r3, #31
 80031b8:	d405      	bmi.n	80031c6 <_puts_r+0x22>
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	0598      	lsls	r0, r3, #22
 80031be:	d402      	bmi.n	80031c6 <_puts_r+0x22>
 80031c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031c2:	f000 f9ae 	bl	8003522 <__retarget_lock_acquire_recursive>
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	0719      	lsls	r1, r3, #28
 80031ca:	d502      	bpl.n	80031d2 <_puts_r+0x2e>
 80031cc:	6923      	ldr	r3, [r4, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d135      	bne.n	800323e <_puts_r+0x9a>
 80031d2:	4621      	mov	r1, r4
 80031d4:	4628      	mov	r0, r5
 80031d6:	f000 f8c5 	bl	8003364 <__swsetup_r>
 80031da:	b380      	cbz	r0, 800323e <_puts_r+0x9a>
 80031dc:	f04f 35ff 	mov.w	r5, #4294967295
 80031e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80031e2:	07da      	lsls	r2, r3, #31
 80031e4:	d405      	bmi.n	80031f2 <_puts_r+0x4e>
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	059b      	lsls	r3, r3, #22
 80031ea:	d402      	bmi.n	80031f2 <_puts_r+0x4e>
 80031ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80031ee:	f000 f999 	bl	8003524 <__retarget_lock_release_recursive>
 80031f2:	4628      	mov	r0, r5
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	da04      	bge.n	8003204 <_puts_r+0x60>
 80031fa:	69a2      	ldr	r2, [r4, #24]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	dc17      	bgt.n	8003230 <_puts_r+0x8c>
 8003200:	290a      	cmp	r1, #10
 8003202:	d015      	beq.n	8003230 <_puts_r+0x8c>
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	6022      	str	r2, [r4, #0]
 800320a:	7019      	strb	r1, [r3, #0]
 800320c:	68a3      	ldr	r3, [r4, #8]
 800320e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003212:	3b01      	subs	r3, #1
 8003214:	60a3      	str	r3, [r4, #8]
 8003216:	2900      	cmp	r1, #0
 8003218:	d1ed      	bne.n	80031f6 <_puts_r+0x52>
 800321a:	2b00      	cmp	r3, #0
 800321c:	da11      	bge.n	8003242 <_puts_r+0x9e>
 800321e:	4622      	mov	r2, r4
 8003220:	210a      	movs	r1, #10
 8003222:	4628      	mov	r0, r5
 8003224:	f000 f85f 	bl	80032e6 <__swbuf_r>
 8003228:	3001      	adds	r0, #1
 800322a:	d0d7      	beq.n	80031dc <_puts_r+0x38>
 800322c:	250a      	movs	r5, #10
 800322e:	e7d7      	b.n	80031e0 <_puts_r+0x3c>
 8003230:	4622      	mov	r2, r4
 8003232:	4628      	mov	r0, r5
 8003234:	f000 f857 	bl	80032e6 <__swbuf_r>
 8003238:	3001      	adds	r0, #1
 800323a:	d1e7      	bne.n	800320c <_puts_r+0x68>
 800323c:	e7ce      	b.n	80031dc <_puts_r+0x38>
 800323e:	3e01      	subs	r6, #1
 8003240:	e7e4      	b.n	800320c <_puts_r+0x68>
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	6022      	str	r2, [r4, #0]
 8003248:	220a      	movs	r2, #10
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e7ee      	b.n	800322c <_puts_r+0x88>
	...

08003250 <puts>:
 8003250:	4b02      	ldr	r3, [pc, #8]	@ (800325c <puts+0xc>)
 8003252:	4601      	mov	r1, r0
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	f7ff bfa5 	b.w	80031a4 <_puts_r>
 800325a:	bf00      	nop
 800325c:	20000018 	.word	0x20000018

08003260 <__sread>:
 8003260:	b510      	push	{r4, lr}
 8003262:	460c      	mov	r4, r1
 8003264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003268:	f000 f8fc 	bl	8003464 <_read_r>
 800326c:	2800      	cmp	r0, #0
 800326e:	bfab      	itete	ge
 8003270:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003272:	89a3      	ldrhlt	r3, [r4, #12]
 8003274:	181b      	addge	r3, r3, r0
 8003276:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800327a:	bfac      	ite	ge
 800327c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800327e:	81a3      	strhlt	r3, [r4, #12]
 8003280:	bd10      	pop	{r4, pc}

08003282 <__swrite>:
 8003282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003286:	461f      	mov	r7, r3
 8003288:	898b      	ldrh	r3, [r1, #12]
 800328a:	05db      	lsls	r3, r3, #23
 800328c:	4605      	mov	r5, r0
 800328e:	460c      	mov	r4, r1
 8003290:	4616      	mov	r6, r2
 8003292:	d505      	bpl.n	80032a0 <__swrite+0x1e>
 8003294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003298:	2302      	movs	r3, #2
 800329a:	2200      	movs	r2, #0
 800329c:	f000 f8d0 	bl	8003440 <_lseek_r>
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032aa:	81a3      	strh	r3, [r4, #12]
 80032ac:	4632      	mov	r2, r6
 80032ae:	463b      	mov	r3, r7
 80032b0:	4628      	mov	r0, r5
 80032b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032b6:	f000 b8f7 	b.w	80034a8 <_write_r>

080032ba <__sseek>:
 80032ba:	b510      	push	{r4, lr}
 80032bc:	460c      	mov	r4, r1
 80032be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c2:	f000 f8bd 	bl	8003440 <_lseek_r>
 80032c6:	1c43      	adds	r3, r0, #1
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	bf15      	itete	ne
 80032cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032d6:	81a3      	strheq	r3, [r4, #12]
 80032d8:	bf18      	it	ne
 80032da:	81a3      	strhne	r3, [r4, #12]
 80032dc:	bd10      	pop	{r4, pc}

080032de <__sclose>:
 80032de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032e2:	f000 b89d 	b.w	8003420 <_close_r>

080032e6 <__swbuf_r>:
 80032e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e8:	460e      	mov	r6, r1
 80032ea:	4614      	mov	r4, r2
 80032ec:	4605      	mov	r5, r0
 80032ee:	b118      	cbz	r0, 80032f8 <__swbuf_r+0x12>
 80032f0:	6a03      	ldr	r3, [r0, #32]
 80032f2:	b90b      	cbnz	r3, 80032f8 <__swbuf_r+0x12>
 80032f4:	f7ff ff0e 	bl	8003114 <__sinit>
 80032f8:	69a3      	ldr	r3, [r4, #24]
 80032fa:	60a3      	str	r3, [r4, #8]
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	071a      	lsls	r2, r3, #28
 8003300:	d501      	bpl.n	8003306 <__swbuf_r+0x20>
 8003302:	6923      	ldr	r3, [r4, #16]
 8003304:	b943      	cbnz	r3, 8003318 <__swbuf_r+0x32>
 8003306:	4621      	mov	r1, r4
 8003308:	4628      	mov	r0, r5
 800330a:	f000 f82b 	bl	8003364 <__swsetup_r>
 800330e:	b118      	cbz	r0, 8003318 <__swbuf_r+0x32>
 8003310:	f04f 37ff 	mov.w	r7, #4294967295
 8003314:	4638      	mov	r0, r7
 8003316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	6922      	ldr	r2, [r4, #16]
 800331c:	1a98      	subs	r0, r3, r2
 800331e:	6963      	ldr	r3, [r4, #20]
 8003320:	b2f6      	uxtb	r6, r6
 8003322:	4283      	cmp	r3, r0
 8003324:	4637      	mov	r7, r6
 8003326:	dc05      	bgt.n	8003334 <__swbuf_r+0x4e>
 8003328:	4621      	mov	r1, r4
 800332a:	4628      	mov	r0, r5
 800332c:	f000 fc9a 	bl	8003c64 <_fflush_r>
 8003330:	2800      	cmp	r0, #0
 8003332:	d1ed      	bne.n	8003310 <__swbuf_r+0x2a>
 8003334:	68a3      	ldr	r3, [r4, #8]
 8003336:	3b01      	subs	r3, #1
 8003338:	60a3      	str	r3, [r4, #8]
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	6022      	str	r2, [r4, #0]
 8003340:	701e      	strb	r6, [r3, #0]
 8003342:	6962      	ldr	r2, [r4, #20]
 8003344:	1c43      	adds	r3, r0, #1
 8003346:	429a      	cmp	r2, r3
 8003348:	d004      	beq.n	8003354 <__swbuf_r+0x6e>
 800334a:	89a3      	ldrh	r3, [r4, #12]
 800334c:	07db      	lsls	r3, r3, #31
 800334e:	d5e1      	bpl.n	8003314 <__swbuf_r+0x2e>
 8003350:	2e0a      	cmp	r6, #10
 8003352:	d1df      	bne.n	8003314 <__swbuf_r+0x2e>
 8003354:	4621      	mov	r1, r4
 8003356:	4628      	mov	r0, r5
 8003358:	f000 fc84 	bl	8003c64 <_fflush_r>
 800335c:	2800      	cmp	r0, #0
 800335e:	d0d9      	beq.n	8003314 <__swbuf_r+0x2e>
 8003360:	e7d6      	b.n	8003310 <__swbuf_r+0x2a>
	...

08003364 <__swsetup_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4b29      	ldr	r3, [pc, #164]	@ (800340c <__swsetup_r+0xa8>)
 8003368:	4605      	mov	r5, r0
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	460c      	mov	r4, r1
 800336e:	b118      	cbz	r0, 8003378 <__swsetup_r+0x14>
 8003370:	6a03      	ldr	r3, [r0, #32]
 8003372:	b90b      	cbnz	r3, 8003378 <__swsetup_r+0x14>
 8003374:	f7ff fece 	bl	8003114 <__sinit>
 8003378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800337c:	0719      	lsls	r1, r3, #28
 800337e:	d422      	bmi.n	80033c6 <__swsetup_r+0x62>
 8003380:	06da      	lsls	r2, r3, #27
 8003382:	d407      	bmi.n	8003394 <__swsetup_r+0x30>
 8003384:	2209      	movs	r2, #9
 8003386:	602a      	str	r2, [r5, #0]
 8003388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800338c:	81a3      	strh	r3, [r4, #12]
 800338e:	f04f 30ff 	mov.w	r0, #4294967295
 8003392:	e033      	b.n	80033fc <__swsetup_r+0x98>
 8003394:	0758      	lsls	r0, r3, #29
 8003396:	d512      	bpl.n	80033be <__swsetup_r+0x5a>
 8003398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800339a:	b141      	cbz	r1, 80033ae <__swsetup_r+0x4a>
 800339c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033a0:	4299      	cmp	r1, r3
 80033a2:	d002      	beq.n	80033aa <__swsetup_r+0x46>
 80033a4:	4628      	mov	r0, r5
 80033a6:	f000 f8bf 	bl	8003528 <_free_r>
 80033aa:	2300      	movs	r3, #0
 80033ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80033ae:	89a3      	ldrh	r3, [r4, #12]
 80033b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80033b4:	81a3      	strh	r3, [r4, #12]
 80033b6:	2300      	movs	r3, #0
 80033b8:	6063      	str	r3, [r4, #4]
 80033ba:	6923      	ldr	r3, [r4, #16]
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	89a3      	ldrh	r3, [r4, #12]
 80033c0:	f043 0308 	orr.w	r3, r3, #8
 80033c4:	81a3      	strh	r3, [r4, #12]
 80033c6:	6923      	ldr	r3, [r4, #16]
 80033c8:	b94b      	cbnz	r3, 80033de <__swsetup_r+0x7a>
 80033ca:	89a3      	ldrh	r3, [r4, #12]
 80033cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80033d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d4:	d003      	beq.n	80033de <__swsetup_r+0x7a>
 80033d6:	4621      	mov	r1, r4
 80033d8:	4628      	mov	r0, r5
 80033da:	f000 fc91 	bl	8003d00 <__smakebuf_r>
 80033de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033e2:	f013 0201 	ands.w	r2, r3, #1
 80033e6:	d00a      	beq.n	80033fe <__swsetup_r+0x9a>
 80033e8:	2200      	movs	r2, #0
 80033ea:	60a2      	str	r2, [r4, #8]
 80033ec:	6962      	ldr	r2, [r4, #20]
 80033ee:	4252      	negs	r2, r2
 80033f0:	61a2      	str	r2, [r4, #24]
 80033f2:	6922      	ldr	r2, [r4, #16]
 80033f4:	b942      	cbnz	r2, 8003408 <__swsetup_r+0xa4>
 80033f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80033fa:	d1c5      	bne.n	8003388 <__swsetup_r+0x24>
 80033fc:	bd38      	pop	{r3, r4, r5, pc}
 80033fe:	0799      	lsls	r1, r3, #30
 8003400:	bf58      	it	pl
 8003402:	6962      	ldrpl	r2, [r4, #20]
 8003404:	60a2      	str	r2, [r4, #8]
 8003406:	e7f4      	b.n	80033f2 <__swsetup_r+0x8e>
 8003408:	2000      	movs	r0, #0
 800340a:	e7f7      	b.n	80033fc <__swsetup_r+0x98>
 800340c:	20000018 	.word	0x20000018

08003410 <memset>:
 8003410:	4402      	add	r2, r0
 8003412:	4603      	mov	r3, r0
 8003414:	4293      	cmp	r3, r2
 8003416:	d100      	bne.n	800341a <memset+0xa>
 8003418:	4770      	bx	lr
 800341a:	f803 1b01 	strb.w	r1, [r3], #1
 800341e:	e7f9      	b.n	8003414 <memset+0x4>

08003420 <_close_r>:
 8003420:	b538      	push	{r3, r4, r5, lr}
 8003422:	4d06      	ldr	r5, [pc, #24]	@ (800343c <_close_r+0x1c>)
 8003424:	2300      	movs	r3, #0
 8003426:	4604      	mov	r4, r0
 8003428:	4608      	mov	r0, r1
 800342a:	602b      	str	r3, [r5, #0]
 800342c:	f7fe f8e8 	bl	8001600 <_close>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	d102      	bne.n	800343a <_close_r+0x1a>
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	b103      	cbz	r3, 800343a <_close_r+0x1a>
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	bd38      	pop	{r3, r4, r5, pc}
 800343c:	20000228 	.word	0x20000228

08003440 <_lseek_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4d07      	ldr	r5, [pc, #28]	@ (8003460 <_lseek_r+0x20>)
 8003444:	4604      	mov	r4, r0
 8003446:	4608      	mov	r0, r1
 8003448:	4611      	mov	r1, r2
 800344a:	2200      	movs	r2, #0
 800344c:	602a      	str	r2, [r5, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	f7fe f8fd 	bl	800164e <_lseek>
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d102      	bne.n	800345e <_lseek_r+0x1e>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	b103      	cbz	r3, 800345e <_lseek_r+0x1e>
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	bd38      	pop	{r3, r4, r5, pc}
 8003460:	20000228 	.word	0x20000228

08003464 <_read_r>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	4d07      	ldr	r5, [pc, #28]	@ (8003484 <_read_r+0x20>)
 8003468:	4604      	mov	r4, r0
 800346a:	4608      	mov	r0, r1
 800346c:	4611      	mov	r1, r2
 800346e:	2200      	movs	r2, #0
 8003470:	602a      	str	r2, [r5, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	f7fe f88b 	bl	800158e <_read>
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d102      	bne.n	8003482 <_read_r+0x1e>
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	b103      	cbz	r3, 8003482 <_read_r+0x1e>
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	bd38      	pop	{r3, r4, r5, pc}
 8003484:	20000228 	.word	0x20000228

08003488 <_sbrk_r>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4d06      	ldr	r5, [pc, #24]	@ (80034a4 <_sbrk_r+0x1c>)
 800348c:	2300      	movs	r3, #0
 800348e:	4604      	mov	r4, r0
 8003490:	4608      	mov	r0, r1
 8003492:	602b      	str	r3, [r5, #0]
 8003494:	f7fe f8e8 	bl	8001668 <_sbrk>
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d102      	bne.n	80034a2 <_sbrk_r+0x1a>
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	b103      	cbz	r3, 80034a2 <_sbrk_r+0x1a>
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	bd38      	pop	{r3, r4, r5, pc}
 80034a4:	20000228 	.word	0x20000228

080034a8 <_write_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	4d07      	ldr	r5, [pc, #28]	@ (80034c8 <_write_r+0x20>)
 80034ac:	4604      	mov	r4, r0
 80034ae:	4608      	mov	r0, r1
 80034b0:	4611      	mov	r1, r2
 80034b2:	2200      	movs	r2, #0
 80034b4:	602a      	str	r2, [r5, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f7fe f886 	bl	80015c8 <_write>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d102      	bne.n	80034c6 <_write_r+0x1e>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	b103      	cbz	r3, 80034c6 <_write_r+0x1e>
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	20000228 	.word	0x20000228

080034cc <__errno>:
 80034cc:	4b01      	ldr	r3, [pc, #4]	@ (80034d4 <__errno+0x8>)
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000018 	.word	0x20000018

080034d8 <__libc_init_array>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	4d0d      	ldr	r5, [pc, #52]	@ (8003510 <__libc_init_array+0x38>)
 80034dc:	4c0d      	ldr	r4, [pc, #52]	@ (8003514 <__libc_init_array+0x3c>)
 80034de:	1b64      	subs	r4, r4, r5
 80034e0:	10a4      	asrs	r4, r4, #2
 80034e2:	2600      	movs	r6, #0
 80034e4:	42a6      	cmp	r6, r4
 80034e6:	d109      	bne.n	80034fc <__libc_init_array+0x24>
 80034e8:	4d0b      	ldr	r5, [pc, #44]	@ (8003518 <__libc_init_array+0x40>)
 80034ea:	4c0c      	ldr	r4, [pc, #48]	@ (800351c <__libc_init_array+0x44>)
 80034ec:	f000 fdc0 	bl	8004070 <_init>
 80034f0:	1b64      	subs	r4, r4, r5
 80034f2:	10a4      	asrs	r4, r4, #2
 80034f4:	2600      	movs	r6, #0
 80034f6:	42a6      	cmp	r6, r4
 80034f8:	d105      	bne.n	8003506 <__libc_init_array+0x2e>
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003500:	4798      	blx	r3
 8003502:	3601      	adds	r6, #1
 8003504:	e7ee      	b.n	80034e4 <__libc_init_array+0xc>
 8003506:	f855 3b04 	ldr.w	r3, [r5], #4
 800350a:	4798      	blx	r3
 800350c:	3601      	adds	r6, #1
 800350e:	e7f2      	b.n	80034f6 <__libc_init_array+0x1e>
 8003510:	080041a4 	.word	0x080041a4
 8003514:	080041a4 	.word	0x080041a4
 8003518:	080041a4 	.word	0x080041a4
 800351c:	080041a8 	.word	0x080041a8

08003520 <__retarget_lock_init_recursive>:
 8003520:	4770      	bx	lr

08003522 <__retarget_lock_acquire_recursive>:
 8003522:	4770      	bx	lr

08003524 <__retarget_lock_release_recursive>:
 8003524:	4770      	bx	lr
	...

08003528 <_free_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4605      	mov	r5, r0
 800352c:	2900      	cmp	r1, #0
 800352e:	d041      	beq.n	80035b4 <_free_r+0x8c>
 8003530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003534:	1f0c      	subs	r4, r1, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	bfb8      	it	lt
 800353a:	18e4      	addlt	r4, r4, r3
 800353c:	f7ff fd52 	bl	8002fe4 <__malloc_lock>
 8003540:	4a1d      	ldr	r2, [pc, #116]	@ (80035b8 <_free_r+0x90>)
 8003542:	6813      	ldr	r3, [r2, #0]
 8003544:	b933      	cbnz	r3, 8003554 <_free_r+0x2c>
 8003546:	6063      	str	r3, [r4, #4]
 8003548:	6014      	str	r4, [r2, #0]
 800354a:	4628      	mov	r0, r5
 800354c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003550:	f7ff bd4e 	b.w	8002ff0 <__malloc_unlock>
 8003554:	42a3      	cmp	r3, r4
 8003556:	d908      	bls.n	800356a <_free_r+0x42>
 8003558:	6820      	ldr	r0, [r4, #0]
 800355a:	1821      	adds	r1, r4, r0
 800355c:	428b      	cmp	r3, r1
 800355e:	bf01      	itttt	eq
 8003560:	6819      	ldreq	r1, [r3, #0]
 8003562:	685b      	ldreq	r3, [r3, #4]
 8003564:	1809      	addeq	r1, r1, r0
 8003566:	6021      	streq	r1, [r4, #0]
 8003568:	e7ed      	b.n	8003546 <_free_r+0x1e>
 800356a:	461a      	mov	r2, r3
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	b10b      	cbz	r3, 8003574 <_free_r+0x4c>
 8003570:	42a3      	cmp	r3, r4
 8003572:	d9fa      	bls.n	800356a <_free_r+0x42>
 8003574:	6811      	ldr	r1, [r2, #0]
 8003576:	1850      	adds	r0, r2, r1
 8003578:	42a0      	cmp	r0, r4
 800357a:	d10b      	bne.n	8003594 <_free_r+0x6c>
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	4401      	add	r1, r0
 8003580:	1850      	adds	r0, r2, r1
 8003582:	4283      	cmp	r3, r0
 8003584:	6011      	str	r1, [r2, #0]
 8003586:	d1e0      	bne.n	800354a <_free_r+0x22>
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	6053      	str	r3, [r2, #4]
 800358e:	4408      	add	r0, r1
 8003590:	6010      	str	r0, [r2, #0]
 8003592:	e7da      	b.n	800354a <_free_r+0x22>
 8003594:	d902      	bls.n	800359c <_free_r+0x74>
 8003596:	230c      	movs	r3, #12
 8003598:	602b      	str	r3, [r5, #0]
 800359a:	e7d6      	b.n	800354a <_free_r+0x22>
 800359c:	6820      	ldr	r0, [r4, #0]
 800359e:	1821      	adds	r1, r4, r0
 80035a0:	428b      	cmp	r3, r1
 80035a2:	bf04      	itt	eq
 80035a4:	6819      	ldreq	r1, [r3, #0]
 80035a6:	685b      	ldreq	r3, [r3, #4]
 80035a8:	6063      	str	r3, [r4, #4]
 80035aa:	bf04      	itt	eq
 80035ac:	1809      	addeq	r1, r1, r0
 80035ae:	6021      	streq	r1, [r4, #0]
 80035b0:	6054      	str	r4, [r2, #4]
 80035b2:	e7ca      	b.n	800354a <_free_r+0x22>
 80035b4:	bd38      	pop	{r3, r4, r5, pc}
 80035b6:	bf00      	nop
 80035b8:	200000e8 	.word	0x200000e8

080035bc <__sfputc_r>:
 80035bc:	6893      	ldr	r3, [r2, #8]
 80035be:	3b01      	subs	r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	b410      	push	{r4}
 80035c4:	6093      	str	r3, [r2, #8]
 80035c6:	da08      	bge.n	80035da <__sfputc_r+0x1e>
 80035c8:	6994      	ldr	r4, [r2, #24]
 80035ca:	42a3      	cmp	r3, r4
 80035cc:	db01      	blt.n	80035d2 <__sfputc_r+0x16>
 80035ce:	290a      	cmp	r1, #10
 80035d0:	d103      	bne.n	80035da <__sfputc_r+0x1e>
 80035d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035d6:	f7ff be86 	b.w	80032e6 <__swbuf_r>
 80035da:	6813      	ldr	r3, [r2, #0]
 80035dc:	1c58      	adds	r0, r3, #1
 80035de:	6010      	str	r0, [r2, #0]
 80035e0:	7019      	strb	r1, [r3, #0]
 80035e2:	4608      	mov	r0, r1
 80035e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <__sfputs_r>:
 80035ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ec:	4606      	mov	r6, r0
 80035ee:	460f      	mov	r7, r1
 80035f0:	4614      	mov	r4, r2
 80035f2:	18d5      	adds	r5, r2, r3
 80035f4:	42ac      	cmp	r4, r5
 80035f6:	d101      	bne.n	80035fc <__sfputs_r+0x12>
 80035f8:	2000      	movs	r0, #0
 80035fa:	e007      	b.n	800360c <__sfputs_r+0x22>
 80035fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003600:	463a      	mov	r2, r7
 8003602:	4630      	mov	r0, r6
 8003604:	f7ff ffda 	bl	80035bc <__sfputc_r>
 8003608:	1c43      	adds	r3, r0, #1
 800360a:	d1f3      	bne.n	80035f4 <__sfputs_r+0xa>
 800360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003610 <_vfiprintf_r>:
 8003610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003614:	460d      	mov	r5, r1
 8003616:	b09d      	sub	sp, #116	@ 0x74
 8003618:	4614      	mov	r4, r2
 800361a:	4698      	mov	r8, r3
 800361c:	4606      	mov	r6, r0
 800361e:	b118      	cbz	r0, 8003628 <_vfiprintf_r+0x18>
 8003620:	6a03      	ldr	r3, [r0, #32]
 8003622:	b90b      	cbnz	r3, 8003628 <_vfiprintf_r+0x18>
 8003624:	f7ff fd76 	bl	8003114 <__sinit>
 8003628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800362a:	07d9      	lsls	r1, r3, #31
 800362c:	d405      	bmi.n	800363a <_vfiprintf_r+0x2a>
 800362e:	89ab      	ldrh	r3, [r5, #12]
 8003630:	059a      	lsls	r2, r3, #22
 8003632:	d402      	bmi.n	800363a <_vfiprintf_r+0x2a>
 8003634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003636:	f7ff ff74 	bl	8003522 <__retarget_lock_acquire_recursive>
 800363a:	89ab      	ldrh	r3, [r5, #12]
 800363c:	071b      	lsls	r3, r3, #28
 800363e:	d501      	bpl.n	8003644 <_vfiprintf_r+0x34>
 8003640:	692b      	ldr	r3, [r5, #16]
 8003642:	b99b      	cbnz	r3, 800366c <_vfiprintf_r+0x5c>
 8003644:	4629      	mov	r1, r5
 8003646:	4630      	mov	r0, r6
 8003648:	f7ff fe8c 	bl	8003364 <__swsetup_r>
 800364c:	b170      	cbz	r0, 800366c <_vfiprintf_r+0x5c>
 800364e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003650:	07dc      	lsls	r4, r3, #31
 8003652:	d504      	bpl.n	800365e <_vfiprintf_r+0x4e>
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	b01d      	add	sp, #116	@ 0x74
 800365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800365e:	89ab      	ldrh	r3, [r5, #12]
 8003660:	0598      	lsls	r0, r3, #22
 8003662:	d4f7      	bmi.n	8003654 <_vfiprintf_r+0x44>
 8003664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003666:	f7ff ff5d 	bl	8003524 <__retarget_lock_release_recursive>
 800366a:	e7f3      	b.n	8003654 <_vfiprintf_r+0x44>
 800366c:	2300      	movs	r3, #0
 800366e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003670:	2320      	movs	r3, #32
 8003672:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003676:	f8cd 800c 	str.w	r8, [sp, #12]
 800367a:	2330      	movs	r3, #48	@ 0x30
 800367c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800382c <_vfiprintf_r+0x21c>
 8003680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003684:	f04f 0901 	mov.w	r9, #1
 8003688:	4623      	mov	r3, r4
 800368a:	469a      	mov	sl, r3
 800368c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003690:	b10a      	cbz	r2, 8003696 <_vfiprintf_r+0x86>
 8003692:	2a25      	cmp	r2, #37	@ 0x25
 8003694:	d1f9      	bne.n	800368a <_vfiprintf_r+0x7a>
 8003696:	ebba 0b04 	subs.w	fp, sl, r4
 800369a:	d00b      	beq.n	80036b4 <_vfiprintf_r+0xa4>
 800369c:	465b      	mov	r3, fp
 800369e:	4622      	mov	r2, r4
 80036a0:	4629      	mov	r1, r5
 80036a2:	4630      	mov	r0, r6
 80036a4:	f7ff ffa1 	bl	80035ea <__sfputs_r>
 80036a8:	3001      	adds	r0, #1
 80036aa:	f000 80a7 	beq.w	80037fc <_vfiprintf_r+0x1ec>
 80036ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036b0:	445a      	add	r2, fp
 80036b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80036b4:	f89a 3000 	ldrb.w	r3, [sl]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 809f 	beq.w	80037fc <_vfiprintf_r+0x1ec>
 80036be:	2300      	movs	r3, #0
 80036c0:	f04f 32ff 	mov.w	r2, #4294967295
 80036c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036c8:	f10a 0a01 	add.w	sl, sl, #1
 80036cc:	9304      	str	r3, [sp, #16]
 80036ce:	9307      	str	r3, [sp, #28]
 80036d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80036d6:	4654      	mov	r4, sl
 80036d8:	2205      	movs	r2, #5
 80036da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036de:	4853      	ldr	r0, [pc, #332]	@ (800382c <_vfiprintf_r+0x21c>)
 80036e0:	f7fc fd7e 	bl	80001e0 <memchr>
 80036e4:	9a04      	ldr	r2, [sp, #16]
 80036e6:	b9d8      	cbnz	r0, 8003720 <_vfiprintf_r+0x110>
 80036e8:	06d1      	lsls	r1, r2, #27
 80036ea:	bf44      	itt	mi
 80036ec:	2320      	movmi	r3, #32
 80036ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036f2:	0713      	lsls	r3, r2, #28
 80036f4:	bf44      	itt	mi
 80036f6:	232b      	movmi	r3, #43	@ 0x2b
 80036f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036fc:	f89a 3000 	ldrb.w	r3, [sl]
 8003700:	2b2a      	cmp	r3, #42	@ 0x2a
 8003702:	d015      	beq.n	8003730 <_vfiprintf_r+0x120>
 8003704:	9a07      	ldr	r2, [sp, #28]
 8003706:	4654      	mov	r4, sl
 8003708:	2000      	movs	r0, #0
 800370a:	f04f 0c0a 	mov.w	ip, #10
 800370e:	4621      	mov	r1, r4
 8003710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003714:	3b30      	subs	r3, #48	@ 0x30
 8003716:	2b09      	cmp	r3, #9
 8003718:	d94b      	bls.n	80037b2 <_vfiprintf_r+0x1a2>
 800371a:	b1b0      	cbz	r0, 800374a <_vfiprintf_r+0x13a>
 800371c:	9207      	str	r2, [sp, #28]
 800371e:	e014      	b.n	800374a <_vfiprintf_r+0x13a>
 8003720:	eba0 0308 	sub.w	r3, r0, r8
 8003724:	fa09 f303 	lsl.w	r3, r9, r3
 8003728:	4313      	orrs	r3, r2
 800372a:	9304      	str	r3, [sp, #16]
 800372c:	46a2      	mov	sl, r4
 800372e:	e7d2      	b.n	80036d6 <_vfiprintf_r+0xc6>
 8003730:	9b03      	ldr	r3, [sp, #12]
 8003732:	1d19      	adds	r1, r3, #4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	9103      	str	r1, [sp, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	bfbb      	ittet	lt
 800373c:	425b      	neglt	r3, r3
 800373e:	f042 0202 	orrlt.w	r2, r2, #2
 8003742:	9307      	strge	r3, [sp, #28]
 8003744:	9307      	strlt	r3, [sp, #28]
 8003746:	bfb8      	it	lt
 8003748:	9204      	strlt	r2, [sp, #16]
 800374a:	7823      	ldrb	r3, [r4, #0]
 800374c:	2b2e      	cmp	r3, #46	@ 0x2e
 800374e:	d10a      	bne.n	8003766 <_vfiprintf_r+0x156>
 8003750:	7863      	ldrb	r3, [r4, #1]
 8003752:	2b2a      	cmp	r3, #42	@ 0x2a
 8003754:	d132      	bne.n	80037bc <_vfiprintf_r+0x1ac>
 8003756:	9b03      	ldr	r3, [sp, #12]
 8003758:	1d1a      	adds	r2, r3, #4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	9203      	str	r2, [sp, #12]
 800375e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003762:	3402      	adds	r4, #2
 8003764:	9305      	str	r3, [sp, #20]
 8003766:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800383c <_vfiprintf_r+0x22c>
 800376a:	7821      	ldrb	r1, [r4, #0]
 800376c:	2203      	movs	r2, #3
 800376e:	4650      	mov	r0, sl
 8003770:	f7fc fd36 	bl	80001e0 <memchr>
 8003774:	b138      	cbz	r0, 8003786 <_vfiprintf_r+0x176>
 8003776:	9b04      	ldr	r3, [sp, #16]
 8003778:	eba0 000a 	sub.w	r0, r0, sl
 800377c:	2240      	movs	r2, #64	@ 0x40
 800377e:	4082      	lsls	r2, r0
 8003780:	4313      	orrs	r3, r2
 8003782:	3401      	adds	r4, #1
 8003784:	9304      	str	r3, [sp, #16]
 8003786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800378a:	4829      	ldr	r0, [pc, #164]	@ (8003830 <_vfiprintf_r+0x220>)
 800378c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003790:	2206      	movs	r2, #6
 8003792:	f7fc fd25 	bl	80001e0 <memchr>
 8003796:	2800      	cmp	r0, #0
 8003798:	d03f      	beq.n	800381a <_vfiprintf_r+0x20a>
 800379a:	4b26      	ldr	r3, [pc, #152]	@ (8003834 <_vfiprintf_r+0x224>)
 800379c:	bb1b      	cbnz	r3, 80037e6 <_vfiprintf_r+0x1d6>
 800379e:	9b03      	ldr	r3, [sp, #12]
 80037a0:	3307      	adds	r3, #7
 80037a2:	f023 0307 	bic.w	r3, r3, #7
 80037a6:	3308      	adds	r3, #8
 80037a8:	9303      	str	r3, [sp, #12]
 80037aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037ac:	443b      	add	r3, r7
 80037ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80037b0:	e76a      	b.n	8003688 <_vfiprintf_r+0x78>
 80037b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80037b6:	460c      	mov	r4, r1
 80037b8:	2001      	movs	r0, #1
 80037ba:	e7a8      	b.n	800370e <_vfiprintf_r+0xfe>
 80037bc:	2300      	movs	r3, #0
 80037be:	3401      	adds	r4, #1
 80037c0:	9305      	str	r3, [sp, #20]
 80037c2:	4619      	mov	r1, r3
 80037c4:	f04f 0c0a 	mov.w	ip, #10
 80037c8:	4620      	mov	r0, r4
 80037ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ce:	3a30      	subs	r2, #48	@ 0x30
 80037d0:	2a09      	cmp	r2, #9
 80037d2:	d903      	bls.n	80037dc <_vfiprintf_r+0x1cc>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0c6      	beq.n	8003766 <_vfiprintf_r+0x156>
 80037d8:	9105      	str	r1, [sp, #20]
 80037da:	e7c4      	b.n	8003766 <_vfiprintf_r+0x156>
 80037dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80037e0:	4604      	mov	r4, r0
 80037e2:	2301      	movs	r3, #1
 80037e4:	e7f0      	b.n	80037c8 <_vfiprintf_r+0x1b8>
 80037e6:	ab03      	add	r3, sp, #12
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	462a      	mov	r2, r5
 80037ec:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <_vfiprintf_r+0x228>)
 80037ee:	a904      	add	r1, sp, #16
 80037f0:	4630      	mov	r0, r6
 80037f2:	f3af 8000 	nop.w
 80037f6:	4607      	mov	r7, r0
 80037f8:	1c78      	adds	r0, r7, #1
 80037fa:	d1d6      	bne.n	80037aa <_vfiprintf_r+0x19a>
 80037fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037fe:	07d9      	lsls	r1, r3, #31
 8003800:	d405      	bmi.n	800380e <_vfiprintf_r+0x1fe>
 8003802:	89ab      	ldrh	r3, [r5, #12]
 8003804:	059a      	lsls	r2, r3, #22
 8003806:	d402      	bmi.n	800380e <_vfiprintf_r+0x1fe>
 8003808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800380a:	f7ff fe8b 	bl	8003524 <__retarget_lock_release_recursive>
 800380e:	89ab      	ldrh	r3, [r5, #12]
 8003810:	065b      	lsls	r3, r3, #25
 8003812:	f53f af1f 	bmi.w	8003654 <_vfiprintf_r+0x44>
 8003816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003818:	e71e      	b.n	8003658 <_vfiprintf_r+0x48>
 800381a:	ab03      	add	r3, sp, #12
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	462a      	mov	r2, r5
 8003820:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <_vfiprintf_r+0x228>)
 8003822:	a904      	add	r1, sp, #16
 8003824:	4630      	mov	r0, r6
 8003826:	f000 f879 	bl	800391c <_printf_i>
 800382a:	e7e4      	b.n	80037f6 <_vfiprintf_r+0x1e6>
 800382c:	08004168 	.word	0x08004168
 8003830:	08004172 	.word	0x08004172
 8003834:	00000000 	.word	0x00000000
 8003838:	080035eb 	.word	0x080035eb
 800383c:	0800416e 	.word	0x0800416e

08003840 <_printf_common>:
 8003840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003844:	4616      	mov	r6, r2
 8003846:	4698      	mov	r8, r3
 8003848:	688a      	ldr	r2, [r1, #8]
 800384a:	690b      	ldr	r3, [r1, #16]
 800384c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003850:	4293      	cmp	r3, r2
 8003852:	bfb8      	it	lt
 8003854:	4613      	movlt	r3, r2
 8003856:	6033      	str	r3, [r6, #0]
 8003858:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800385c:	4607      	mov	r7, r0
 800385e:	460c      	mov	r4, r1
 8003860:	b10a      	cbz	r2, 8003866 <_printf_common+0x26>
 8003862:	3301      	adds	r3, #1
 8003864:	6033      	str	r3, [r6, #0]
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	0699      	lsls	r1, r3, #26
 800386a:	bf42      	ittt	mi
 800386c:	6833      	ldrmi	r3, [r6, #0]
 800386e:	3302      	addmi	r3, #2
 8003870:	6033      	strmi	r3, [r6, #0]
 8003872:	6825      	ldr	r5, [r4, #0]
 8003874:	f015 0506 	ands.w	r5, r5, #6
 8003878:	d106      	bne.n	8003888 <_printf_common+0x48>
 800387a:	f104 0a19 	add.w	sl, r4, #25
 800387e:	68e3      	ldr	r3, [r4, #12]
 8003880:	6832      	ldr	r2, [r6, #0]
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	42ab      	cmp	r3, r5
 8003886:	dc26      	bgt.n	80038d6 <_printf_common+0x96>
 8003888:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800388c:	6822      	ldr	r2, [r4, #0]
 800388e:	3b00      	subs	r3, #0
 8003890:	bf18      	it	ne
 8003892:	2301      	movne	r3, #1
 8003894:	0692      	lsls	r2, r2, #26
 8003896:	d42b      	bmi.n	80038f0 <_printf_common+0xb0>
 8003898:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800389c:	4641      	mov	r1, r8
 800389e:	4638      	mov	r0, r7
 80038a0:	47c8      	blx	r9
 80038a2:	3001      	adds	r0, #1
 80038a4:	d01e      	beq.n	80038e4 <_printf_common+0xa4>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	6922      	ldr	r2, [r4, #16]
 80038aa:	f003 0306 	and.w	r3, r3, #6
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	bf02      	ittt	eq
 80038b2:	68e5      	ldreq	r5, [r4, #12]
 80038b4:	6833      	ldreq	r3, [r6, #0]
 80038b6:	1aed      	subeq	r5, r5, r3
 80038b8:	68a3      	ldr	r3, [r4, #8]
 80038ba:	bf0c      	ite	eq
 80038bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038c0:	2500      	movne	r5, #0
 80038c2:	4293      	cmp	r3, r2
 80038c4:	bfc4      	itt	gt
 80038c6:	1a9b      	subgt	r3, r3, r2
 80038c8:	18ed      	addgt	r5, r5, r3
 80038ca:	2600      	movs	r6, #0
 80038cc:	341a      	adds	r4, #26
 80038ce:	42b5      	cmp	r5, r6
 80038d0:	d11a      	bne.n	8003908 <_printf_common+0xc8>
 80038d2:	2000      	movs	r0, #0
 80038d4:	e008      	b.n	80038e8 <_printf_common+0xa8>
 80038d6:	2301      	movs	r3, #1
 80038d8:	4652      	mov	r2, sl
 80038da:	4641      	mov	r1, r8
 80038dc:	4638      	mov	r0, r7
 80038de:	47c8      	blx	r9
 80038e0:	3001      	adds	r0, #1
 80038e2:	d103      	bne.n	80038ec <_printf_common+0xac>
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ec:	3501      	adds	r5, #1
 80038ee:	e7c6      	b.n	800387e <_printf_common+0x3e>
 80038f0:	18e1      	adds	r1, r4, r3
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	2030      	movs	r0, #48	@ 0x30
 80038f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038fa:	4422      	add	r2, r4
 80038fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003900:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003904:	3302      	adds	r3, #2
 8003906:	e7c7      	b.n	8003898 <_printf_common+0x58>
 8003908:	2301      	movs	r3, #1
 800390a:	4622      	mov	r2, r4
 800390c:	4641      	mov	r1, r8
 800390e:	4638      	mov	r0, r7
 8003910:	47c8      	blx	r9
 8003912:	3001      	adds	r0, #1
 8003914:	d0e6      	beq.n	80038e4 <_printf_common+0xa4>
 8003916:	3601      	adds	r6, #1
 8003918:	e7d9      	b.n	80038ce <_printf_common+0x8e>
	...

0800391c <_printf_i>:
 800391c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	7e0f      	ldrb	r7, [r1, #24]
 8003922:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003924:	2f78      	cmp	r7, #120	@ 0x78
 8003926:	4691      	mov	r9, r2
 8003928:	4680      	mov	r8, r0
 800392a:	460c      	mov	r4, r1
 800392c:	469a      	mov	sl, r3
 800392e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003932:	d807      	bhi.n	8003944 <_printf_i+0x28>
 8003934:	2f62      	cmp	r7, #98	@ 0x62
 8003936:	d80a      	bhi.n	800394e <_printf_i+0x32>
 8003938:	2f00      	cmp	r7, #0
 800393a:	f000 80d2 	beq.w	8003ae2 <_printf_i+0x1c6>
 800393e:	2f58      	cmp	r7, #88	@ 0x58
 8003940:	f000 80b9 	beq.w	8003ab6 <_printf_i+0x19a>
 8003944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003948:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800394c:	e03a      	b.n	80039c4 <_printf_i+0xa8>
 800394e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003952:	2b15      	cmp	r3, #21
 8003954:	d8f6      	bhi.n	8003944 <_printf_i+0x28>
 8003956:	a101      	add	r1, pc, #4	@ (adr r1, 800395c <_printf_i+0x40>)
 8003958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800395c:	080039b5 	.word	0x080039b5
 8003960:	080039c9 	.word	0x080039c9
 8003964:	08003945 	.word	0x08003945
 8003968:	08003945 	.word	0x08003945
 800396c:	08003945 	.word	0x08003945
 8003970:	08003945 	.word	0x08003945
 8003974:	080039c9 	.word	0x080039c9
 8003978:	08003945 	.word	0x08003945
 800397c:	08003945 	.word	0x08003945
 8003980:	08003945 	.word	0x08003945
 8003984:	08003945 	.word	0x08003945
 8003988:	08003ac9 	.word	0x08003ac9
 800398c:	080039f3 	.word	0x080039f3
 8003990:	08003a83 	.word	0x08003a83
 8003994:	08003945 	.word	0x08003945
 8003998:	08003945 	.word	0x08003945
 800399c:	08003aeb 	.word	0x08003aeb
 80039a0:	08003945 	.word	0x08003945
 80039a4:	080039f3 	.word	0x080039f3
 80039a8:	08003945 	.word	0x08003945
 80039ac:	08003945 	.word	0x08003945
 80039b0:	08003a8b 	.word	0x08003a8b
 80039b4:	6833      	ldr	r3, [r6, #0]
 80039b6:	1d1a      	adds	r2, r3, #4
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6032      	str	r2, [r6, #0]
 80039bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039c4:	2301      	movs	r3, #1
 80039c6:	e09d      	b.n	8003b04 <_printf_i+0x1e8>
 80039c8:	6833      	ldr	r3, [r6, #0]
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	1d19      	adds	r1, r3, #4
 80039ce:	6031      	str	r1, [r6, #0]
 80039d0:	0606      	lsls	r6, r0, #24
 80039d2:	d501      	bpl.n	80039d8 <_printf_i+0xbc>
 80039d4:	681d      	ldr	r5, [r3, #0]
 80039d6:	e003      	b.n	80039e0 <_printf_i+0xc4>
 80039d8:	0645      	lsls	r5, r0, #25
 80039da:	d5fb      	bpl.n	80039d4 <_printf_i+0xb8>
 80039dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039e0:	2d00      	cmp	r5, #0
 80039e2:	da03      	bge.n	80039ec <_printf_i+0xd0>
 80039e4:	232d      	movs	r3, #45	@ 0x2d
 80039e6:	426d      	negs	r5, r5
 80039e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039ec:	4859      	ldr	r0, [pc, #356]	@ (8003b54 <_printf_i+0x238>)
 80039ee:	230a      	movs	r3, #10
 80039f0:	e011      	b.n	8003a16 <_printf_i+0xfa>
 80039f2:	6821      	ldr	r1, [r4, #0]
 80039f4:	6833      	ldr	r3, [r6, #0]
 80039f6:	0608      	lsls	r0, r1, #24
 80039f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80039fc:	d402      	bmi.n	8003a04 <_printf_i+0xe8>
 80039fe:	0649      	lsls	r1, r1, #25
 8003a00:	bf48      	it	mi
 8003a02:	b2ad      	uxthmi	r5, r5
 8003a04:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a06:	4853      	ldr	r0, [pc, #332]	@ (8003b54 <_printf_i+0x238>)
 8003a08:	6033      	str	r3, [r6, #0]
 8003a0a:	bf14      	ite	ne
 8003a0c:	230a      	movne	r3, #10
 8003a0e:	2308      	moveq	r3, #8
 8003a10:	2100      	movs	r1, #0
 8003a12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a16:	6866      	ldr	r6, [r4, #4]
 8003a18:	60a6      	str	r6, [r4, #8]
 8003a1a:	2e00      	cmp	r6, #0
 8003a1c:	bfa2      	ittt	ge
 8003a1e:	6821      	ldrge	r1, [r4, #0]
 8003a20:	f021 0104 	bicge.w	r1, r1, #4
 8003a24:	6021      	strge	r1, [r4, #0]
 8003a26:	b90d      	cbnz	r5, 8003a2c <_printf_i+0x110>
 8003a28:	2e00      	cmp	r6, #0
 8003a2a:	d04b      	beq.n	8003ac4 <_printf_i+0x1a8>
 8003a2c:	4616      	mov	r6, r2
 8003a2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a32:	fb03 5711 	mls	r7, r3, r1, r5
 8003a36:	5dc7      	ldrb	r7, [r0, r7]
 8003a38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a3c:	462f      	mov	r7, r5
 8003a3e:	42bb      	cmp	r3, r7
 8003a40:	460d      	mov	r5, r1
 8003a42:	d9f4      	bls.n	8003a2e <_printf_i+0x112>
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d10b      	bne.n	8003a60 <_printf_i+0x144>
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	07df      	lsls	r7, r3, #31
 8003a4c:	d508      	bpl.n	8003a60 <_printf_i+0x144>
 8003a4e:	6923      	ldr	r3, [r4, #16]
 8003a50:	6861      	ldr	r1, [r4, #4]
 8003a52:	4299      	cmp	r1, r3
 8003a54:	bfde      	ittt	le
 8003a56:	2330      	movle	r3, #48	@ 0x30
 8003a58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a60:	1b92      	subs	r2, r2, r6
 8003a62:	6122      	str	r2, [r4, #16]
 8003a64:	f8cd a000 	str.w	sl, [sp]
 8003a68:	464b      	mov	r3, r9
 8003a6a:	aa03      	add	r2, sp, #12
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	4640      	mov	r0, r8
 8003a70:	f7ff fee6 	bl	8003840 <_printf_common>
 8003a74:	3001      	adds	r0, #1
 8003a76:	d14a      	bne.n	8003b0e <_printf_i+0x1f2>
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	b004      	add	sp, #16
 8003a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	f043 0320 	orr.w	r3, r3, #32
 8003a88:	6023      	str	r3, [r4, #0]
 8003a8a:	4833      	ldr	r0, [pc, #204]	@ (8003b58 <_printf_i+0x23c>)
 8003a8c:	2778      	movs	r7, #120	@ 0x78
 8003a8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	6831      	ldr	r1, [r6, #0]
 8003a96:	061f      	lsls	r7, r3, #24
 8003a98:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a9c:	d402      	bmi.n	8003aa4 <_printf_i+0x188>
 8003a9e:	065f      	lsls	r7, r3, #25
 8003aa0:	bf48      	it	mi
 8003aa2:	b2ad      	uxthmi	r5, r5
 8003aa4:	6031      	str	r1, [r6, #0]
 8003aa6:	07d9      	lsls	r1, r3, #31
 8003aa8:	bf44      	itt	mi
 8003aaa:	f043 0320 	orrmi.w	r3, r3, #32
 8003aae:	6023      	strmi	r3, [r4, #0]
 8003ab0:	b11d      	cbz	r5, 8003aba <_printf_i+0x19e>
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	e7ac      	b.n	8003a10 <_printf_i+0xf4>
 8003ab6:	4827      	ldr	r0, [pc, #156]	@ (8003b54 <_printf_i+0x238>)
 8003ab8:	e7e9      	b.n	8003a8e <_printf_i+0x172>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	f023 0320 	bic.w	r3, r3, #32
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	e7f6      	b.n	8003ab2 <_printf_i+0x196>
 8003ac4:	4616      	mov	r6, r2
 8003ac6:	e7bd      	b.n	8003a44 <_printf_i+0x128>
 8003ac8:	6833      	ldr	r3, [r6, #0]
 8003aca:	6825      	ldr	r5, [r4, #0]
 8003acc:	6961      	ldr	r1, [r4, #20]
 8003ace:	1d18      	adds	r0, r3, #4
 8003ad0:	6030      	str	r0, [r6, #0]
 8003ad2:	062e      	lsls	r6, r5, #24
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	d501      	bpl.n	8003adc <_printf_i+0x1c0>
 8003ad8:	6019      	str	r1, [r3, #0]
 8003ada:	e002      	b.n	8003ae2 <_printf_i+0x1c6>
 8003adc:	0668      	lsls	r0, r5, #25
 8003ade:	d5fb      	bpl.n	8003ad8 <_printf_i+0x1bc>
 8003ae0:	8019      	strh	r1, [r3, #0]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	6123      	str	r3, [r4, #16]
 8003ae6:	4616      	mov	r6, r2
 8003ae8:	e7bc      	b.n	8003a64 <_printf_i+0x148>
 8003aea:	6833      	ldr	r3, [r6, #0]
 8003aec:	1d1a      	adds	r2, r3, #4
 8003aee:	6032      	str	r2, [r6, #0]
 8003af0:	681e      	ldr	r6, [r3, #0]
 8003af2:	6862      	ldr	r2, [r4, #4]
 8003af4:	2100      	movs	r1, #0
 8003af6:	4630      	mov	r0, r6
 8003af8:	f7fc fb72 	bl	80001e0 <memchr>
 8003afc:	b108      	cbz	r0, 8003b02 <_printf_i+0x1e6>
 8003afe:	1b80      	subs	r0, r0, r6
 8003b00:	6060      	str	r0, [r4, #4]
 8003b02:	6863      	ldr	r3, [r4, #4]
 8003b04:	6123      	str	r3, [r4, #16]
 8003b06:	2300      	movs	r3, #0
 8003b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b0c:	e7aa      	b.n	8003a64 <_printf_i+0x148>
 8003b0e:	6923      	ldr	r3, [r4, #16]
 8003b10:	4632      	mov	r2, r6
 8003b12:	4649      	mov	r1, r9
 8003b14:	4640      	mov	r0, r8
 8003b16:	47d0      	blx	sl
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d0ad      	beq.n	8003a78 <_printf_i+0x15c>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	079b      	lsls	r3, r3, #30
 8003b20:	d413      	bmi.n	8003b4a <_printf_i+0x22e>
 8003b22:	68e0      	ldr	r0, [r4, #12]
 8003b24:	9b03      	ldr	r3, [sp, #12]
 8003b26:	4298      	cmp	r0, r3
 8003b28:	bfb8      	it	lt
 8003b2a:	4618      	movlt	r0, r3
 8003b2c:	e7a6      	b.n	8003a7c <_printf_i+0x160>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	4632      	mov	r2, r6
 8003b32:	4649      	mov	r1, r9
 8003b34:	4640      	mov	r0, r8
 8003b36:	47d0      	blx	sl
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d09d      	beq.n	8003a78 <_printf_i+0x15c>
 8003b3c:	3501      	adds	r5, #1
 8003b3e:	68e3      	ldr	r3, [r4, #12]
 8003b40:	9903      	ldr	r1, [sp, #12]
 8003b42:	1a5b      	subs	r3, r3, r1
 8003b44:	42ab      	cmp	r3, r5
 8003b46:	dcf2      	bgt.n	8003b2e <_printf_i+0x212>
 8003b48:	e7eb      	b.n	8003b22 <_printf_i+0x206>
 8003b4a:	2500      	movs	r5, #0
 8003b4c:	f104 0619 	add.w	r6, r4, #25
 8003b50:	e7f5      	b.n	8003b3e <_printf_i+0x222>
 8003b52:	bf00      	nop
 8003b54:	08004179 	.word	0x08004179
 8003b58:	0800418a 	.word	0x0800418a

08003b5c <__sflush_r>:
 8003b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b64:	0716      	lsls	r6, r2, #28
 8003b66:	4605      	mov	r5, r0
 8003b68:	460c      	mov	r4, r1
 8003b6a:	d454      	bmi.n	8003c16 <__sflush_r+0xba>
 8003b6c:	684b      	ldr	r3, [r1, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	dc02      	bgt.n	8003b78 <__sflush_r+0x1c>
 8003b72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	dd48      	ble.n	8003c0a <__sflush_r+0xae>
 8003b78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b7a:	2e00      	cmp	r6, #0
 8003b7c:	d045      	beq.n	8003c0a <__sflush_r+0xae>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b84:	682f      	ldr	r7, [r5, #0]
 8003b86:	6a21      	ldr	r1, [r4, #32]
 8003b88:	602b      	str	r3, [r5, #0]
 8003b8a:	d030      	beq.n	8003bee <__sflush_r+0x92>
 8003b8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	0759      	lsls	r1, r3, #29
 8003b92:	d505      	bpl.n	8003ba0 <__sflush_r+0x44>
 8003b94:	6863      	ldr	r3, [r4, #4]
 8003b96:	1ad2      	subs	r2, r2, r3
 8003b98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b9a:	b10b      	cbz	r3, 8003ba0 <__sflush_r+0x44>
 8003b9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b9e:	1ad2      	subs	r2, r2, r3
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ba4:	6a21      	ldr	r1, [r4, #32]
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	47b0      	blx	r6
 8003baa:	1c43      	adds	r3, r0, #1
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	d106      	bne.n	8003bbe <__sflush_r+0x62>
 8003bb0:	6829      	ldr	r1, [r5, #0]
 8003bb2:	291d      	cmp	r1, #29
 8003bb4:	d82b      	bhi.n	8003c0e <__sflush_r+0xb2>
 8003bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c60 <__sflush_r+0x104>)
 8003bb8:	410a      	asrs	r2, r1
 8003bba:	07d6      	lsls	r6, r2, #31
 8003bbc:	d427      	bmi.n	8003c0e <__sflush_r+0xb2>
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	6062      	str	r2, [r4, #4]
 8003bc2:	04d9      	lsls	r1, r3, #19
 8003bc4:	6922      	ldr	r2, [r4, #16]
 8003bc6:	6022      	str	r2, [r4, #0]
 8003bc8:	d504      	bpl.n	8003bd4 <__sflush_r+0x78>
 8003bca:	1c42      	adds	r2, r0, #1
 8003bcc:	d101      	bne.n	8003bd2 <__sflush_r+0x76>
 8003bce:	682b      	ldr	r3, [r5, #0]
 8003bd0:	b903      	cbnz	r3, 8003bd4 <__sflush_r+0x78>
 8003bd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8003bd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bd6:	602f      	str	r7, [r5, #0]
 8003bd8:	b1b9      	cbz	r1, 8003c0a <__sflush_r+0xae>
 8003bda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bde:	4299      	cmp	r1, r3
 8003be0:	d002      	beq.n	8003be8 <__sflush_r+0x8c>
 8003be2:	4628      	mov	r0, r5
 8003be4:	f7ff fca0 	bl	8003528 <_free_r>
 8003be8:	2300      	movs	r3, #0
 8003bea:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bec:	e00d      	b.n	8003c0a <__sflush_r+0xae>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	47b0      	blx	r6
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	1c50      	adds	r0, r2, #1
 8003bf8:	d1c9      	bne.n	8003b8e <__sflush_r+0x32>
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0c6      	beq.n	8003b8e <__sflush_r+0x32>
 8003c00:	2b1d      	cmp	r3, #29
 8003c02:	d001      	beq.n	8003c08 <__sflush_r+0xac>
 8003c04:	2b16      	cmp	r3, #22
 8003c06:	d11e      	bne.n	8003c46 <__sflush_r+0xea>
 8003c08:	602f      	str	r7, [r5, #0]
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	e022      	b.n	8003c54 <__sflush_r+0xf8>
 8003c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c12:	b21b      	sxth	r3, r3
 8003c14:	e01b      	b.n	8003c4e <__sflush_r+0xf2>
 8003c16:	690f      	ldr	r7, [r1, #16]
 8003c18:	2f00      	cmp	r7, #0
 8003c1a:	d0f6      	beq.n	8003c0a <__sflush_r+0xae>
 8003c1c:	0793      	lsls	r3, r2, #30
 8003c1e:	680e      	ldr	r6, [r1, #0]
 8003c20:	bf08      	it	eq
 8003c22:	694b      	ldreq	r3, [r1, #20]
 8003c24:	600f      	str	r7, [r1, #0]
 8003c26:	bf18      	it	ne
 8003c28:	2300      	movne	r3, #0
 8003c2a:	eba6 0807 	sub.w	r8, r6, r7
 8003c2e:	608b      	str	r3, [r1, #8]
 8003c30:	f1b8 0f00 	cmp.w	r8, #0
 8003c34:	dde9      	ble.n	8003c0a <__sflush_r+0xae>
 8003c36:	6a21      	ldr	r1, [r4, #32]
 8003c38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c3a:	4643      	mov	r3, r8
 8003c3c:	463a      	mov	r2, r7
 8003c3e:	4628      	mov	r0, r5
 8003c40:	47b0      	blx	r6
 8003c42:	2800      	cmp	r0, #0
 8003c44:	dc08      	bgt.n	8003c58 <__sflush_r+0xfc>
 8003c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c4e:	81a3      	strh	r3, [r4, #12]
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c58:	4407      	add	r7, r0
 8003c5a:	eba8 0800 	sub.w	r8, r8, r0
 8003c5e:	e7e7      	b.n	8003c30 <__sflush_r+0xd4>
 8003c60:	dfbffffe 	.word	0xdfbffffe

08003c64 <_fflush_r>:
 8003c64:	b538      	push	{r3, r4, r5, lr}
 8003c66:	690b      	ldr	r3, [r1, #16]
 8003c68:	4605      	mov	r5, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	b913      	cbnz	r3, 8003c74 <_fflush_r+0x10>
 8003c6e:	2500      	movs	r5, #0
 8003c70:	4628      	mov	r0, r5
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	b118      	cbz	r0, 8003c7e <_fflush_r+0x1a>
 8003c76:	6a03      	ldr	r3, [r0, #32]
 8003c78:	b90b      	cbnz	r3, 8003c7e <_fflush_r+0x1a>
 8003c7a:	f7ff fa4b 	bl	8003114 <__sinit>
 8003c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f3      	beq.n	8003c6e <_fflush_r+0xa>
 8003c86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c88:	07d0      	lsls	r0, r2, #31
 8003c8a:	d404      	bmi.n	8003c96 <_fflush_r+0x32>
 8003c8c:	0599      	lsls	r1, r3, #22
 8003c8e:	d402      	bmi.n	8003c96 <_fflush_r+0x32>
 8003c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c92:	f7ff fc46 	bl	8003522 <__retarget_lock_acquire_recursive>
 8003c96:	4628      	mov	r0, r5
 8003c98:	4621      	mov	r1, r4
 8003c9a:	f7ff ff5f 	bl	8003b5c <__sflush_r>
 8003c9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ca0:	07da      	lsls	r2, r3, #31
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	d4e4      	bmi.n	8003c70 <_fflush_r+0xc>
 8003ca6:	89a3      	ldrh	r3, [r4, #12]
 8003ca8:	059b      	lsls	r3, r3, #22
 8003caa:	d4e1      	bmi.n	8003c70 <_fflush_r+0xc>
 8003cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cae:	f7ff fc39 	bl	8003524 <__retarget_lock_release_recursive>
 8003cb2:	e7dd      	b.n	8003c70 <_fflush_r+0xc>

08003cb4 <__swhatbuf_r>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbc:	2900      	cmp	r1, #0
 8003cbe:	b096      	sub	sp, #88	@ 0x58
 8003cc0:	4615      	mov	r5, r2
 8003cc2:	461e      	mov	r6, r3
 8003cc4:	da0d      	bge.n	8003ce2 <__swhatbuf_r+0x2e>
 8003cc6:	89a3      	ldrh	r3, [r4, #12]
 8003cc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003ccc:	f04f 0100 	mov.w	r1, #0
 8003cd0:	bf14      	ite	ne
 8003cd2:	2340      	movne	r3, #64	@ 0x40
 8003cd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003cd8:	2000      	movs	r0, #0
 8003cda:	6031      	str	r1, [r6, #0]
 8003cdc:	602b      	str	r3, [r5, #0]
 8003cde:	b016      	add	sp, #88	@ 0x58
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
 8003ce2:	466a      	mov	r2, sp
 8003ce4:	f000 f848 	bl	8003d78 <_fstat_r>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	dbec      	blt.n	8003cc6 <__swhatbuf_r+0x12>
 8003cec:	9901      	ldr	r1, [sp, #4]
 8003cee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003cf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003cf6:	4259      	negs	r1, r3
 8003cf8:	4159      	adcs	r1, r3
 8003cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cfe:	e7eb      	b.n	8003cd8 <__swhatbuf_r+0x24>

08003d00 <__smakebuf_r>:
 8003d00:	898b      	ldrh	r3, [r1, #12]
 8003d02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d04:	079d      	lsls	r5, r3, #30
 8003d06:	4606      	mov	r6, r0
 8003d08:	460c      	mov	r4, r1
 8003d0a:	d507      	bpl.n	8003d1c <__smakebuf_r+0x1c>
 8003d0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	6123      	str	r3, [r4, #16]
 8003d14:	2301      	movs	r3, #1
 8003d16:	6163      	str	r3, [r4, #20]
 8003d18:	b003      	add	sp, #12
 8003d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d1c:	ab01      	add	r3, sp, #4
 8003d1e:	466a      	mov	r2, sp
 8003d20:	f7ff ffc8 	bl	8003cb4 <__swhatbuf_r>
 8003d24:	9f00      	ldr	r7, [sp, #0]
 8003d26:	4605      	mov	r5, r0
 8003d28:	4639      	mov	r1, r7
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	f7ff f8da 	bl	8002ee4 <_malloc_r>
 8003d30:	b948      	cbnz	r0, 8003d46 <__smakebuf_r+0x46>
 8003d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d36:	059a      	lsls	r2, r3, #22
 8003d38:	d4ee      	bmi.n	8003d18 <__smakebuf_r+0x18>
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	f043 0302 	orr.w	r3, r3, #2
 8003d42:	81a3      	strh	r3, [r4, #12]
 8003d44:	e7e2      	b.n	8003d0c <__smakebuf_r+0xc>
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	6020      	str	r0, [r4, #0]
 8003d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d4e:	81a3      	strh	r3, [r4, #12]
 8003d50:	9b01      	ldr	r3, [sp, #4]
 8003d52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d56:	b15b      	cbz	r3, 8003d70 <__smakebuf_r+0x70>
 8003d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	f000 f81d 	bl	8003d9c <_isatty_r>
 8003d62:	b128      	cbz	r0, 8003d70 <__smakebuf_r+0x70>
 8003d64:	89a3      	ldrh	r3, [r4, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	81a3      	strh	r3, [r4, #12]
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	431d      	orrs	r5, r3
 8003d74:	81a5      	strh	r5, [r4, #12]
 8003d76:	e7cf      	b.n	8003d18 <__smakebuf_r+0x18>

08003d78 <_fstat_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4d07      	ldr	r5, [pc, #28]	@ (8003d98 <_fstat_r+0x20>)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	4604      	mov	r4, r0
 8003d80:	4608      	mov	r0, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	602b      	str	r3, [r5, #0]
 8003d86:	f7fd fc47 	bl	8001618 <_fstat>
 8003d8a:	1c43      	adds	r3, r0, #1
 8003d8c:	d102      	bne.n	8003d94 <_fstat_r+0x1c>
 8003d8e:	682b      	ldr	r3, [r5, #0]
 8003d90:	b103      	cbz	r3, 8003d94 <_fstat_r+0x1c>
 8003d92:	6023      	str	r3, [r4, #0]
 8003d94:	bd38      	pop	{r3, r4, r5, pc}
 8003d96:	bf00      	nop
 8003d98:	20000228 	.word	0x20000228

08003d9c <_isatty_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	4d06      	ldr	r5, [pc, #24]	@ (8003db8 <_isatty_r+0x1c>)
 8003da0:	2300      	movs	r3, #0
 8003da2:	4604      	mov	r4, r0
 8003da4:	4608      	mov	r0, r1
 8003da6:	602b      	str	r3, [r5, #0]
 8003da8:	f7fd fc46 	bl	8001638 <_isatty>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d102      	bne.n	8003db6 <_isatty_r+0x1a>
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	b103      	cbz	r3, 8003db6 <_isatty_r+0x1a>
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
 8003db8:	20000228 	.word	0x20000228

08003dbc <sqrt>:
 8003dbc:	b538      	push	{r3, r4, r5, lr}
 8003dbe:	ed2d 8b02 	vpush	{d8}
 8003dc2:	ec55 4b10 	vmov	r4, r5, d0
 8003dc6:	f000 f879 	bl	8003ebc <__ieee754_sqrt>
 8003dca:	4622      	mov	r2, r4
 8003dcc:	462b      	mov	r3, r5
 8003dce:	4620      	mov	r0, r4
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	eeb0 8a40 	vmov.f32	s16, s0
 8003dd6:	eef0 8a60 	vmov.f32	s17, s1
 8003dda:	f7fc fea7 	bl	8000b2c <__aeabi_dcmpun>
 8003dde:	b990      	cbnz	r0, 8003e06 <sqrt+0x4a>
 8003de0:	2200      	movs	r2, #0
 8003de2:	2300      	movs	r3, #0
 8003de4:	4620      	mov	r0, r4
 8003de6:	4629      	mov	r1, r5
 8003de8:	f7fc fe78 	bl	8000adc <__aeabi_dcmplt>
 8003dec:	b158      	cbz	r0, 8003e06 <sqrt+0x4a>
 8003dee:	f7ff fb6d 	bl	80034cc <__errno>
 8003df2:	2321      	movs	r3, #33	@ 0x21
 8003df4:	6003      	str	r3, [r0, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	2300      	movs	r3, #0
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f7fc fd25 	bl	800084c <__aeabi_ddiv>
 8003e02:	ec41 0b18 	vmov	d8, r0, r1
 8003e06:	eeb0 0a48 	vmov.f32	s0, s16
 8003e0a:	eef0 0a68 	vmov.f32	s1, s17
 8003e0e:	ecbd 8b02 	vpop	{d8}
 8003e12:	bd38      	pop	{r3, r4, r5, pc}

08003e14 <fmax>:
 8003e14:	b508      	push	{r3, lr}
 8003e16:	ed2d 8b04 	vpush	{d8-d9}
 8003e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8003e1e:	eef0 8a60 	vmov.f32	s17, s1
 8003e22:	eeb0 9a41 	vmov.f32	s18, s2
 8003e26:	eef0 9a61 	vmov.f32	s19, s3
 8003e2a:	f000 f81d 	bl	8003e68 <__fpclassifyd>
 8003e2e:	b950      	cbnz	r0, 8003e46 <fmax+0x32>
 8003e30:	eeb0 8a49 	vmov.f32	s16, s18
 8003e34:	eef0 8a69 	vmov.f32	s17, s19
 8003e38:	eeb0 0a48 	vmov.f32	s0, s16
 8003e3c:	eef0 0a68 	vmov.f32	s1, s17
 8003e40:	ecbd 8b04 	vpop	{d8-d9}
 8003e44:	bd08      	pop	{r3, pc}
 8003e46:	eeb0 0a49 	vmov.f32	s0, s18
 8003e4a:	eef0 0a69 	vmov.f32	s1, s19
 8003e4e:	f000 f80b 	bl	8003e68 <__fpclassifyd>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d0f0      	beq.n	8003e38 <fmax+0x24>
 8003e56:	ec53 2b19 	vmov	r2, r3, d9
 8003e5a:	ec51 0b18 	vmov	r0, r1, d8
 8003e5e:	f7fc fe5b 	bl	8000b18 <__aeabi_dcmpgt>
 8003e62:	2800      	cmp	r0, #0
 8003e64:	d0e4      	beq.n	8003e30 <fmax+0x1c>
 8003e66:	e7e7      	b.n	8003e38 <fmax+0x24>

08003e68 <__fpclassifyd>:
 8003e68:	ec51 0b10 	vmov	r0, r1, d0
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8003e72:	460b      	mov	r3, r1
 8003e74:	d019      	beq.n	8003eaa <__fpclassifyd+0x42>
 8003e76:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8003e7a:	490e      	ldr	r1, [pc, #56]	@ (8003eb4 <__fpclassifyd+0x4c>)
 8003e7c:	428a      	cmp	r2, r1
 8003e7e:	d90e      	bls.n	8003e9e <__fpclassifyd+0x36>
 8003e80:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8003e84:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8003e88:	428a      	cmp	r2, r1
 8003e8a:	d908      	bls.n	8003e9e <__fpclassifyd+0x36>
 8003e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb8 <__fpclassifyd+0x50>)
 8003e8e:	4213      	tst	r3, r2
 8003e90:	d007      	beq.n	8003ea2 <__fpclassifyd+0x3a>
 8003e92:	4294      	cmp	r4, r2
 8003e94:	d107      	bne.n	8003ea6 <__fpclassifyd+0x3e>
 8003e96:	fab0 f080 	clz	r0, r0
 8003e9a:	0940      	lsrs	r0, r0, #5
 8003e9c:	bd10      	pop	{r4, pc}
 8003e9e:	2004      	movs	r0, #4
 8003ea0:	e7fc      	b.n	8003e9c <__fpclassifyd+0x34>
 8003ea2:	2003      	movs	r0, #3
 8003ea4:	e7fa      	b.n	8003e9c <__fpclassifyd+0x34>
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	e7f8      	b.n	8003e9c <__fpclassifyd+0x34>
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d1ee      	bne.n	8003e8c <__fpclassifyd+0x24>
 8003eae:	2002      	movs	r0, #2
 8003eb0:	e7f4      	b.n	8003e9c <__fpclassifyd+0x34>
 8003eb2:	bf00      	nop
 8003eb4:	7fdfffff 	.word	0x7fdfffff
 8003eb8:	7ff00000 	.word	0x7ff00000

08003ebc <__ieee754_sqrt>:
 8003ebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec0:	4a68      	ldr	r2, [pc, #416]	@ (8004064 <__ieee754_sqrt+0x1a8>)
 8003ec2:	ec55 4b10 	vmov	r4, r5, d0
 8003ec6:	43aa      	bics	r2, r5
 8003ec8:	462b      	mov	r3, r5
 8003eca:	4621      	mov	r1, r4
 8003ecc:	d110      	bne.n	8003ef0 <__ieee754_sqrt+0x34>
 8003ece:	4622      	mov	r2, r4
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	f7fc fb90 	bl	80005f8 <__aeabi_dmul>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	f7fc f9d4 	bl	800028c <__adddf3>
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	460d      	mov	r5, r1
 8003ee8:	ec45 4b10 	vmov	d0, r4, r5
 8003eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef0:	2d00      	cmp	r5, #0
 8003ef2:	dc0e      	bgt.n	8003f12 <__ieee754_sqrt+0x56>
 8003ef4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8003ef8:	4322      	orrs	r2, r4
 8003efa:	d0f5      	beq.n	8003ee8 <__ieee754_sqrt+0x2c>
 8003efc:	b19d      	cbz	r5, 8003f26 <__ieee754_sqrt+0x6a>
 8003efe:	4622      	mov	r2, r4
 8003f00:	4620      	mov	r0, r4
 8003f02:	4629      	mov	r1, r5
 8003f04:	f7fc f9c0 	bl	8000288 <__aeabi_dsub>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	f7fc fc9e 	bl	800084c <__aeabi_ddiv>
 8003f10:	e7e8      	b.n	8003ee4 <__ieee754_sqrt+0x28>
 8003f12:	152a      	asrs	r2, r5, #20
 8003f14:	d115      	bne.n	8003f42 <__ieee754_sqrt+0x86>
 8003f16:	2000      	movs	r0, #0
 8003f18:	e009      	b.n	8003f2e <__ieee754_sqrt+0x72>
 8003f1a:	0acb      	lsrs	r3, r1, #11
 8003f1c:	3a15      	subs	r2, #21
 8003f1e:	0549      	lsls	r1, r1, #21
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0fa      	beq.n	8003f1a <__ieee754_sqrt+0x5e>
 8003f24:	e7f7      	b.n	8003f16 <__ieee754_sqrt+0x5a>
 8003f26:	462a      	mov	r2, r5
 8003f28:	e7fa      	b.n	8003f20 <__ieee754_sqrt+0x64>
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	02dc      	lsls	r4, r3, #11
 8003f30:	d5fb      	bpl.n	8003f2a <__ieee754_sqrt+0x6e>
 8003f32:	1e44      	subs	r4, r0, #1
 8003f34:	1b12      	subs	r2, r2, r4
 8003f36:	f1c0 0420 	rsb	r4, r0, #32
 8003f3a:	fa21 f404 	lsr.w	r4, r1, r4
 8003f3e:	4323      	orrs	r3, r4
 8003f40:	4081      	lsls	r1, r0
 8003f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f46:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f4e:	07d2      	lsls	r2, r2, #31
 8003f50:	bf5c      	itt	pl
 8003f52:	005b      	lslpl	r3, r3, #1
 8003f54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8003f58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f5c:	bf58      	it	pl
 8003f5e:	0049      	lslpl	r1, r1, #1
 8003f60:	2600      	movs	r6, #0
 8003f62:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8003f66:	106d      	asrs	r5, r5, #1
 8003f68:	0049      	lsls	r1, r1, #1
 8003f6a:	2016      	movs	r0, #22
 8003f6c:	4632      	mov	r2, r6
 8003f6e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8003f72:	1917      	adds	r7, r2, r4
 8003f74:	429f      	cmp	r7, r3
 8003f76:	bfde      	ittt	le
 8003f78:	193a      	addle	r2, r7, r4
 8003f7a:	1bdb      	suble	r3, r3, r7
 8003f7c:	1936      	addle	r6, r6, r4
 8003f7e:	0fcf      	lsrs	r7, r1, #31
 8003f80:	3801      	subs	r0, #1
 8003f82:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8003f86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003f8a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003f8e:	d1f0      	bne.n	8003f72 <__ieee754_sqrt+0xb6>
 8003f90:	4604      	mov	r4, r0
 8003f92:	2720      	movs	r7, #32
 8003f94:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	eb00 0e0c 	add.w	lr, r0, ip
 8003f9e:	db02      	blt.n	8003fa6 <__ieee754_sqrt+0xea>
 8003fa0:	d113      	bne.n	8003fca <__ieee754_sqrt+0x10e>
 8003fa2:	458e      	cmp	lr, r1
 8003fa4:	d811      	bhi.n	8003fca <__ieee754_sqrt+0x10e>
 8003fa6:	f1be 0f00 	cmp.w	lr, #0
 8003faa:	eb0e 000c 	add.w	r0, lr, ip
 8003fae:	da42      	bge.n	8004036 <__ieee754_sqrt+0x17a>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	db40      	blt.n	8004036 <__ieee754_sqrt+0x17a>
 8003fb4:	f102 0801 	add.w	r8, r2, #1
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	458e      	cmp	lr, r1
 8003fbc:	bf88      	it	hi
 8003fbe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003fc2:	eba1 010e 	sub.w	r1, r1, lr
 8003fc6:	4464      	add	r4, ip
 8003fc8:	4642      	mov	r2, r8
 8003fca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8003fce:	3f01      	subs	r7, #1
 8003fd0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8003fd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003fd8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003fdc:	d1dc      	bne.n	8003f98 <__ieee754_sqrt+0xdc>
 8003fde:	4319      	orrs	r1, r3
 8003fe0:	d01b      	beq.n	800401a <__ieee754_sqrt+0x15e>
 8003fe2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004068 <__ieee754_sqrt+0x1ac>
 8003fe6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800406c <__ieee754_sqrt+0x1b0>
 8003fea:	e9da 0100 	ldrd	r0, r1, [sl]
 8003fee:	e9db 2300 	ldrd	r2, r3, [fp]
 8003ff2:	f7fc f949 	bl	8000288 <__aeabi_dsub>
 8003ff6:	e9da 8900 	ldrd	r8, r9, [sl]
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4640      	mov	r0, r8
 8004000:	4649      	mov	r1, r9
 8004002:	f7fc fd75 	bl	8000af0 <__aeabi_dcmple>
 8004006:	b140      	cbz	r0, 800401a <__ieee754_sqrt+0x15e>
 8004008:	f1b4 3fff 	cmp.w	r4, #4294967295
 800400c:	e9da 0100 	ldrd	r0, r1, [sl]
 8004010:	e9db 2300 	ldrd	r2, r3, [fp]
 8004014:	d111      	bne.n	800403a <__ieee754_sqrt+0x17e>
 8004016:	3601      	adds	r6, #1
 8004018:	463c      	mov	r4, r7
 800401a:	1072      	asrs	r2, r6, #1
 800401c:	0863      	lsrs	r3, r4, #1
 800401e:	07f1      	lsls	r1, r6, #31
 8004020:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004024:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004028:	bf48      	it	mi
 800402a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800402e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004032:	4618      	mov	r0, r3
 8004034:	e756      	b.n	8003ee4 <__ieee754_sqrt+0x28>
 8004036:	4690      	mov	r8, r2
 8004038:	e7be      	b.n	8003fb8 <__ieee754_sqrt+0xfc>
 800403a:	f7fc f927 	bl	800028c <__adddf3>
 800403e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4640      	mov	r0, r8
 8004048:	4649      	mov	r1, r9
 800404a:	f7fc fd47 	bl	8000adc <__aeabi_dcmplt>
 800404e:	b120      	cbz	r0, 800405a <__ieee754_sqrt+0x19e>
 8004050:	1ca0      	adds	r0, r4, #2
 8004052:	bf08      	it	eq
 8004054:	3601      	addeq	r6, #1
 8004056:	3402      	adds	r4, #2
 8004058:	e7df      	b.n	800401a <__ieee754_sqrt+0x15e>
 800405a:	1c63      	adds	r3, r4, #1
 800405c:	f023 0401 	bic.w	r4, r3, #1
 8004060:	e7db      	b.n	800401a <__ieee754_sqrt+0x15e>
 8004062:	bf00      	nop
 8004064:	7ff00000 	.word	0x7ff00000
 8004068:	20000070 	.word	0x20000070
 800406c:	20000068 	.word	0x20000068

08004070 <_init>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr

0800407c <_fini>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr
